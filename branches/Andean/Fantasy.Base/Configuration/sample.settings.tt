<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq"#> 
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" encoding="UNICODE" #>
<# 
   string settingsFile = Path.GetDirectoryName(Host.TemplateFile) + "\\" + Path.GetFileNameWithoutExtension(Host.TemplateFile);
   XElement root = XElement.Load(settingsFile);
   XNamespace sn = "http://schemas.microsoft.com/VisualStudio/2004/01/settings";
   string className = (string)root.Attribute("GeneratedClassName");
   string classNamespace = (string)root.Attribute("GeneratedClassNamespace");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <#=classNamespace#>
{
    public partial class <#=className#> : Fantasy.Configuration.SettingsBase
	{
	    private static <#=className#> _default = (<#=className#>)Fantasy.Configuration.SettingStorage.Load(new <#=className#>());
		
		public static <#=className#> Default
		{
		    get
			{
			    return _default;
			}
		}

<#
var query = from settings in root.Elements(sn + "Settings")
	        from setting in settings.Elements(sn + "Setting")
	        select setting;
foreach(XElement setting in query)
{
	string propertyType = (string)setting.Attribute("Type");
	if(propertyType == "(Web Service URL)" || propertyType == "(Connection string)")
	{
		propertyType = "System.String";
	}
	string propertyName = (string)setting.Attribute("Name");
	XElement value = setting.Element(sn + "Value");
	if((string)setting.Attribute("Scope") == "Application")
	{#>
		[System.Configuration.ApplicationScopedSetting]
    <#}
    else
	{#>
	    [System.Configuration.UserScopedSetting]
	<#}
	if(value != null && !value.IsEmpty)
	{#>
    [System.Configuration.DefaultSettingValueAttribute(@"<#=((string)value).Replace("\"", "\"\"")#>")]
<#}#>
        public <#=propertyType#> <#=propertyName#>
		{
		    get
			{
			    return (<#=propertyType#>)this.GetValue("<#=propertyName#>");
			}
<# if(propertyType != "System.Collections.Specialized.StringCollection" && (string)setting.Attribute("Scope") == "User")
{#>
			set
			{
			    this.SetValue("<#=(string)setting.Attribute("Name")#>", value);
			}
<#}
#>
		}

<#}#>
	}
}
