<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".vb" encoding="UNICODE" #>
<# 
   string settingsFile = Path.GetDirectoryName(Host.TemplateFile) + "\\" + Path.GetFileNameWithoutExtension(Host.TemplateFile);
   if(settingsFile.EndsWith(".vb", StringComparison.OrdinalIgnoreCase))
{
	settingsFile = settingsFile.Remove(settingsFile.Length - 3);
}
   XElement root = XElement.Load(settingsFile);
   XNamespace sn = "http://schemas.microsoft.com/VisualStudio/2004/01/settings";
   string className = (string)root.Attribute("GeneratedClassName");
   string classNamespace = (string)root.Attribute("GeneratedClassNamespace");
#>
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Namespace <#=classNamespace#>
    Partial Friend NotInheritable Class <#=className#>
	    Inherits  Fantasy.Configuration.SettingsBase
		
		Private Shared _default as <#=className#> = CType(Fantasy.Configuration.SettingStorage.Load(new <#=className#>()), <#=className#>)
		public Shared Readonly Property [Default]
		    Get
			    Return _default
			End Get
		End Property
		
	<#
var query = from settings in root.Elements(sn + "Settings")
	        from setting in settings.Elements(sn + "Setting")
	        select setting;
foreach(XElement setting in query)
{
	string propertyType = (string)setting.Attribute("Type");
	if(propertyType == "(Web Service URL)" || propertyType == "(Connection string)")
	{
		propertyType = "System.String";
	}
	string propertyName = (string)setting.Attribute("Name");
	XElement value = setting.Element(sn + "Value");
	bool readOnly = propertyType == "System.Collections.Specialized.StringCollection" || (string)setting.Attribute("Scope") == "Application";
	if(value != null && !value.IsEmpty)
	{
		if((string)setting.Attribute("Scope") == "Application")
	{#>
		<System.Configuration.ApplicationScopedSettin>_
    <#}
    else
	{#>
	    <System.Configuration.UserScopedSetting> _
	<#}
		#>
		<System.Configuration.DefaultSettingValueAttribute(<#=ToVBString((string)value)#>)> _
<#}#>
        Public <#= readOnly ? "ReadOnly " : ""#> Property <#=propertyName#>() as <#=propertyType#> 
		    Get
			
			    return CType(this.GetValue("<#=propertyName#>"), <#=propertyType#>)
			End Get
<# if(! readOnly)
{#>
			Set
			
			    this.SetValue("<#=(string)setting.Attribute("Name")#>", value)
			End Set
<#}
#>
		End Property

<#}#>	
    End Class
End Namespace


<#+  
    string ToVBString(string source)
{
	StringReader reader = new StringReader(source);
	StringBuilder rs = new StringBuilder();
	string line = null;
	do
	{
		line = reader.ReadLine();
		if(line != null)
		{
			if(rs.Length > 0)
			{
				rs.Append(" _\n");
				rs.Append("& vbCrLf &");
			}
			line = line.Replace("\"", "\"\"");
			rs.Append("\"");
			rs.Append(line);
			rs.Append("\"");
		}
	}while (line != null);
	return rs.ToString();
}
#>