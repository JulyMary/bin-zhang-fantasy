package Fantasy.Jobs.Expressions;

import Fantasy.Jobs.Properties.*;

// Generated by TinyPG v1.2 available at www.codeproject.com




public class ParseTree extends ParseNode
{
	public ParseErrors Errors;

	public java.util.ArrayList<Token> Skipped;

	public ParseTree()
	{
		super(new Token(), "ParseTree");
		Token.Type = TokenType.Start;
		Token.setText("Root");
		Skipped = new java.util.ArrayList<Token>();
		Errors = new ParseErrors();
	}

	public final String PrintTree()
	{
		StringBuilder sb = new StringBuilder();
		int indent = 0;
		PrintNode(sb, this, indent);
		return sb.toString();
	}

	private void PrintNode(StringBuilder sb, ParseNode node, int indent)
	{

		String space = (new String("")).PadLeft(indent, ' ');

		sb.append(space);
		sb.AppendLine(node.getText());

		for (ParseNode n : node.getNodes())
		{
			PrintNode(sb, n, indent + 2);
		}
	}

	/** 
	 this is the entry point for executing and evaluating the parse tree.
	 
	 @param paramlist additional optional input parameters
	 @return the output of the evaluation function
	*/
	public final Object Eval(Object... paramlist)
	{
		return getNodes().get(0).Eval(this, paramlist);
	}


//C# TO JAVA CONVERTER TODO TASK: Events are not available in Java:
//	public event EventHandler<InvokeFunctionEventArgs> InvokeFunction;

	public final Object OnInvokeFunction(java.lang.Class t, String functionName, Object[] arguments)
	{
		if (this.InvokeFunction != null)
		{
			InvokeFunctionEventArgs e = new InvokeFunctionEventArgs(t, functionName, arguments);
			this.InvokeFunction(this, e);
			if (e.getHandled())
			{
				return e.getResult();
			}

		}

		return t.InvokeMember(functionName, BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, arguments);



	}




}