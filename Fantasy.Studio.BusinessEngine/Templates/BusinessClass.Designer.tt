<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="Fantasy.Base"#>
<#@ assembly name="Fantasy.BusinessEngine" #>
<#@ import namespace="Fantasy"#>
<#@ import namespace="Fantasy.BusinessEngine"#>
<#@ import namespace="Fantasy.BusinessEngine.Services"#>
<#
    IServiceProvider services = (IServiceProvider)Host;
	BusinessClass _class = services.GetRequiredService<BusinessClass>();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Fantasy.BusinessEngine;
using Fantasy.BusinessEngine.Collections;


namespace <#=_class.Package.FullCodeName#>
{
    public partial class <#=_class.CodeName#> : <#=_class.ParentClass.FullCodeName#>
	{
<#
foreach(BusinessProperty property in _class.Properties)
{
    string type = GetDataType(property);
	string name = property.CodeName;
    RenderScalar(name, type);
}
foreach(BusinessAssociation assn in _class.LeftAssociations)
{
	string name = assn.RightRoleCode;
	string type = assn.RightClass.FullCodeName;
	Cardinality card = new Cardinality(assn.RightCardinality);
	if(card.IsSingleton)
	{
	    RenderScalar(name, type);
	}
	else
	{
        RenderCollection(name, type);
	}

}

foreach(BusinessAssociation assn in _class.RightAssociations)
{
	string name = assn.LeftRoleCode;
	string type = assn.LeftClass.FullCodeName;
	Cardinality card = new Cardinality(assn.LeftCardinality);
	if(card.IsSingleton)
	{
	    RenderScalar(name, type);
	}
	else
	{
        RenderCollection(name, type);
	}

}
#>	

	}

}

<#+

private static readonly Guid[] ValueDataTypeIds = new Guid[] {
	BusinessDataType.WellknownIds.Boolean,
	BusinessDataType.WellknownIds.Byte,
	BusinessDataType.WellknownIds.DateTime, 
	BusinessDataType.WellknownIds.DateTimeOffset,
	BusinessDataType.WellknownIds.Decimal,
	BusinessDataType.WellknownIds.Double,
	BusinessDataType.WellknownIds.Float, 
	BusinessDataType.WellknownIds.Guid, 
	BusinessDataType.WellknownIds.Int16, 
	BusinessDataType.WellknownIds.Int32, 
	BusinessDataType.WellknownIds.Int64, 
	BusinessDataType.WellknownIds.UInt16, 
	BusinessDataType.WellknownIds.UInt32, 
	BusinessDataType.WellknownIds.UInt64, 
	BusinessDataType.WellknownIds.Enum 
};

private bool IsValueType(BusinessDataType dataType)
{
	return Array.IndexOf(ValueDataTypeIds, dataType.Id) >= 0;
}

private string GetDataType(BusinessProperty property)
{
	BusinessDataType dataType = property.DataType;
	string rs;
	if(dataType.Id == BusinessDataType.WellknownIds.Class)
	{
		rs = property.DataClassType.FullCodeName;
	}
	else if(dataType.Id == BusinessDataType.WellknownIds.Enum)
	{
		rs = property.DataEnumType.FullCodeName;
	}
	else	
	{
		rs = dataType.CodeName;
	}
	
	if(property.IsNullable &&　Array.IndexOf(ValueDataTypeIds, dataType.Id) >= 0)
	{
		rs += "?";
	}
	return rs;
}

private void RenderScalar(string name, string type)
{#>  
		
		public virtual <#=type#> <#=name#>
		{
		    get
            {
                return (<#=type#>)this.GetValue("<#=name#>");
            }
            set
            {
			    <#=type#> old = this.<#=name#>;
			    if(!Object.Equals(old, value))
				{
				    EntityPropertyChangingEventArgs e1 = new EntityPropertyChangingEventArgs(this, "<#=name#>", value, old);
				    this.On<#=name#>Changing(e1);
					if(!e1.Cancel)
					{
                        if(this.SetValue("<#=name#>", value))
						{
					        this.On<#=name#>Changed(new EntityPropertyChangedEventArgs(this, propertyName, value, old));
						}
					}
				}
            }
		}
		
		partial void On<#=name#>Changed(EntityPropertyChangedEventArgs e);
		
		partial void On<#=name#>Changing(EntityPropertyChangingEventArgs e);
		
<#+                                                                                                                                                                                                                                                                                                                                                                                                                                                 
}


private void RenderCollection(string name, string type)
{#>
       
		protected virtual ObservableList<<#=type#>> Persisted<#=name#>
        {
            get
			{ 
			    return GetPersistedCollection<<#=type#>>("<#=name#>"); 
			}
            private set
            {
                SetPersistedCollection("<#=name#>", value);
            }
        }

        public virtual BusinessObjectCollection<<#=type#>> <#=name#>
        {
            get
            {
               return GetCollection<<#=type#>>("<#=name#>");
            }
        }
<#+
}



#>