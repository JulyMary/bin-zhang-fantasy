@model Fantasy.Jobs.Web.Models.JobModel
@using Fantasy.Jobs; 
@using System.Xml.Linq; 
@{string title = string.Format("{0} - Details - Fantasy Job Service", Model.MetaData.Name);} 
@{bool isTerminated = (Model.MetaData.State & Fantasy.Jobs.JobState.Terminated) == Fantasy.Jobs.JobState.Terminated;}
@{
    ViewBag.Title = title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section head{
    <script src="@Url.Content("~/Scripts/sh/shcore.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/sh/shBrushXml.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jobdetails.js")" type="text/javascript"></script>
    <link rel="Stylesheet" type="text/css" href="@Url.Content("~/Content/sh/shCore.css")" />
    <link rel="Stylesheet" type="text/css" href="@Url.Content("~/Content/sh/shThemeRDark.css")" />
}
<input id="jobId" type="hidden" value="@Model.MetaData.Id" />
<input type="hidden" value="@HttpUtility.UrlDecode(Url.Action("{0}"))"  id="jsonUrl"/>
<input id="enableRefresh" type="hidden" value="@(!isTerminated)" />
<div style="margin-top:10px;">
    <img id="StateImage" border="0" alt="@Fantasy.Jobs.JobState.ToString(Model.MetaData.State)" src="@Fantasy.Jobs.Web.Controllers.JobStateImageHelper.GetImageUrl(this.Url, Model.MetaData.State)" style="width:32px;height:32px;float:left;vertical-align:middle;" />
    <h2 style="float:left; margin:0px; margin-top:5px; margin-left:10px;">@title</h2>
</div>

<div style="clear:both;margin-top: 50px;">
    <a id="show_log_link" href="@Url.Action("Log", new { id = this.Model.MetaData.Id })"><img alt="log" src="@Url.Content("~/Content/images/log.png")" border="0"  style="width:32px;height:32px;vertical-align:middle;"/> Show Log</a>
</div>
<ul>
    <li>Template:&nbsp;@Model.MetaData.Template</li>
    <li>Creation Time:&nbsp;@Model.MetaData.CreationTime</li>
    <li>Application:&nbsp;@Model.MetaData.Application</li>
    <li>User:&nbsp;@Model.MetaData.User</li>
    <li>Start Time:&nbsp;@Model.MetaData.StartTime</li>
    <li>End Time:&nbsp;@Model.MetaData.EndTime</li>
    <li>Priority:&nbsp;@Model.MetaData.Priority</li>
</ul> 

@functions
{
  string disabledString(bool disabled)
  {
    if(disabled)
    {
        
        return "disabled=\"disabled\"";
    }
    else
    {
        return "";
    }
  }
  
  string FormatXml(string xml)
  {
      XElement element = XElement.Parse(xml);
      System.Xml.XmlWriterSettings settings = new System.Xml.XmlWriterSettings()
      {
          Indent = true,
          IndentChars = "    ",
          NewLineOnAttributes = true,
      };
      MemoryStream stream = new MemoryStream();
      System.Xml.XmlWriter writer = System.Xml.XmlWriter.Create(stream, settings);
      element.WriteTo(writer);
      writer.Close();
      stream.Seek(0, SeekOrigin.Begin);
      StreamReader reader = new StreamReader(stream);
      string rs = reader.ReadToEnd(); 
      return rs;
  }
  
  
 
}

@if (!isTerminated)
{
    <hr />
    <div id="operationbar" >
        <button onclick="changeJobState('resume')" type="button" @disabledString(Model.MetaData.State != JobState.UserPaused)  id="button_resume" class="jobdetails-operationbar-button">
            <img src="@Url.Content("~/Content/JobState/running.png")" class="imgingrid" alt="Resume" /></button>
           
        <button onclick="changeJobState('pause')" type="button" @disabledString(Model.MetaData.State == JobState.UserPaused)  id="button_pause" class="jobdetails-operationbar-button">
            <img src="@Url.Content("~/Content/JobState/userpaused.png")" class="imgingrid" alt="Pause" /></button>
           
        <button onclick="changeJobState('stop')" type="button"  id="button_stop" class="jobdetails-operationbar-button" >
            <img src="@Url.Content("~/Content/JobState/cancelled.png")" class="imgingrid" alt="Stop" /></button>
    </div> 
  <h3 style="margin-bottom:0px;">Action</h3><br />
  <div class="runningjobs-progress-large" ><div class="runningjobs-progress-text-large">@Model.Progress%</div><div class="runningjobs-progress-bar-large" initValue="@Model.Progress"></div></div> 
  <div style="float:left;" class="runningjobs-status-large">@Model.Status</div> 
}
<hr style="clear: both; margin-top: 30px;" />
<h3>Start Infomation</h3>
<div class="script-container">
    <pre class="brush: xml;toolbar: false">@FormatXml(Model.MetaData.StartInfo)</pre>
</div>

@if (!string.IsNullOrEmpty(Model.Script))
{  
    <hr />
    <h3>Script</h3>
    <div class="script-container">
    <pre class="brush: xml;toolbar: false">@FormatXml(Model.Script)</pre>
    </div>
}

