/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
}
if (! _$jscoverage['jquery.validate.min.js']) {
  _$jscoverage['jquery.validate.min.js'] = [];
  _$jscoverage['jquery.validate.min.js'][15] = 0;
  _$jscoverage['jquery.validate.min.js'][16] = 0;
}
_$jscoverage['jquery.validate.min.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\"> * jQuery validation plug-in 1.7</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * http://bassistance.de/jquery-plugins/jquery-plugin-validation/</span>","<span class=\"c\"> * http://docs.jquery.com/Plugins/Validation</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright (c) 2006 - 2008 J&#246;rn Zaefferer</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * $Id: jquery.validate.js 6403 2009-06-17 14:27:16Z joern.zaefferer $</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Dual licensed under the MIT and GPL licenses:</span>","<span class=\"c\"> *   http://www.opensource.org/licenses/mit-license.php</span>","<span class=\"c\"> *   http://www.gnu.org/licenses/gpl.html</span>","<span class=\"c\"> */</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>$<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>$<span class=\"k\">.</span>fn<span class=\"k\">,</span><span class=\"k\">{</span>validate<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>options<span class=\"k\">&amp;&amp;</span>options<span class=\"k\">.</span>debug<span class=\"k\">&amp;&amp;</span>window<span class=\"k\">.</span>console<span class=\"k\">&amp;&amp;</span>console<span class=\"k\">.</span>warn<span class=\"k\">(</span><span class=\"s\">\"nothing selected, can't validate, returning nothing\"</span><span class=\"k\">);</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">var</span> validator<span class=\"k\">=</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span><span class=\"s\">'validator'</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> validator<span class=\"k\">;</span><span class=\"k\">}</span>validator<span class=\"k\">=</span><span class=\"k\">new</span> $<span class=\"k\">.</span>validator<span class=\"k\">(</span>options<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span><span class=\"s\">'validator'</span><span class=\"k\">,</span>validator<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>onsubmit<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">\"input, button\"</span><span class=\"k\">).</span>filter<span class=\"k\">(</span><span class=\"s\">\".cancel\"</span><span class=\"k\">).</span>click<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>validator<span class=\"k\">.</span>cancelSubmit<span class=\"k\">=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>submitHandler<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">\"input, button\"</span><span class=\"k\">).</span>filter<span class=\"k\">(</span><span class=\"s\">\":submit\"</span><span class=\"k\">).</span>click<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>validator<span class=\"k\">.</span>submitButton<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">this</span><span class=\"k\">.</span>submit<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>debug<span class=\"k\">)</span>event<span class=\"k\">.</span>preventDefault<span class=\"k\">();</span><span class=\"k\">function</span> handle<span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>submitHandler<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>submitButton<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> hidden<span class=\"k\">=</span>$<span class=\"k\">(</span><span class=\"s\">\"&lt;input type='hidden'/&gt;\"</span><span class=\"k\">).</span>attr<span class=\"k\">(</span><span class=\"s\">\"name\"</span><span class=\"k\">,</span>validator<span class=\"k\">.</span>submitButton<span class=\"k\">.</span>name<span class=\"k\">).</span>val<span class=\"k\">(</span>validator<span class=\"k\">.</span>submitButton<span class=\"k\">.</span>value<span class=\"k\">).</span>appendTo<span class=\"k\">(</span>validator<span class=\"k\">.</span>currentForm<span class=\"k\">);</span><span class=\"k\">}</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>submitHandler<span class=\"k\">.</span>call<span class=\"k\">(</span>validator<span class=\"k\">,</span>validator<span class=\"k\">.</span>currentForm<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>submitButton<span class=\"k\">)</span><span class=\"k\">{</span>hidden<span class=\"k\">.</span>remove<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>cancelSubmit<span class=\"k\">)</span><span class=\"k\">{</span>validator<span class=\"k\">.</span>cancelSubmit<span class=\"k\">=</span><span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">return</span> handle<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>form<span class=\"k\">())</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>pendingRequest<span class=\"k\">)</span><span class=\"k\">{</span>validator<span class=\"k\">.</span>formSubmitted<span class=\"k\">=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> handle<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>validator<span class=\"k\">.</span>focusInvalid<span class=\"k\">();</span><span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">return</span> validator<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>valid<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]).</span>is<span class=\"k\">(</span><span class=\"s\">'form'</span><span class=\"k\">))</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>validate<span class=\"k\">().</span>form<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span><span class=\"k\">var</span> valid<span class=\"k\">=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">var</span> validator<span class=\"k\">=</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>form<span class=\"k\">).</span>validate<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>valid<span class=\"k\">&amp;=</span>validator<span class=\"k\">.</span>element<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">return</span> valid<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">,</span>removeAttrs<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>attributes<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> result<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">,</span>$element<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">;</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>attributes<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s/</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">,</span>value<span class=\"k\">)</span><span class=\"k\">{</span>result<span class=\"k\">[</span>value<span class=\"k\">]=</span>$element<span class=\"k\">.</span>attr<span class=\"k\">(</span>value<span class=\"k\">);</span>$element<span class=\"k\">.</span>removeAttr<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">return</span> result<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>rules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>command<span class=\"k\">,</span>argument<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> element<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span><span class=\"k\">if</span><span class=\"k\">(</span>command<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> settings<span class=\"k\">=</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span>element<span class=\"k\">.</span>form<span class=\"k\">,</span><span class=\"s\">'validator'</span><span class=\"k\">).</span>settings<span class=\"k\">;</span><span class=\"k\">var</span> staticRules<span class=\"k\">=</span>settings<span class=\"k\">.</span>rules<span class=\"k\">;</span><span class=\"k\">var</span> existingRules<span class=\"k\">=</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>staticRules<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">switch</span><span class=\"k\">(</span>command<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">case</span><span class=\"s\">\"add\"</span><span class=\"k\">:</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>existingRules<span class=\"k\">,</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>normalizeRule<span class=\"k\">(</span>argument<span class=\"k\">));</span>staticRules<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span>existingRules<span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span>argument<span class=\"k\">.</span>messages<span class=\"k\">)</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">],</span>argument<span class=\"k\">.</span>messages<span class=\"k\">);</span><span class=\"k\">break</span><span class=\"k\">;</span><span class=\"k\">case</span><span class=\"s\">\"remove\"</span><span class=\"k\">:</span><span class=\"k\">if</span><span class=\"k\">(!</span>argument<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">delete</span> staticRules<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">];</span><span class=\"k\">return</span> existingRules<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">var</span> filtered<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>argument<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s/</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">,</span>method<span class=\"k\">)</span><span class=\"k\">{</span>filtered<span class=\"k\">[</span>method<span class=\"k\">]=</span>existingRules<span class=\"k\">[</span>method<span class=\"k\">];</span><span class=\"k\">delete</span> existingRules<span class=\"k\">[</span>method<span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">return</span> filtered<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">var</span> data<span class=\"k\">=</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>normalizeRules<span class=\"k\">(</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>metadataRules<span class=\"k\">(</span>element<span class=\"k\">),</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>classRules<span class=\"k\">(</span>element<span class=\"k\">),</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>attributeRules<span class=\"k\">(</span>element<span class=\"k\">),</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>staticRules<span class=\"k\">(</span>element<span class=\"k\">)),</span>element<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>data<span class=\"k\">.</span>required<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> param<span class=\"k\">=</span>data<span class=\"k\">.</span>required<span class=\"k\">;</span><span class=\"k\">delete</span> data<span class=\"k\">.</span>required<span class=\"k\">;</span>data<span class=\"k\">=</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{</span>required<span class=\"k\">:</span>param<span class=\"k\">}</span><span class=\"k\">,</span>data<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">return</span> data<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>$<span class=\"k\">.</span>expr<span class=\"k\">[</span><span class=\"s\">\":\"</span><span class=\"k\">],</span><span class=\"k\">{</span>blank<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">!</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">+</span>a<span class=\"k\">.</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>filled<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">!!</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">+</span>a<span class=\"k\">.</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>unchecked<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">!</span>a<span class=\"k\">.</span>checked<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>validator<span class=\"k\">=</span><span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span>form<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">=</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"k\">{}</span><span class=\"k\">,</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>defaults<span class=\"k\">,</span>options<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">=</span>form<span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>init<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">;</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">=</span><span class=\"k\">function</span><span class=\"k\">(</span>source<span class=\"k\">,</span>params<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>arguments<span class=\"k\">.</span>length<span class=\"k\">==</span><span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">var</span> args<span class=\"k\">=</span>$<span class=\"k\">.</span>makeArray<span class=\"k\">(</span>arguments<span class=\"k\">);</span>args<span class=\"k\">.</span>unshift<span class=\"k\">(</span>source<span class=\"k\">);</span><span class=\"k\">return</span> $<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>args<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span>arguments<span class=\"k\">.</span>length<span class=\"k\">&gt;</span><span class=\"s\">2</span><span class=\"k\">&amp;&amp;</span>params<span class=\"k\">.</span>constructor<span class=\"k\">!=</span>Array<span class=\"k\">)</span><span class=\"k\">{</span>params<span class=\"k\">=</span>$<span class=\"k\">.</span>makeArray<span class=\"k\">(</span>arguments<span class=\"k\">).</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span>params<span class=\"k\">.</span>constructor<span class=\"k\">!=</span>Array<span class=\"k\">)</span><span class=\"k\">{</span>params<span class=\"k\">=[</span>params<span class=\"k\">];</span><span class=\"k\">}</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>params<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span>n<span class=\"k\">)</span><span class=\"k\">{</span>source<span class=\"k\">=</span>source<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">{\"</span><span class=\"k\">+</span>i<span class=\"k\">+</span><span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">}\"</span><span class=\"k\">,</span><span class=\"s\">\"g\"</span><span class=\"k\">),</span>n<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">return</span> source<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">;</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>$<span class=\"k\">.</span>validator<span class=\"k\">,</span><span class=\"k\">{</span>defaults<span class=\"k\">:</span><span class=\"k\">{</span>messages<span class=\"k\">:</span><span class=\"k\">{}</span><span class=\"k\">,</span>groups<span class=\"k\">:</span><span class=\"k\">{}</span><span class=\"k\">,</span>rules<span class=\"k\">:</span><span class=\"k\">{}</span><span class=\"k\">,</span>errorClass<span class=\"k\">:</span><span class=\"s\">\"error\"</span><span class=\"k\">,</span>validClass<span class=\"k\">:</span><span class=\"s\">\"valid\"</span><span class=\"k\">,</span>errorElement<span class=\"k\">:</span><span class=\"s\">\"label\"</span><span class=\"k\">,</span>focusInvalid<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">,</span>errorContainer<span class=\"k\">:</span>$<span class=\"k\">([]),</span>errorLabelContainer<span class=\"k\">:</span>$<span class=\"k\">([]),</span>onsubmit<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">,</span>ignore<span class=\"k\">:[],</span>ignoreTitle<span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">,</span>onfocusin<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>lastActive<span class=\"k\">=</span>element<span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>focusCleanup<span class=\"k\">&amp;&amp;!</span><span class=\"k\">this</span><span class=\"k\">.</span>blockFocusCleanup<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>unhighlight<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>unhighlight<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>element<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>validClass<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>errorsFor<span class=\"k\">(</span>element<span class=\"k\">).</span>hide<span class=\"k\">();</span><span class=\"k\">}}</span><span class=\"k\">,</span>onfocusout<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>checkable<span class=\"k\">(</span>element<span class=\"k\">)&amp;&amp;(</span>element<span class=\"k\">.</span>name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">||!</span><span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)))</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>element<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">,</span>onkeyup<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>element<span class=\"k\">.</span>name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">||</span>element<span class=\"k\">==</span><span class=\"k\">this</span><span class=\"k\">.</span>lastElement<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>element<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">,</span>onclick<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>element<span class=\"k\">.</span>name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">)</span><span class=\"k\">this</span><span class=\"k\">.</span>element<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>element<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">)</span><span class=\"k\">this</span><span class=\"k\">.</span>element<span class=\"k\">(</span>element<span class=\"k\">.</span>parentNode<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>highlight<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>errorClass<span class=\"k\">,</span>validClass<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>addClass<span class=\"k\">(</span>errorClass<span class=\"k\">).</span>removeClass<span class=\"k\">(</span>validClass<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>unhighlight<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>errorClass<span class=\"k\">,</span>validClass<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>removeClass<span class=\"k\">(</span>errorClass<span class=\"k\">).</span>addClass<span class=\"k\">(</span>validClass<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">,</span>setDefaults<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>settings<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>defaults<span class=\"k\">,</span>settings<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>messages<span class=\"k\">:</span><span class=\"k\">{</span>required<span class=\"k\">:</span><span class=\"s\">\"This field is required.\"</span><span class=\"k\">,</span>remote<span class=\"k\">:</span><span class=\"s\">\"Please fix this field.\"</span><span class=\"k\">,</span>email<span class=\"k\">:</span><span class=\"s\">\"Please enter a valid email address.\"</span><span class=\"k\">,</span>url<span class=\"k\">:</span><span class=\"s\">\"Please enter a valid URL.\"</span><span class=\"k\">,</span>date<span class=\"k\">:</span><span class=\"s\">\"Please enter a valid date.\"</span><span class=\"k\">,</span>dateISO<span class=\"k\">:</span><span class=\"s\">\"Please enter a valid date (ISO).\"</span><span class=\"k\">,</span>number<span class=\"k\">:</span><span class=\"s\">\"Please enter a valid number.\"</span><span class=\"k\">,</span>digits<span class=\"k\">:</span><span class=\"s\">\"Please enter only digits.\"</span><span class=\"k\">,</span>creditcard<span class=\"k\">:</span><span class=\"s\">\"Please enter a valid credit card number.\"</span><span class=\"k\">,</span>equalTo<span class=\"k\">:</span><span class=\"s\">\"Please enter the same value again.\"</span><span class=\"k\">,</span>accept<span class=\"k\">:</span><span class=\"s\">\"Please enter a value with a valid extension.\"</span><span class=\"k\">,</span>maxlength<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">\"Please enter no more than {0} characters.\"</span><span class=\"k\">),</span>minlength<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">\"Please enter at least {0} characters.\"</span><span class=\"k\">),</span>rangelength<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">\"Please enter a value between {0} and {1} characters long.\"</span><span class=\"k\">),</span>range<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">\"Please enter a value between {0} and {1}.\"</span><span class=\"k\">),</span>max<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">\"Please enter a value less than or equal to {0}.\"</span><span class=\"k\">),</span>min<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">\"Please enter a value greater than or equal to {0}.\"</span><span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">,</span>autoCreateRanges<span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">,</span>prototype<span class=\"k\">:</span><span class=\"k\">{</span>init<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>labelContainer<span class=\"k\">=</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorLabelContainer<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>errorContext<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>labelContainer<span class=\"k\">.</span>length<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>labelContainer<span class=\"k\">||</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>containers<span class=\"k\">=</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorContainer<span class=\"k\">).</span>add<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorLabelContainer<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>valueCache<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>pending<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>invalid<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>reset<span class=\"k\">();</span><span class=\"k\">var</span> groups<span class=\"k\">=(</span><span class=\"k\">this</span><span class=\"k\">.</span>groups<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>groups<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span>value<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>value<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s/</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">,</span>name<span class=\"k\">)</span><span class=\"k\">{</span>groups<span class=\"k\">[</span>name<span class=\"k\">]=</span>key<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">var</span> rules<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>rules<span class=\"k\">;</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>rules<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span>value<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">[</span>key<span class=\"k\">]=</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>normalizeRule<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">function</span> delegate<span class=\"k\">(</span>event<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> validator<span class=\"k\">=</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>form<span class=\"k\">,</span><span class=\"s\">\"validator\"</span><span class=\"k\">),</span>eventType<span class=\"k\">=</span><span class=\"s\">\"on\"</span><span class=\"k\">+</span>event<span class=\"k\">.</span>type<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/^validate/</span><span class=\"k\">,</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>validator<span class=\"k\">.</span>settings<span class=\"k\">[</span>eventType<span class=\"k\">]&amp;&amp;</span>validator<span class=\"k\">.</span>settings<span class=\"k\">[</span>eventType<span class=\"k\">].</span>call<span class=\"k\">(</span>validator<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span><span class=\"k\">}</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">).</span>validateDelegate<span class=\"k\">(</span><span class=\"s\">\":text, :password, :file, select, textarea\"</span><span class=\"k\">,</span><span class=\"s\">\"focusin focusout keyup\"</span><span class=\"k\">,</span>delegate<span class=\"k\">).</span>validateDelegate<span class=\"k\">(</span><span class=\"s\">\":radio, :checkbox, select, option\"</span><span class=\"k\">,</span><span class=\"s\">\"click\"</span><span class=\"k\">,</span>delegate<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>invalidHandler<span class=\"k\">)</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">).</span>bind<span class=\"k\">(</span><span class=\"s\">\"invalid-form.validate\"</span><span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>invalidHandler<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>form<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>checkForm<span class=\"k\">();</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>errorMap<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>invalid<span class=\"k\">=</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>errorMap<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>valid<span class=\"k\">())</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">).</span>triggerHandler<span class=\"k\">(</span><span class=\"s\">\"invalid-form\"</span><span class=\"k\">,[</span><span class=\"k\">this</span><span class=\"k\">]);</span><span class=\"k\">this</span><span class=\"k\">.</span>showErrors<span class=\"k\">();</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>valid<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">,</span>checkForm<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>prepareForm<span class=\"k\">();</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>elements<span class=\"k\">=(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentElements<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">());</span>elements<span class=\"k\">[</span>i<span class=\"k\">];</span>i<span class=\"k\">++)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>check<span class=\"k\">(</span>elements<span class=\"k\">[</span>i<span class=\"k\">]);</span><span class=\"k\">}</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>valid<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">,</span>element<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span>element<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>clean<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>lastElement<span class=\"k\">=</span>element<span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>prepareElement<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>currentElements<span class=\"k\">=</span>$<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">var</span> result<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>check<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>result<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>invalid<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>invalid<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>numberOfInvalids<span class=\"k\">())</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>containers<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">this</span><span class=\"k\">.</span>showErrors<span class=\"k\">();</span><span class=\"k\">return</span> result<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>showErrors<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>errors<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>errors<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>errorMap<span class=\"k\">,</span>errors<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">=[];</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> errors<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>message<span class=\"k\">:</span>errors<span class=\"k\">[</span>name<span class=\"k\">],</span>element<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>findByName<span class=\"k\">(</span>name<span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">this</span><span class=\"k\">.</span>successList<span class=\"k\">=</span>$<span class=\"k\">.</span>grep<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>successList<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">!(</span>element<span class=\"k\">.</span>name <span class=\"k\">in</span> errors<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>showErrors<span class=\"k\">?</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>showErrors<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>errorMap<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">):</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultShowErrors<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">,</span>resetForm<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>$<span class=\"k\">.</span>fn<span class=\"k\">.</span>resetForm<span class=\"k\">)</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">).</span>resetForm<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>prepareForm<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>hideErrors<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>elements<span class=\"k\">().</span>removeClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>numberOfInvalids<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>objectLength<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>invalid<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>objectLength<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> count<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">in</span> obj<span class=\"k\">)</span>count<span class=\"k\">++;</span><span class=\"k\">return</span> count<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>hideErrors<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>addWrapper<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">).</span>hide<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">,</span>valid<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>size<span class=\"k\">()==</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>size<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">.</span>length<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>focusInvalid<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>focusInvalid<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">try</span><span class=\"k\">{</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>findLastActive<span class=\"k\">()||</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">.</span>length<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>element<span class=\"k\">||[]).</span>filter<span class=\"k\">(</span><span class=\"s\">\":visible\"</span><span class=\"k\">).</span>focus<span class=\"k\">().</span>trigger<span class=\"k\">(</span><span class=\"s\">\"focusin\"</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{}}}</span><span class=\"k\">,</span>findLastActive<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">var</span> lastActive<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>lastActive<span class=\"k\">;</span><span class=\"k\">return</span> lastActive<span class=\"k\">&amp;&amp;</span>$<span class=\"k\">.</span>grep<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>n<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> n<span class=\"k\">.</span>element<span class=\"k\">.</span>name<span class=\"k\">==</span>lastActive<span class=\"k\">.</span>name<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">).</span>length<span class=\"k\">==</span><span class=\"s\">1</span><span class=\"k\">&amp;&amp;</span>lastActive<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>elements<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">var</span> validator<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">,</span>rulesCache<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">return</span> $<span class=\"k\">([]).</span>add<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">.</span>elements<span class=\"k\">).</span>filter<span class=\"k\">(</span><span class=\"s\">\":input\"</span><span class=\"k\">).</span>not<span class=\"k\">(</span><span class=\"s\">\":submit, :reset, :image, [disabled]\"</span><span class=\"k\">).</span>not<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>ignore<span class=\"k\">).</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">&amp;&amp;</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>debug<span class=\"k\">&amp;&amp;</span>window<span class=\"k\">.</span>console<span class=\"k\">&amp;&amp;</span>console<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">\"%o has no name assigned\"</span><span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">in</span> rulesCache<span class=\"k\">||!</span>validator<span class=\"k\">.</span>objectLength<span class=\"k\">(</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">).</span>rules<span class=\"k\">()))</span><span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>rulesCache<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">]=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>clean<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>selector<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> $<span class=\"k\">(</span>selector<span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">,</span>errors<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> $<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorElement<span class=\"k\">+</span><span class=\"s\">\".\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>errorContext<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>reset<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>successList<span class=\"k\">=[];</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">=[];</span><span class=\"k\">this</span><span class=\"k\">.</span>errorMap<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">=</span>$<span class=\"k\">([]);</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">=</span>$<span class=\"k\">([]);</span><span class=\"k\">this</span><span class=\"k\">.</span>currentElements<span class=\"k\">=</span>$<span class=\"k\">([]);</span><span class=\"k\">}</span><span class=\"k\">,</span>prepareForm<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>reset<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>errors<span class=\"k\">().</span>add<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>containers<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>prepareElement<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>reset<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>errorsFor<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>check<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span>element<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>clean<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>checkable<span class=\"k\">(</span>element<span class=\"k\">))</span><span class=\"k\">{</span>element<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>findByName<span class=\"k\">(</span>element<span class=\"k\">.</span>name<span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">var</span> rules<span class=\"k\">=</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>rules<span class=\"k\">();</span><span class=\"k\">var</span> dependencyMismatch<span class=\"k\">=</span><span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">for</span><span class=\"k\">(</span>method <span class=\"k\">in</span> rules<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> rule<span class=\"k\">=</span><span class=\"k\">{</span>method<span class=\"k\">:</span>method<span class=\"k\">,</span>parameters<span class=\"k\">:</span>rules<span class=\"k\">[</span>method<span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">;</span><span class=\"k\">try</span><span class=\"k\">{</span><span class=\"k\">var</span> result<span class=\"k\">=</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>methods<span class=\"k\">[</span>method<span class=\"k\">].</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>element<span class=\"k\">.</span>value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\r/g</span><span class=\"k\">,</span><span class=\"s\">\"\"</span><span class=\"k\">),</span>element<span class=\"k\">,</span>rule<span class=\"k\">.</span>parameters<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>result<span class=\"k\">==</span><span class=\"s\">\"dependency-mismatch\"</span><span class=\"k\">)</span><span class=\"k\">{</span>dependencyMismatch<span class=\"k\">=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">continue</span><span class=\"k\">;</span><span class=\"k\">}</span>dependencyMismatch<span class=\"k\">=</span><span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span>result<span class=\"k\">==</span><span class=\"s\">\"pending\"</span><span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">.</span>not<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>errorsFor<span class=\"k\">(</span>element<span class=\"k\">));</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(!</span>result<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>formatAndAdd<span class=\"k\">(</span>element<span class=\"k\">,</span>rule<span class=\"k\">);</span><span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>debug<span class=\"k\">&amp;&amp;</span>window<span class=\"k\">.</span>console<span class=\"k\">&amp;&amp;</span>console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"exception occured when checking element \"</span><span class=\"k\">+</span>element<span class=\"k\">.</span>id","<span class=\"k\">+</span><span class=\"s\">\", check the '\"</span><span class=\"k\">+</span>rule<span class=\"k\">.</span>method<span class=\"k\">+</span><span class=\"s\">\"' method\"</span><span class=\"k\">,</span>e<span class=\"k\">);</span><span class=\"k\">throw</span> e<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">if</span><span class=\"k\">(</span>dependencyMismatch<span class=\"k\">)</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>objectLength<span class=\"k\">(</span>rules<span class=\"k\">))</span><span class=\"k\">this</span><span class=\"k\">.</span>successList<span class=\"k\">.</span>push<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>customMetaMessage<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>method<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span>$<span class=\"k\">.</span>metadata<span class=\"k\">)</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">var</span> meta<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>meta<span class=\"k\">?</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>metadata<span class=\"k\">()[</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>meta<span class=\"k\">]:</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>metadata<span class=\"k\">();</span><span class=\"k\">return</span> meta<span class=\"k\">&amp;&amp;</span>meta<span class=\"k\">.</span>messages<span class=\"k\">&amp;&amp;</span>meta<span class=\"k\">.</span>messages<span class=\"k\">[</span>method<span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">,</span>customMessage<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span>method<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> m<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>name<span class=\"k\">];</span><span class=\"k\">return</span> m<span class=\"k\">&amp;&amp;(</span>m<span class=\"k\">.</span>constructor<span class=\"k\">==</span>String<span class=\"k\">?</span>m<span class=\"k\">:</span>m<span class=\"k\">[</span>method<span class=\"k\">]);</span><span class=\"k\">}</span><span class=\"k\">,</span>findDefined<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span>i<span class=\"k\">&lt;</span>arguments<span class=\"k\">.</span>length<span class=\"k\">;</span>i<span class=\"k\">++)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">]!==</span>undefined<span class=\"k\">)</span><span class=\"k\">return</span> arguments<span class=\"k\">[</span>i<span class=\"k\">];</span><span class=\"k\">}</span><span class=\"k\">return</span> undefined<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>defaultMessage<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>method<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>findDefined<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>customMessage<span class=\"k\">(</span>element<span class=\"k\">.</span>name<span class=\"k\">,</span>method<span class=\"k\">),</span><span class=\"k\">this</span><span class=\"k\">.</span>customMetaMessage<span class=\"k\">(</span>element<span class=\"k\">,</span>method<span class=\"k\">),!</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>ignoreTitle<span class=\"k\">&amp;&amp;</span>element<span class=\"k\">.</span>title<span class=\"k\">||</span>undefined<span class=\"k\">,</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>messages<span class=\"k\">[</span>method<span class=\"k\">],</span><span class=\"s\">\"&lt;strong&gt;Warning: No message defined for \"</span><span class=\"k\">+</span>element<span class=\"k\">.</span>name<span class=\"k\">+</span><span class=\"s\">\"&lt;/strong&gt;\"</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>formatAndAdd<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>rule<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> message<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultMessage<span class=\"k\">(</span>element<span class=\"k\">,</span>rule<span class=\"k\">.</span>method<span class=\"k\">),</span>theregex<span class=\"k\">=</span><span class=\"s\">/\\$?\\{(\\d+)\\}/g</span><span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> message<span class=\"k\">==</span><span class=\"s\">\"function\"</span><span class=\"k\">)</span><span class=\"k\">{</span>message<span class=\"k\">=</span>message<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>rule<span class=\"k\">.</span>parameters<span class=\"k\">,</span>element<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>theregex<span class=\"k\">.</span>test<span class=\"k\">(</span>message<span class=\"k\">))</span><span class=\"k\">{</span>message<span class=\"k\">=</span>jQuery<span class=\"k\">.</span>format<span class=\"k\">(</span>message<span class=\"k\">.</span>replace<span class=\"k\">(</span>theregex<span class=\"k\">,</span><span class=\"s\">'{$1}'</span><span class=\"k\">),</span>rule<span class=\"k\">.</span>parameters<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>message<span class=\"k\">:</span>message<span class=\"k\">,</span>element<span class=\"k\">:</span>element<span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>errorMap<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span>message<span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>submitted<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span>message<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>addWrapper<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>toToggle<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>wrapper<span class=\"k\">)</span>toToggle<span class=\"k\">=</span>toToggle<span class=\"k\">.</span>add<span class=\"k\">(</span>toToggle<span class=\"k\">.</span>parent<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>wrapper<span class=\"k\">));</span><span class=\"k\">return</span> toToggle<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>defaultShowErrors<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">[</span>i<span class=\"k\">];</span>i<span class=\"k\">++)</span><span class=\"k\">{</span><span class=\"k\">var</span> error<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">[</span>i<span class=\"k\">];</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>highlight<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>highlight<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>error<span class=\"k\">.</span>element<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>validClass<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>showLabel<span class=\"k\">(</span>error<span class=\"k\">.</span>element<span class=\"k\">,</span>error<span class=\"k\">.</span>message<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>containers<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>success<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>successList<span class=\"k\">[</span>i<span class=\"k\">];</span>i<span class=\"k\">++)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>showLabel<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>successList<span class=\"k\">[</span>i<span class=\"k\">]);</span><span class=\"k\">}}</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>unhighlight<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>elements<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>validElements<span class=\"k\">();</span>elements<span class=\"k\">[</span>i<span class=\"k\">];</span>i<span class=\"k\">++)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>unhighlight<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>elements<span class=\"k\">[</span>i<span class=\"k\">],</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">,</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>validClass<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>toHide<span class=\"k\">.</span>not<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">);</span><span class=\"k\">this</span><span class=\"k\">.</span>hideErrors<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>addWrapper<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">).</span>show<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">,</span>validElements<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>currentElements<span class=\"k\">.</span>not<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>invalidElements<span class=\"k\">());</span><span class=\"k\">}</span><span class=\"k\">,</span>invalidElements<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> $<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>errorList<span class=\"k\">).</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>element<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>showLabel<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>message<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> label<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>errorsFor<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>label<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>label<span class=\"k\">.</span>removeClass<span class=\"k\">().</span>addClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">);</span>label<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">\"generated\"</span><span class=\"k\">)&amp;&amp;</span>label<span class=\"k\">.</span>html<span class=\"k\">(</span>message<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span>label<span class=\"k\">=</span>$<span class=\"k\">(</span><span class=\"s\">\"&lt;\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorElement<span class=\"k\">+</span><span class=\"s\">\"/&gt;\"</span><span class=\"k\">).</span>attr<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"for\"</span><span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>idOrName<span class=\"k\">(</span>element<span class=\"k\">),</span>generated<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">).</span>addClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorClass<span class=\"k\">).</span>html<span class=\"k\">(</span>message<span class=\"k\">||</span><span class=\"s\">\"\"</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>wrapper<span class=\"k\">)</span><span class=\"k\">{</span>label<span class=\"k\">=</span>label<span class=\"k\">.</span>hide<span class=\"k\">().</span>show<span class=\"k\">().</span>wrap<span class=\"k\">(</span><span class=\"s\">\"&lt;\"</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>wrapper<span class=\"k\">+</span><span class=\"s\">\"/&gt;\"</span><span class=\"k\">).</span>parent<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>labelContainer<span class=\"k\">.</span>append<span class=\"k\">(</span>label<span class=\"k\">).</span>length<span class=\"k\">)</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorPlacement<span class=\"k\">?</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>errorPlacement<span class=\"k\">(</span>label<span class=\"k\">,</span>$<span class=\"k\">(</span>element<span class=\"k\">)):</span>label<span class=\"k\">.</span>insertAfter<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(!</span>message<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>success<span class=\"k\">)</span><span class=\"k\">{</span>label<span class=\"k\">.</span>text<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span><span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>success<span class=\"k\">==</span><span class=\"s\">\"string\"</span><span class=\"k\">?</span>label<span class=\"k\">.</span>addClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>success<span class=\"k\">):</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>success<span class=\"k\">(</span>label<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>toShow<span class=\"k\">.</span>add<span class=\"k\">(</span>label<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>errorsFor<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> name<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>idOrName<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>errors<span class=\"k\">().</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">return</span> $<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">).</span>attr<span class=\"k\">(</span><span class=\"s\">'for'</span><span class=\"k\">)==</span>name<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>idOrName<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>groups<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]||(</span><span class=\"k\">this</span><span class=\"k\">.</span>checkable<span class=\"k\">(</span>element<span class=\"k\">)?</span>element<span class=\"k\">.</span>name<span class=\"k\">:</span>element<span class=\"k\">.</span>id<span class=\"k\">||</span>element<span class=\"k\">.</span>name<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>checkable<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"s\">/radio|checkbox/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>element<span class=\"k\">.</span>type<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>findByName<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> form<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">;</span><span class=\"k\">return</span> $<span class=\"k\">(</span>document<span class=\"k\">.</span>getElementsByName<span class=\"k\">(</span>name<span class=\"k\">)).</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>index<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> element<span class=\"k\">.</span>form<span class=\"k\">==</span>form<span class=\"k\">&amp;&amp;</span>element<span class=\"k\">.</span>name<span class=\"k\">==</span>name<span class=\"k\">&amp;&amp;</span>element<span class=\"k\">||</span><span class=\"k\">null</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>getLength<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">switch</span><span class=\"k\">(</span>element<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span><span class=\"k\">{</span><span class=\"k\">case</span><span class=\"s\">'select'</span><span class=\"k\">:</span><span class=\"k\">return</span> $<span class=\"k\">(</span><span class=\"s\">\"option:selected\"</span><span class=\"k\">,</span>element<span class=\"k\">).</span>length<span class=\"k\">;</span><span class=\"k\">case</span><span class=\"s\">'input'</span><span class=\"k\">:</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>checkable<span class=\"k\">(</span>element<span class=\"k\">))</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>findByName<span class=\"k\">(</span>element<span class=\"k\">.</span>name<span class=\"k\">).</span>filter<span class=\"k\">(</span><span class=\"s\">':checked'</span><span class=\"k\">).</span>length<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> value<span class=\"k\">.</span>length<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>depend<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dependTypes<span class=\"k\">[</span><span class=\"k\">typeof</span> param<span class=\"k\">]?</span><span class=\"k\">this</span><span class=\"k\">.</span>dependTypes<span class=\"k\">[</span><span class=\"k\">typeof</span> param<span class=\"k\">](</span>param<span class=\"k\">,</span>element<span class=\"k\">):</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>dependTypes<span class=\"k\">:</span><span class=\"k\">{</span><span class=\"s\">\"boolean\"</span><span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> param<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">\"string\"</span><span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">!!</span>$<span class=\"k\">(</span>param<span class=\"k\">,</span>element<span class=\"k\">.</span>form<span class=\"k\">).</span>length<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">\"function\"</span><span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> param<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">,</span>optional<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">!</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>methods<span class=\"k\">.</span>required<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span>element<span class=\"k\">.</span>value<span class=\"k\">),</span>element<span class=\"k\">)&amp;&amp;</span><span class=\"s\">\"dependency-mismatch\"</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>startRequest<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>pending<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">])</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">++;</span><span class=\"k\">this</span><span class=\"k\">.</span>pending<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">,</span>stopRequest<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">,</span>valid<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">--;</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">&lt;</span><span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>pending<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">];</span><span class=\"k\">if</span><span class=\"k\">(</span>valid<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">==</span><span class=\"s\">0</span><span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>formSubmitted<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>form<span class=\"k\">())</span><span class=\"k\">{</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">).</span>submit<span class=\"k\">();</span><span class=\"k\">this</span><span class=\"k\">.</span>formSubmitted<span class=\"k\">=</span><span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(!</span>valid<span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>pendingRequest<span class=\"k\">==</span><span class=\"s\">0</span><span class=\"k\">&amp;&amp;</span><span class=\"k\">this</span><span class=\"k\">.</span>formSubmitted<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>currentForm<span class=\"k\">).</span>triggerHandler<span class=\"k\">(</span><span class=\"s\">\"invalid-form\"</span><span class=\"k\">,[</span><span class=\"k\">this</span><span class=\"k\">]);</span><span class=\"k\">this</span><span class=\"k\">.</span>formSubmitted<span class=\"k\">=</span><span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">,</span>previousValue<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> $<span class=\"k\">.</span>data<span class=\"k\">(</span>element<span class=\"k\">,</span><span class=\"s\">\"previousValue\"</span><span class=\"k\">)||</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span>element<span class=\"k\">,</span><span class=\"s\">\"previousValue\"</span><span class=\"k\">,</span><span class=\"k\">{</span>old<span class=\"k\">:</span><span class=\"k\">null</span><span class=\"k\">,</span>valid<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">,</span>message<span class=\"k\">:</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultMessage<span class=\"k\">(</span>element<span class=\"k\">,</span><span class=\"s\">\"remote\"</span><span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">,</span>classRuleSettings<span class=\"k\">:</span><span class=\"k\">{</span>required<span class=\"k\">:</span><span class=\"k\">{</span>required<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>email<span class=\"k\">:</span><span class=\"k\">{</span>email<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>url<span class=\"k\">:</span><span class=\"k\">{</span>url<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>date<span class=\"k\">:</span><span class=\"k\">{</span>date<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>dateISO<span class=\"k\">:</span><span class=\"k\">{</span>dateISO<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>dateDE<span class=\"k\">:</span><span class=\"k\">{</span>dateDE<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>number<span class=\"k\">:</span><span class=\"k\">{</span>number<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>numberDE<span class=\"k\">:</span><span class=\"k\">{</span>numberDE<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>digits<span class=\"k\">:</span><span class=\"k\">{</span>digits<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>creditcard<span class=\"k\">:</span><span class=\"k\">{</span>creditcard<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}}</span><span class=\"k\">,</span>addClassRules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>className<span class=\"k\">,</span>rules<span class=\"k\">)</span><span class=\"k\">{</span>className<span class=\"k\">.</span>constructor<span class=\"k\">==</span>String<span class=\"k\">?</span><span class=\"k\">this</span><span class=\"k\">.</span>classRuleSettings<span class=\"k\">[</span>className<span class=\"k\">]=</span>rules<span class=\"k\">:</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>classRuleSettings<span class=\"k\">,</span>className<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>classRules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> rules<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">var</span> classes<span class=\"k\">=</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>attr<span class=\"k\">(</span><span class=\"s\">'class'</span><span class=\"k\">);</span>classes<span class=\"k\">&amp;&amp;</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>classes<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">' '</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">in</span> $<span class=\"k\">.</span>validator<span class=\"k\">.</span>classRuleSettings<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>rules<span class=\"k\">,</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>classRuleSettings<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]);</span><span class=\"k\">}}</span><span class=\"k\">);</span><span class=\"k\">return</span> rules<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>attributeRules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> rules<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">var</span> $element<span class=\"k\">=</span>$<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">for</span><span class=\"k\">(</span>method <span class=\"k\">in</span> $<span class=\"k\">.</span>validator<span class=\"k\">.</span>methods<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> value<span class=\"k\">=</span>$element<span class=\"k\">.</span>attr<span class=\"k\">(</span>method<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">[</span>method<span class=\"k\">]=</span>value<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">if</span><span class=\"k\">(</span>rules<span class=\"k\">.</span>maxlength<span class=\"k\">&amp;&amp;</span><span class=\"s\">/-1|2147483647|524288/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>rules<span class=\"k\">.</span>maxlength<span class=\"k\">))</span><span class=\"k\">{</span><span class=\"k\">delete</span> rules<span class=\"k\">.</span>maxlength<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> rules<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>metadataRules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span>$<span class=\"k\">.</span>metadata<span class=\"k\">)</span><span class=\"k\">return</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">var</span> meta<span class=\"k\">=</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span>element<span class=\"k\">.</span>form<span class=\"k\">,</span><span class=\"s\">'validator'</span><span class=\"k\">).</span>settings<span class=\"k\">.</span>meta<span class=\"k\">;</span><span class=\"k\">return</span> meta<span class=\"k\">?</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>metadata<span class=\"k\">()[</span>meta<span class=\"k\">]:</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>metadata<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">,</span>staticRules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> rules<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">var</span> validator<span class=\"k\">=</span>$<span class=\"k\">.</span>data<span class=\"k\">(</span>element<span class=\"k\">.</span>form<span class=\"k\">,</span><span class=\"s\">'validator'</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>rules<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">=</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>normalizeRule<span class=\"k\">(</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>rules<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">])||</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> rules<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>normalizeRules<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>rules<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>rules<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>prop<span class=\"k\">,</span>val<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>val<span class=\"k\">===</span><span class=\"k\">false</span><span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">delete</span> rules<span class=\"k\">[</span>prop<span class=\"k\">];</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span>val<span class=\"k\">.</span>param<span class=\"k\">||</span>val<span class=\"k\">.</span>depends<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> keepRule<span class=\"k\">=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">switch</span><span class=\"k\">(</span><span class=\"k\">typeof</span> val<span class=\"k\">.</span>depends<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">case</span><span class=\"s\">\"string\"</span><span class=\"k\">:</span>keepRule<span class=\"k\">=!!</span>$<span class=\"k\">(</span>val<span class=\"k\">.</span>depends<span class=\"k\">,</span>element<span class=\"k\">.</span>form<span class=\"k\">).</span>length<span class=\"k\">;</span><span class=\"k\">break</span><span class=\"k\">;</span><span class=\"k\">case</span><span class=\"s\">\"function\"</span><span class=\"k\">:</span>keepRule<span class=\"k\">=</span>val<span class=\"k\">.</span>depends<span class=\"k\">.</span>call<span class=\"k\">(</span>element<span class=\"k\">,</span>element<span class=\"k\">);</span><span class=\"k\">break</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span>keepRule<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">[</span>prop<span class=\"k\">]=</span>val<span class=\"k\">.</span>param<span class=\"k\">!==</span>undefined<span class=\"k\">?</span>val<span class=\"k\">.</span>param<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span><span class=\"k\">delete</span> rules<span class=\"k\">[</span>prop<span class=\"k\">];</span><span class=\"k\">}}}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>rules<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>rule<span class=\"k\">,</span>parameter<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">[</span>rule<span class=\"k\">]=</span>$<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>parameter<span class=\"k\">)?</span>parameter<span class=\"k\">(</span>element<span class=\"k\">):</span>parameter<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>each<span class=\"k\">([</span><span class=\"s\">'minlength'</span><span class=\"k\">,</span><span class=\"s\">'maxlength'</span><span class=\"k\">,</span><span class=\"s\">'min'</span><span class=\"k\">,</span><span class=\"s\">'max'</span><span class=\"k\">],</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">])</span><span class=\"k\">{</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]=</span>Number<span class=\"k\">(</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]);</span><span class=\"k\">}}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>each<span class=\"k\">([</span><span class=\"s\">'rangelength'</span><span class=\"k\">,</span><span class=\"s\">'range'</span><span class=\"k\">],</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">])</span><span class=\"k\">{</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]=[</span>Number<span class=\"k\">(</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]),</span>Number<span class=\"k\">(</span>rules<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">])];</span><span class=\"k\">}}</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>autoCreateRanges<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>rules<span class=\"k\">.</span>min<span class=\"k\">&amp;&amp;</span>rules<span class=\"k\">.</span>max<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">.</span>range<span class=\"k\">=[</span>rules<span class=\"k\">.</span>min<span class=\"k\">,</span>rules<span class=\"k\">.</span>max<span class=\"k\">];</span><span class=\"k\">delete</span> rules<span class=\"k\">.</span>min<span class=\"k\">;</span><span class=\"k\">delete</span> rules<span class=\"k\">.</span>max<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">if</span><span class=\"k\">(</span>rules<span class=\"k\">.</span>minlength<span class=\"k\">&amp;&amp;</span>rules<span class=\"k\">.</span>maxlength<span class=\"k\">)</span><span class=\"k\">{</span>rules<span class=\"k\">.</span>rangelength<span class=\"k\">=[</span>rules<span class=\"k\">.</span>minlength<span class=\"k\">,</span>rules<span class=\"k\">.</span>maxlength<span class=\"k\">];</span><span class=\"k\">delete</span> rules<span class=\"k\">.</span>minlength<span class=\"k\">;</span><span class=\"k\">delete</span> rules<span class=\"k\">.</span>maxlength<span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">if</span><span class=\"k\">(</span>rules<span class=\"k\">.</span>messages<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">delete</span> rules<span class=\"k\">.</span>messages<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> rules<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>normalizeRule<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> data<span class=\"k\">==</span><span class=\"s\">\"string\"</span><span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> transformed<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span>data<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s/</span><span class=\"k\">),</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>transformed<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]=</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">);</span>data<span class=\"k\">=</span>transformed<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> data<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>addMethod<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span>method<span class=\"k\">,</span>message<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>methods<span class=\"k\">[</span>name<span class=\"k\">]=</span>method<span class=\"k\">;</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>messages<span class=\"k\">[</span>name<span class=\"k\">]=</span>message<span class=\"k\">!=</span>undefined<span class=\"k\">?</span>message<span class=\"k\">:</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>messages<span class=\"k\">[</span>name<span class=\"k\">];</span><span class=\"k\">if</span><span class=\"k\">(</span>method<span class=\"k\">.</span>length<span class=\"k\">&lt;</span><span class=\"s\">3</span><span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>addClassRules<span class=\"k\">(</span>name<span class=\"k\">,</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>normalizeRule<span class=\"k\">(</span>name<span class=\"k\">));</span><span class=\"k\">}}</span><span class=\"k\">,</span>methods<span class=\"k\">:</span><span class=\"k\">{</span>required<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>depend<span class=\"k\">(</span>param<span class=\"k\">,</span>element<span class=\"k\">))</span><span class=\"k\">return</span><span class=\"s\">\"dependency-mismatch\"</span><span class=\"k\">;</span><span class=\"k\">switch</span><span class=\"k\">(</span>element<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span><span class=\"k\">{</span><span class=\"k\">case</span><span class=\"s\">'select'</span><span class=\"k\">:</span><span class=\"k\">var</span> val<span class=\"k\">=</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>val<span class=\"k\">();</span><span class=\"k\">return</span> val<span class=\"k\">&amp;&amp;</span>val<span class=\"k\">.</span>length<span class=\"k\">&gt;</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">case</span><span class=\"s\">'input'</span><span class=\"k\">:</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>checkable<span class=\"k\">(</span>element<span class=\"k\">))</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getLength<span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)&gt;</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">default</span><span class=\"k\">:</span><span class=\"k\">return</span> $<span class=\"k\">.</span>trim<span class=\"k\">(</span>value<span class=\"k\">).</span>length<span class=\"k\">&gt;</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">}}</span><span class=\"k\">,</span>remote<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">))</span><span class=\"k\">return</span><span class=\"s\">\"dependency-mismatch\"</span><span class=\"k\">;</span><span class=\"k\">var</span> previous<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>previousValue<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">])</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span><span class=\"k\">{}</span><span class=\"k\">;</span>previous<span class=\"k\">.</span>originalMessage<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">].</span>remote<span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">].</span>remote<span class=\"k\">=</span>previous<span class=\"k\">.</span>message<span class=\"k\">;</span>param<span class=\"k\">=</span><span class=\"k\">typeof</span> param<span class=\"k\">==</span><span class=\"s\">\"string\"</span><span class=\"k\">&amp;&amp;</span><span class=\"k\">{</span>url<span class=\"k\">:</span>param<span class=\"k\">}</span><span class=\"k\">||</span>param<span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span>previous<span class=\"k\">.</span>old<span class=\"k\">!==</span>value<span class=\"k\">)</span><span class=\"k\">{</span>previous<span class=\"k\">.</span>old<span class=\"k\">=</span>value<span class=\"k\">;</span><span class=\"k\">var</span> validator<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">;</span><span class=\"k\">this</span><span class=\"k\">.</span>startRequest<span class=\"k\">(</span>element<span class=\"k\">);</span><span class=\"k\">var</span> data<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span>data<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span>value<span class=\"k\">;</span>$<span class=\"k\">.</span>ajax<span class=\"k\">(</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"k\">{</span>url<span class=\"k\">:</span>param<span class=\"k\">,</span>mode<span class=\"k\">:</span><span class=\"s\">\"abort\"</span><span class=\"k\">,</span>port<span class=\"k\">:</span><span class=\"s\">\"validate\"</span><span class=\"k\">+</span>element<span class=\"k\">.</span>name<span class=\"k\">,</span>dataType<span class=\"k\">:</span><span class=\"s\">\"json\"</span><span class=\"k\">,</span>data<span class=\"k\">:</span>data<span class=\"k\">,</span>success<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>response<span class=\"k\">)</span><span class=\"k\">{</span>validator<span class=\"k\">.</span>settings<span class=\"k\">.</span>messages<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">].</span>remote<span class=\"k\">=</span>previous<span class=\"k\">.</span>originalMessage<span class=\"k\">;</span><span class=\"k\">var</span> valid<span class=\"k\">=</span>response<span class=\"k\">===</span><span class=\"k\">true</span><span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span>valid<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> submitted<span class=\"k\">=</span>validator<span class=\"k\">.</span>formSubmitted<span class=\"k\">;</span>validator<span class=\"k\">.</span>prepareElement<span class=\"k\">(</span>element<span class=\"k\">);</span>validator<span class=\"k\">.</span>formSubmitted<span class=\"k\">=</span>submitted<span class=\"k\">;</span>validator<span class=\"k\">.</span>successList<span class=\"k\">.</span>push<span class=\"k\">(</span>element<span class=\"k\">);</span>validator<span class=\"k\">.</span>showErrors<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">else</span><span class=\"k\">{</span><span class=\"k\">var</span> errors<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span><span class=\"k\">var</span> message<span class=\"k\">=(</span>previous<span class=\"k\">.</span>message<span class=\"k\">=</span>response<span class=\"k\">||</span>validator<span class=\"k\">.</span>defaultMessage<span class=\"k\">(</span>element<span class=\"k\">,</span><span class=\"s\">\"remote\"</span><span class=\"k\">));</span>errors<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">]=</span>$<span class=\"k\">.</span>isFunction<span class=\"k\">(</span>message<span class=\"k\">)?</span>message<span class=\"k\">(</span>value<span class=\"k\">):</span>message<span class=\"k\">;</span>validator<span class=\"k\">.</span>showErrors<span class=\"k\">(</span>errors<span class=\"k\">);</span><span class=\"k\">}</span>previous<span class=\"k\">.</span>valid<span class=\"k\">=</span>valid<span class=\"k\">;</span>validator<span class=\"k\">.</span>stopRequest<span class=\"k\">(</span>element<span class=\"k\">,</span>valid<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">,</span>param<span class=\"k\">));</span><span class=\"k\">return</span><span class=\"s\">\"pending\"</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>pending<span class=\"k\">[</span>element<span class=\"k\">.</span>name<span class=\"k\">])</span><span class=\"k\">{</span><span class=\"k\">return</span><span class=\"s\">\"pending\"</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span> previous<span class=\"k\">.</span>valid<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>minlength<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"k\">this</span><span class=\"k\">.</span>getLength<span class=\"k\">(</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span>value<span class=\"k\">),</span>element<span class=\"k\">)&gt;=</span>param<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>maxlength<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"k\">this</span><span class=\"k\">.</span>getLength<span class=\"k\">(</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span>value<span class=\"k\">),</span>element<span class=\"k\">)&lt;=</span>param<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>rangelength<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> length<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>getLength<span class=\"k\">(</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span>value<span class=\"k\">),</span>element<span class=\"k\">);</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||(</span>length<span class=\"k\">&gt;=</span>param<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]&amp;&amp;</span>length<span class=\"k\">&lt;=</span>param<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span><span class=\"k\">}</span><span class=\"k\">,</span>min<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span>value<span class=\"k\">&gt;=</span>param<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>max<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span>value<span class=\"k\">&lt;=</span>param<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>range<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||(</span>value<span class=\"k\">&gt;=</span>param<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]&amp;&amp;</span>value<span class=\"k\">&lt;=</span>param<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span><span class=\"k\">}</span><span class=\"k\">,</span>email<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"s\">/^((([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>url<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"s\">/^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>date<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||!</span><span class=\"s\">/Invalid|NaN/</span><span class=\"k\">.</span>test<span class=\"k\">(</span><span class=\"k\">new</span> Date<span class=\"k\">(</span>value<span class=\"k\">));</span><span class=\"k\">}</span><span class=\"k\">,</span>dateISO<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"s\">/^\\d{4}[\\/-]\\d{1,2}[\\/-]\\d{1,2}$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>number<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"s\">/^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>digits<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span><span class=\"s\">/^\\d+$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>creditcard<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">))</span><span class=\"k\">return</span><span class=\"s\">\"dependency-mismatch\"</span><span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/[^0-9-]+/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>value<span class=\"k\">))</span><span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span><span class=\"k\">var</span> nCheck<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>nDigit<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>bEven<span class=\"k\">=</span><span class=\"k\">false</span><span class=\"k\">;</span>value<span class=\"k\">=</span>value<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\D/g</span><span class=\"k\">,</span><span class=\"s\">\"\"</span><span class=\"k\">);</span><span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> n<span class=\"k\">=</span>value<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>n<span class=\"k\">&gt;=</span><span class=\"s\">0</span><span class=\"k\">;</span>n<span class=\"k\">--)</span><span class=\"k\">{</span><span class=\"k\">var</span> cDigit<span class=\"k\">=</span>value<span class=\"k\">.</span>charAt<span class=\"k\">(</span>n<span class=\"k\">);</span><span class=\"k\">var</span> nDigit<span class=\"k\">=</span>parseInt<span class=\"k\">(</span>cDigit<span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>bEven<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">((</span>nDigit<span class=\"k\">*=</span><span class=\"s\">2</span><span class=\"k\">)&gt;</span><span class=\"s\">9</span><span class=\"k\">)</span>nDigit<span class=\"k\">-=</span><span class=\"s\">9</span><span class=\"k\">;</span><span class=\"k\">}</span>nCheck<span class=\"k\">+=</span>nDigit<span class=\"k\">;</span>bEven<span class=\"k\">=!</span>bEven<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">return</span><span class=\"k\">(</span>nCheck<span class=\"k\">%</span><span class=\"s\">10</span><span class=\"k\">)==</span><span class=\"s\">0</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">,</span>accept<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span>param<span class=\"k\">=</span><span class=\"k\">typeof</span> param<span class=\"k\">==</span><span class=\"s\">\"string\"</span><span class=\"k\">?</span>param<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/,/g</span><span class=\"k\">,</span><span class=\"s\">'|'</span><span class=\"k\">):</span><span class=\"s\">\"png|jpe?g|gif\"</span><span class=\"k\">;</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>optional<span class=\"k\">(</span>element<span class=\"k\">)||</span>value<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">\".(\"</span><span class=\"k\">+</span>param<span class=\"k\">+</span><span class=\"s\">\")$\"</span><span class=\"k\">,</span><span class=\"s\">\"i\"</span><span class=\"k\">));</span><span class=\"k\">}</span><span class=\"k\">,</span>equalTo<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span>element<span class=\"k\">,</span>param<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> target<span class=\"k\">=</span>$<span class=\"k\">(</span>param<span class=\"k\">).</span>unbind<span class=\"k\">(</span><span class=\"s\">\".validate-equalTo\"</span><span class=\"k\">).</span>bind<span class=\"k\">(</span><span class=\"s\">\"blur.validate-equalTo\"</span><span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>$<span class=\"k\">(</span>element<span class=\"k\">).</span>valid<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">);</span><span class=\"k\">return</span> value<span class=\"k\">==</span>target<span class=\"k\">.</span>val<span class=\"k\">();</span><span class=\"k\">}}}</span><span class=\"k\">);</span>$<span class=\"k\">.</span>format<span class=\"k\">=</span>$<span class=\"k\">.</span>validator<span class=\"k\">.</span>format<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">)(</span>jQuery<span class=\"k\">);;(</span><span class=\"k\">function</span><span class=\"k\">(</span>$<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> ajax<span class=\"k\">=</span>$<span class=\"k\">.</span>ajax<span class=\"k\">;</span><span class=\"k\">var</span> pendingRequests<span class=\"k\">=</span><span class=\"k\">{}</span><span class=\"k\">;</span>$<span class=\"k\">.</span>ajax<span class=\"k\">=</span><span class=\"k\">function</span><span class=\"k\">(</span>settings<span class=\"k\">)</span><span class=\"k\">{</span>settings<span class=\"k\">=</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>settings<span class=\"k\">,</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span>$<span class=\"k\">.</span>ajaxSettings<span class=\"k\">,</span>settings<span class=\"k\">));</span><span class=\"k\">var</span> port<span class=\"k\">=</span>settings<span class=\"k\">.</span>port<span class=\"k\">;</span><span class=\"k\">if</span><span class=\"k\">(</span>settings<span class=\"k\">.</span>mode<span class=\"k\">==</span><span class=\"s\">\"abort\"</span><span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(</span>pendingRequests<span class=\"k\">[</span>port<span class=\"k\">])</span><span class=\"k\">{</span>pendingRequests<span class=\"k\">[</span>port<span class=\"k\">].</span>abort<span class=\"k\">();</span><span class=\"k\">}</span><span class=\"k\">return</span><span class=\"k\">(</span>pendingRequests<span class=\"k\">[</span>port<span class=\"k\">]=</span>ajax<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>arguments<span class=\"k\">));</span><span class=\"k\">}</span><span class=\"k\">return</span> ajax<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>arguments<span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">)(</span>jQuery<span class=\"k\">);;(</span><span class=\"k\">function</span><span class=\"k\">(</span>$<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">if</span><span class=\"k\">(!</span>jQuery<span class=\"k\">.</span>event<span class=\"k\">.</span>special<span class=\"k\">.</span>focusin<span class=\"k\">&amp;&amp;!</span>jQuery<span class=\"k\">.</span>event<span class=\"k\">.</span>special<span class=\"k\">.</span>focusout<span class=\"k\">&amp;&amp;</span>document<span class=\"k\">.</span>addEventListener<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">{</span>focus<span class=\"k\">:</span><span class=\"s\">'focusin'</span><span class=\"k\">,</span>blur<span class=\"k\">:</span><span class=\"s\">'focusout'</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>original<span class=\"k\">,</span>fix<span class=\"k\">)</span><span class=\"k\">{</span>$<span class=\"k\">.</span>event<span class=\"k\">.</span>special<span class=\"k\">[</span>fix<span class=\"k\">]=</span><span class=\"k\">{</span>setup<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>addEventListener<span class=\"k\">(</span>original<span class=\"k\">,</span>handler<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>teardown<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span><span class=\"k\">this</span><span class=\"k\">.</span>removeEventListener<span class=\"k\">(</span>original<span class=\"k\">,</span>handler<span class=\"k\">,</span><span class=\"k\">true</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">,</span>handler<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span>arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]=</span>$<span class=\"k\">.</span>event<span class=\"k\">.</span>fix<span class=\"k\">(</span>e<span class=\"k\">);</span>arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">=</span>fix<span class=\"k\">;</span><span class=\"k\">return</span> $<span class=\"k\">.</span>event<span class=\"k\">.</span>handle<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>arguments<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">;</span><span class=\"k\">function</span> handler<span class=\"k\">(</span>e<span class=\"k\">)</span><span class=\"k\">{</span>e<span class=\"k\">=</span>$<span class=\"k\">.</span>event<span class=\"k\">.</span>fix<span class=\"k\">(</span>e<span class=\"k\">);</span>e<span class=\"k\">.</span>type<span class=\"k\">=</span>fix<span class=\"k\">;</span><span class=\"k\">return</span> $<span class=\"k\">.</span>event<span class=\"k\">.</span>handle<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span>e<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">;</span>$<span class=\"k\">.</span>extend<span class=\"k\">(</span>$<span class=\"k\">.</span>fn<span class=\"k\">,</span><span class=\"k\">{</span>validateDelegate<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span>delegate<span class=\"k\">,</span>type<span class=\"k\">,</span>handler<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>bind<span class=\"k\">(</span>type<span class=\"k\">,</span><span class=\"k\">function</span><span class=\"k\">(</span>event<span class=\"k\">)</span><span class=\"k\">{</span><span class=\"k\">var</span> target<span class=\"k\">=</span>$<span class=\"k\">(</span>event<span class=\"k\">.</span>target<span class=\"k\">);</span><span class=\"k\">if</span><span class=\"k\">(</span>target<span class=\"k\">.</span>is<span class=\"k\">(</span>delegate<span class=\"k\">))</span><span class=\"k\">{</span><span class=\"k\">return</span> handler<span class=\"k\">.</span>apply<span class=\"k\">(</span>target<span class=\"k\">,</span>arguments<span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">);</span><span class=\"k\">}}</span><span class=\"k\">);</span><span class=\"k\">}</span><span class=\"k\">)(</span>jQuery<span class=\"k\">);</span>"];
_$jscoverage['jquery.validate.min.js'][15]++;
(function ($) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.extend($.fn, {validate: (function (options) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((! this.length)) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    (options && options.debug && window.console && console.warn("nothing selected, can't validate, returning nothing"));
    _$jscoverage['jquery.validate.min.js'][15]++;
    return;
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  var validator = $.data(this[0], "validator");
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (validator) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    return validator;
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  validator = new ($.validator)(options, this[0]);
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.data(this[0], "validator", validator);
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (validator.settings.onsubmit) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.find("input, button").filter(".cancel").click((function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  validator.cancelSubmit = true;
}));
    _$jscoverage['jquery.validate.min.js'][15]++;
    if (validator.settings.submitHandler) {
      _$jscoverage['jquery.validate.min.js'][15]++;
      this.find("input, button").filter(":submit").click((function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  validator.submitButton = this;
}));
    }
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.submit((function (event) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (validator.settings.debug) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    event.preventDefault();
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  function handle() {
    _$jscoverage['jquery.validate.min.js'][15]++;
    if (validator.settings.submitHandler) {
      _$jscoverage['jquery.validate.min.js'][15]++;
      if (validator.submitButton) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        var hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
      }
      _$jscoverage['jquery.validate.min.js'][15]++;
      validator.settings.submitHandler.call(validator, validator.currentForm);
      _$jscoverage['jquery.validate.min.js'][15]++;
      if (validator.submitButton) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        hidden.remove();
      }
      _$jscoverage['jquery.validate.min.js'][15]++;
      return false;
    }
    _$jscoverage['jquery.validate.min.js'][15]++;
    return true;
}
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (validator.cancelSubmit) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    validator.cancelSubmit = false;
    _$jscoverage['jquery.validate.min.js'][15]++;
    return handle();
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (validator.form()) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    if (validator.pendingRequest) {
      _$jscoverage['jquery.validate.min.js'][15]++;
      validator.formSubmitted = true;
      _$jscoverage['jquery.validate.min.js'][15]++;
      return false;
    }
    _$jscoverage['jquery.validate.min.js'][15]++;
    return handle();
  }
  else {
    _$jscoverage['jquery.validate.min.js'][15]++;
    validator.focusInvalid();
    _$jscoverage['jquery.validate.min.js'][15]++;
    return false;
  }
}));
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  return validator;
}), valid: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ($(this[0]).is("form")) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    return this.validate().form();
  }
  else {
    _$jscoverage['jquery.validate.min.js'][15]++;
    var valid = true;
    _$jscoverage['jquery.validate.min.js'][15]++;
    var validator = $(this[0].form).validate();
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.each((function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  valid &= validator.element(this);
}));
    _$jscoverage['jquery.validate.min.js'][15]++;
    return valid;
  }
}), removeAttrs: (function (attributes) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  var result = {}, $element = this;
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.each(attributes.split(/\s/), (function (index, value) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  result[value] = $element.attr(value);
  _$jscoverage['jquery.validate.min.js'][15]++;
  $element.removeAttr(value);
}));
  _$jscoverage['jquery.validate.min.js'][15]++;
  return result;
}), rules: (function (command, argument) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  var element = this[0];
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (command) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    var settings = $.data(element.form, "validator").settings;
    _$jscoverage['jquery.validate.min.js'][15]++;
    var staticRules = settings.rules;
    _$jscoverage['jquery.validate.min.js'][15]++;
    var existingRules = $.validator.staticRules(element);
    _$jscoverage['jquery.validate.min.js'][15]++;
    switch (command) {
    case "add":
      _$jscoverage['jquery.validate.min.js'][15]++;
      $.extend(existingRules, $.validator.normalizeRule(argument));
      _$jscoverage['jquery.validate.min.js'][15]++;
      staticRules[element.name] = existingRules;
      _$jscoverage['jquery.validate.min.js'][15]++;
      if (argument.messages) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
      }
      _$jscoverage['jquery.validate.min.js'][15]++;
      break;
    case "remove":
      _$jscoverage['jquery.validate.min.js'][15]++;
      if ((! argument)) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        (delete staticRules[element.name]);
        _$jscoverage['jquery.validate.min.js'][15]++;
        return existingRules;
      }
      _$jscoverage['jquery.validate.min.js'][15]++;
      var filtered = {};
      _$jscoverage['jquery.validate.min.js'][15]++;
      $.each(argument.split(/\s/), (function (index, method) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  filtered[method] = existingRules[method];
  _$jscoverage['jquery.validate.min.js'][15]++;
  (delete existingRules[method]);
}));
      _$jscoverage['jquery.validate.min.js'][15]++;
      return filtered;
    }
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  var data = $.validator.normalizeRules($.extend({}, $.validator.metadataRules(element), $.validator.classRules(element), $.validator.attributeRules(element), $.validator.staticRules(element)), element);
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (data.required) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    var param = data.required;
    _$jscoverage['jquery.validate.min.js'][15]++;
    (delete data.required);
    _$jscoverage['jquery.validate.min.js'][15]++;
    data = $.extend({required: param}, data);
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  return data;
})});
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.extend($.expr[":"], {blank: (function (a) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (! $.trim(("" + a.value)));
}), filled: (function (a) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (! (! $.trim(("" + a.value))));
}), unchecked: (function (a) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (! a.checked);
})});
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.validator = (function (options, form) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.settings = $.extend(true, {}, $.validator.defaults, options);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.currentForm = form;
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.init();
});
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.validator.format = (function (source, params) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((arguments.length == 1)) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    return (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  var args = $.makeArray(arguments);
  _$jscoverage['jquery.validate.min.js'][15]++;
  args.unshift(source);
  _$jscoverage['jquery.validate.min.js'][15]++;
  return $.validator.format.apply(this, args);
});
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (((arguments.length > 2) && (params.constructor != Array))) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    params = $.makeArray(arguments).slice(1);
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((params.constructor != Array)) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    params = [params];
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.each(params, (function (i, n) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  source = source.replace(new RegExp(("\\{" + i + "\\}"), "g"), n);
}));
  _$jscoverage['jquery.validate.min.js'][15]++;
  return source;
});
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.extend($.validator, {defaults: {messages: {}, groups: {}, rules: {}, errorClass: "error", validClass: "valid", errorElement: "label", focusInvalid: true, errorContainer: $([]), errorLabelContainer: $([]), onsubmit: true, ignore: [], ignoreTitle: false, onfocusin: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.lastActive = element;
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((this.settings.focusCleanup && (! this.blockFocusCleanup))) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    (this.settings.unhighlight && this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass));
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.errorsFor(element).hide();
  }
}), onfocusout: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (((! this.checkable(element)) && ((element.name in this.submitted) || (! this.optional(element))))) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.element(element);
  }
}), onkeyup: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (((element.name in this.submitted) || (element == this.lastElement))) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.element(element);
  }
}), onclick: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((element.name in this.submitted)) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.element(element);
  }
  else {
    _$jscoverage['jquery.validate.min.js'][15]++;
    if ((element.parentNode.name in this.submitted)) {
      _$jscoverage['jquery.validate.min.js'][15]++;
      this.element(element.parentNode);
    }
  }
}), highlight: (function (element, errorClass, validClass) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  $(element).addClass(errorClass).removeClass(validClass);
}), unhighlight: (function (element, errorClass, validClass) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  $(element).removeClass(errorClass).addClass(validClass);
})}, setDefaults: (function (settings) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.extend($.validator.defaults, settings);
}), messages: {required: "This field is required.", remote: "Please fix this field.", email: "Please enter a valid email address.", url: "Please enter a valid URL.", date: "Please enter a valid date.", dateISO: "Please enter a valid date (ISO).", number: "Please enter a valid number.", digits: "Please enter only digits.", creditcard: "Please enter a valid credit card number.", equalTo: "Please enter the same value again.", accept: "Please enter a value with a valid extension.", maxlength: $.validator.format("Please enter no more than {0} characters."), minlength: $.validator.format("Please enter at least {0} characters."), rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."), range: $.validator.format("Please enter a value between {0} and {1}."), max: $.validator.format("Please enter a value less than or equal to {0}."), min: $.validator.format("Please enter a value greater than or equal to {0}.")}, autoCreateRanges: false, prototype: {init: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.labelContainer = $(this.settings.errorLabelContainer);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.errorContext = ((this.labelContainer.length && this.labelContainer) || $(this.currentForm));
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.submitted = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.valueCache = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.pendingRequest = 0;
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.pending = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.invalid = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.reset();
  _$jscoverage['jquery.validate.min.js'][15]++;
  var groups = (this.groups = {});
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.each(this.settings.groups, (function (key, value) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.each(value.split(/\s/), (function (index, name) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  groups[name] = key;
}));
}));
  _$jscoverage['jquery.validate.min.js'][15]++;
  var rules = this.settings.rules;
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.each(rules, (function (key, value) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  rules[key] = $.validator.normalizeRule(value);
}));
  _$jscoverage['jquery.validate.min.js'][15]++;
  function delegate(event) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    var validator = $.data(this[0].form, "validator"), eventType = ("on" + event.type.replace(/^validate/, ""));
    _$jscoverage['jquery.validate.min.js'][15]++;
    (validator.settings[eventType] && validator.settings[eventType].call(validator, this[0]));
}
  _$jscoverage['jquery.validate.min.js'][15]++;
  $(this.currentForm).validateDelegate(":text, :password, :file, select, textarea", "focusin focusout keyup", delegate).validateDelegate(":radio, :checkbox, select, option", "click", delegate);
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (this.settings.invalidHandler) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
  }
}), form: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.checkForm();
  _$jscoverage['jquery.validate.min.js'][15]++;
  $.extend(this.submitted, this.errorMap);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.invalid = $.extend({}, this.errorMap);
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((! this.valid())) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    $(this.currentForm).triggerHandler("invalid-form", [this]);
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.showErrors();
  _$jscoverage['jquery.validate.min.js'][15]++;
  return this.valid();
}), checkForm: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.prepareForm();
  _$jscoverage['jquery.validate.min.js'][15]++;
  for (var i = 0, elements = (this.currentElements = this.elements()); elements[i]; (i++)) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.check(elements[i]);
}
  _$jscoverage['jquery.validate.min.js'][15]++;
  return this.valid();
}), element: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  element = this.clean(element);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.lastElement = element;
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.prepareElement(element);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.currentElements = $(element);
  _$jscoverage['jquery.validate.min.js'][15]++;
  var result = this.check(element);
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (result) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    (delete this.invalid[element.name]);
  }
  else {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.invalid[element.name] = true;
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ((! this.numberOfInvalids())) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.toHide = this.toHide.add(this.containers);
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.showErrors();
  _$jscoverage['jquery.validate.min.js'][15]++;
  return result;
}), showErrors: (function (errors) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (errors) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    $.extend(this.errorMap, errors);
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.errorList = [];
    _$jscoverage['jquery.validate.min.js'][15]++;
    for (var name in errors) {
      _$jscoverage['jquery.validate.min.js'][15]++;
      this.errorList.push({message: errors[name], element: this.findByName(name)[0]});
}
    _$jscoverage['jquery.validate.min.js'][15]++;
    this.successList = $.grep(this.successList, (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (! (element.name in errors));
}));
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  (this.settings.showErrors? this.settings.showErrors.call(this, this.errorMap, this.errorList): this.defaultShowErrors());
}), resetForm: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if ($.fn.resetForm) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    $(this.currentForm).resetForm();
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.submitted = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.prepareForm();
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.hideErrors();
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.elements().removeClass(this.settings.errorClass);
}), numberOfInvalids: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return this.objectLength(this.invalid);
}), objectLength: (function (obj) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  var count = 0;
  _$jscoverage['jquery.validate.min.js'][15]++;
  for (var i in obj) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    (count++);
}
  _$jscoverage['jquery.validate.min.js'][15]++;
  return count;
}), hideErrors: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.addWrapper(this.toHide).hide();
}), valid: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (this.size() == 0);
}), size: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return this.errorList.length;
}), focusInvalid: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (this.settings.focusInvalid) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    try {
      _$jscoverage['jquery.validate.min.js'][15]++;
      $((this.findLastActive() || (this.errorList.length && this.errorList[0].element) || [])).filter(":visible").focus().trigger("focusin");
    }
    catch (e) {
    }
  }
}), findLastActive: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  var lastActive = this.lastActive;
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (lastActive && ($.grep(this.errorList, (function (n) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return (n.element.name == lastActive.name);
})).length == 1) && lastActive);
}), elements: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  var validator = this, rulesCache = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  return $([]).add(this.currentForm.elements).filter(":input").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter((function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  ((! this.name) && validator.settings.debug && window.console && console.error("%o has no name assigned", this));
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (((this.name in rulesCache) || (! validator.objectLength($(this).rules())))) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    return false;
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  rulesCache[this.name] = true;
  _$jscoverage['jquery.validate.min.js'][15]++;
  return true;
}));
}), clean: (function (selector) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return $(selector)[0];
}), errors: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  return $((this.settings.errorElement + "." + this.settings.errorClass), this.errorContext);
}), reset: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.successList = [];
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.errorList = [];
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.errorMap = {};
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.toShow = $([]);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.toHide = $([]);
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.currentElements = $([]);
}), prepareForm: (function () {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.reset();
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.toHide = this.errors().add(this.containers);
}), prepareElement: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.reset();
  _$jscoverage['jquery.validate.min.js'][15]++;
  this.toHide = this.errorsFor(element);
}), check: (function (element) {
  _$jscoverage['jquery.validate.min.js'][15]++;
  element = this.clean(element);
  _$jscoverage['jquery.validate.min.js'][15]++;
  if (this.checkable(element)) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    element = this.findByName(element.name)[0];
  }
  _$jscoverage['jquery.validate.min.js'][15]++;
  var rules = $(element).rules();
  _$jscoverage['jquery.validate.min.js'][15]++;
  var dependencyMismatch = false;
  _$jscoverage['jquery.validate.min.js'][15]++;
  for (method in rules) {
    _$jscoverage['jquery.validate.min.js'][15]++;
    var rule = {method: method, parameters: rules[method]};
    _$jscoverage['jquery.validate.min.js'][15]++;
    try {
      _$jscoverage['jquery.validate.min.js'][15]++;
      var result = $.validator.methods[method].call(this, element.value.replace(/\r/g, ""), element, rule.parameters);
      _$jscoverage['jquery.validate.min.js'][15]++;
      if ((result == "dependency-mismatch")) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        dependencyMismatch = true;
        _$jscoverage['jquery.validate.min.js'][15]++;
        continue;
      }
      _$jscoverage['jquery.validate.min.js'][15]++;
      dependencyMismatch = false;
      _$jscoverage['jquery.validate.min.js'][15]++;
      if ((result == "pending")) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        this.toHide = this.toHide.not(this.errorsFor(element));
        _$jscoverage['jquery.validate.min.js'][15]++;
        return;
      }
      _$jscoverage['jquery.validate.min.js'][15]++;
      if ((! result)) {
        _$jscoverage['jquery.validate.min.js'][15]++;
        this.formatAndAdd(element, rule);
        _$jscoverage['jquery.validate.min.js'][15]++;
        return false;
      }
    }
    catch (e) {
      _$jscoverage['jquery.validate.min.js'][15]++;
      (this.settings.debug && window.console && console.log(("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method"), e));
      _$jscoverage['jquery.validate.min.js'][16]++;
      throw e;
    }
}
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (dependencyMismatch) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return;
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.objectLength(rules)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.successList.push(element);
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return true;
}), customMetaMessage: (function (element, method) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((! $.metadata)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return;
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  var meta = (this.settings.meta? $(element).metadata()[this.settings.meta]: $(element).metadata());
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (meta && meta.messages && meta.messages[method]);
}), customMessage: (function (name, method) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var m = this.settings.messages[name];
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (m && ((m.constructor == String)? m: m[method]));
}), findDefined: (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  for (var i = 0; (i < arguments.length); (i++)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    if ((arguments[i] !== undefined)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      return arguments[i];
    }
}
  _$jscoverage['jquery.validate.min.js'][16]++;
  return undefined;
}), defaultMessage: (function (element, method) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return this.findDefined(this.customMessage(element.name, method), this.customMetaMessage(element, method), (((! this.settings.ignoreTitle) && element.title) || undefined), $.validator.messages[method], ("<strong>Warning: No message defined for " + element.name + "</strong>"));
}), formatAndAdd: (function (element, rule) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var message = this.defaultMessage(element, rule.method), theregex = /\$?\{(\d+)\}/g;
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (((typeof message) == "function")) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    message = message.call(this, rule.parameters, element);
  }
  else {
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (theregex.test(message)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      message = jQuery.format(message.replace(theregex, "{$1}"), rule.parameters);
    }
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.errorList.push({message: message, element: element});
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.errorMap[element.name] = message;
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.submitted[element.name] = message;
}), addWrapper: (function (toToggle) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.settings.wrapper) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return toToggle;
}), defaultShowErrors: (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  for (var i = 0; this.errorList[i]; (i++)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var error = this.errorList[i];
    _$jscoverage['jquery.validate.min.js'][16]++;
    (this.settings.highlight && this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass));
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.showLabel(error.element, error.message);
}
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.errorList.length) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.toShow = this.toShow.add(this.containers);
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.settings.success) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    for (var i = 0; this.successList[i]; (i++)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      this.showLabel(this.successList[i]);
}
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.settings.unhighlight) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    for (var i = 0, elements = this.validElements(); elements[i]; (i++)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
}
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.toHide = this.toHide.not(this.toShow);
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.hideErrors();
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.addWrapper(this.toShow).show();
}), validElements: (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return this.currentElements.not(this.invalidElements());
}), invalidElements: (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return $(this.errorList).map((function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return this.element;
}));
}), showLabel: (function (element, message) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var label = this.errorsFor(element);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (label.length) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    label.removeClass().addClass(this.settings.errorClass);
    _$jscoverage['jquery.validate.min.js'][16]++;
    (label.attr("generated") && label.html(message));
  }
  else {
    _$jscoverage['jquery.validate.min.js'][16]++;
    label = $(("<" + this.settings.errorElement + "/>")).attr({"for": this.idOrName(element), generated: true}).addClass(this.settings.errorClass).html((message || ""));
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (this.settings.wrapper) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      label = label.hide().show().wrap(("<" + this.settings.wrapper + "/>")).parent();
    }
    _$jscoverage['jquery.validate.min.js'][16]++;
    if ((! this.labelContainer.append(label).length)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      (this.settings.errorPlacement? this.settings.errorPlacement(label, $(element)): label.insertAfter(element));
    }
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (((! message) && this.settings.success)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    label.text("");
    _$jscoverage['jquery.validate.min.js'][16]++;
    (((typeof this.settings.success) == "string")? label.addClass(this.settings.success): this.settings.success(label));
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.toShow = this.toShow.add(label);
}), errorsFor: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var name = this.idOrName(element);
  _$jscoverage['jquery.validate.min.js'][16]++;
  return this.errors().filter((function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return ($(this).attr("for") == name);
}));
}), idOrName: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.groups[element.name] || (this.checkable(element)? element.name: (element.id || element.name)));
}), checkable: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return /radio|checkbox/i.test(element.type);
}), findByName: (function (name) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var form = this.currentForm;
  _$jscoverage['jquery.validate.min.js'][16]++;
  return $(document.getElementsByName(name)).map((function (index, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (((element.form == form) && (element.name == name) && element) || null);
}));
}), getLength: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  switch (element.nodeName.toLowerCase()) {
  case "select":
    _$jscoverage['jquery.validate.min.js'][16]++;
    return $("option:selected", element).length;
  case "input":
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (this.checkable(element)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      return this.findByName(element.name).filter(":checked").length;
    }
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return value.length;
}), depend: (function (param, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.dependTypes[(typeof param)]? (this.dependTypes[(typeof param)])(param, element): true);
}), dependTypes: {"boolean": (function (param, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return param;
}), "string": (function (param, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (! (! $(param, element.form).length));
}), "function": (function (param, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return param(element);
})}, optional: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return ((! $.validator.methods.required.call(this, $.trim(element.value), element)) && "dependency-mismatch");
}), startRequest: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((! this.pending[element.name])) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    (this.pendingRequest++);
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.pending[element.name] = true;
  }
}), stopRequest: (function (element, valid) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  (this.pendingRequest--);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((this.pendingRequest < 0)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.pendingRequest = 0;
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  (delete this.pending[element.name]);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((valid && (this.pendingRequest == 0) && this.formSubmitted && this.form())) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    $(this.currentForm).submit();
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.formSubmitted = false;
  }
  else {
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (((! valid) && (this.pendingRequest == 0) && this.formSubmitted)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      $(this.currentForm).triggerHandler("invalid-form", [this]);
      _$jscoverage['jquery.validate.min.js'][16]++;
      this.formSubmitted = false;
    }
  }
}), previousValue: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return ($.data(element, "previousValue") || $.data(element, "previousValue", {old: null, valid: true, message: this.defaultMessage(element, "remote")}));
})}, classRuleSettings: {required: {required: true}, email: {email: true}, url: {url: true}, date: {date: true}, dateISO: {dateISO: true}, dateDE: {dateDE: true}, number: {number: true}, numberDE: {numberDE: true}, digits: {digits: true}, creditcard: {creditcard: true}}, addClassRules: (function (className, rules) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  ((className.constructor == String)? (this.classRuleSettings[className] = rules): $.extend(this.classRuleSettings, className));
}), classRules: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var rules = {};
  _$jscoverage['jquery.validate.min.js'][16]++;
  var classes = $(element).attr("class");
  _$jscoverage['jquery.validate.min.js'][16]++;
  (classes && $.each(classes.split(" "), (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((this in $.validator.classRuleSettings)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    $.extend(rules, $.validator.classRuleSettings[this]);
  }
})));
  _$jscoverage['jquery.validate.min.js'][16]++;
  return rules;
}), attributeRules: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var rules = {};
  _$jscoverage['jquery.validate.min.js'][16]++;
  var $element = $(element);
  _$jscoverage['jquery.validate.min.js'][16]++;
  for (method in $.validator.methods) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var value = $element.attr(method);
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (value) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      rules[method] = value;
    }
}
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength))) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    (delete rules.maxlength);
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return rules;
}), metadataRules: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((! $.metadata)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return ({});
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  var meta = $.data(element.form, "validator").settings.meta;
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (meta? $(element).metadata()[meta]: $(element).metadata());
}), staticRules: (function (element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var rules = {};
  _$jscoverage['jquery.validate.min.js'][16]++;
  var validator = $.data(element.form, "validator");
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (validator.settings.rules) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    rules = ($.validator.normalizeRule(validator.settings.rules[element.name]) || {});
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return rules;
}), normalizeRules: (function (rules, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.each(rules, (function (prop, val) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((val === false)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    (delete rules[prop]);
    _$jscoverage['jquery.validate.min.js'][16]++;
    return;
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((val.param || val.depends)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var keepRule = true;
    _$jscoverage['jquery.validate.min.js'][16]++;
    switch ((typeof val.depends)) {
    case "string":
      _$jscoverage['jquery.validate.min.js'][16]++;
      keepRule = (! (! $(val.depends, element.form).length));
      _$jscoverage['jquery.validate.min.js'][16]++;
      break;
    case "function":
      _$jscoverage['jquery.validate.min.js'][16]++;
      keepRule = val.depends.call(element, element);
      _$jscoverage['jquery.validate.min.js'][16]++;
      break;
    }
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (keepRule) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      rules[prop] = ((val.param !== undefined)? val.param: true);
    }
    else {
      _$jscoverage['jquery.validate.min.js'][16]++;
      (delete rules[prop]);
    }
  }
}));
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.each(rules, (function (rule, parameter) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  rules[rule] = ($.isFunction(parameter)? parameter(element): parameter);
}));
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.each(["minlength", "maxlength", "min", "max"], (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (rules[this]) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    rules[this] = Number(rules[this]);
  }
}));
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.each(["rangelength", "range"], (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (rules[this]) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
  }
}));
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ($.validator.autoCreateRanges) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    if ((rules.min && rules.max)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      rules.range = [rules.min, rules.max];
      _$jscoverage['jquery.validate.min.js'][16]++;
      (delete rules.min);
      _$jscoverage['jquery.validate.min.js'][16]++;
      (delete rules.max);
    }
    _$jscoverage['jquery.validate.min.js'][16]++;
    if ((rules.minlength && rules.maxlength)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      rules.rangelength = [rules.minlength, rules.maxlength];
      _$jscoverage['jquery.validate.min.js'][16]++;
      (delete rules.minlength);
      _$jscoverage['jquery.validate.min.js'][16]++;
      (delete rules.maxlength);
    }
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (rules.messages) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    (delete rules.messages);
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return rules;
}), normalizeRule: (function (data) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (((typeof data) == "string")) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var transformed = {};
    _$jscoverage['jquery.validate.min.js'][16]++;
    $.each(data.split(/\s/), (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  transformed[this] = true;
}));
    _$jscoverage['jquery.validate.min.js'][16]++;
    data = transformed;
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return data;
}), addMethod: (function (name, method, message) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.validator.methods[name] = method;
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.validator.messages[name] = ((message != undefined)? message: $.validator.messages[name]);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((method.length < 3)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    $.validator.addClassRules(name, $.validator.normalizeRule(name));
  }
}), methods: {required: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((! this.depend(param, element))) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return "dependency-mismatch";
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  switch (element.nodeName.toLowerCase()) {
  case "select":
    _$jscoverage['jquery.validate.min.js'][16]++;
    var val = $(element).val();
    _$jscoverage['jquery.validate.min.js'][16]++;
    return (val && (val.length > 0));
  case "input":
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (this.checkable(element)) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      return (this.getLength(value, element) > 0);
    }
  default:
    _$jscoverage['jquery.validate.min.js'][16]++;
    return ($.trim(value).length > 0);
  }
}), remote: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.optional(element)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return "dependency-mismatch";
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  var previous = this.previousValue(element);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((! this.settings.messages[element.name])) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.settings.messages[element.name] = {};
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  previous.originalMessage = this.settings.messages[element.name].remote;
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.settings.messages[element.name].remote = previous.message;
  _$jscoverage['jquery.validate.min.js'][16]++;
  param = ((((typeof param) == "string") && {url: param}) || param);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((previous.old !== value)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    previous.old = value;
    _$jscoverage['jquery.validate.min.js'][16]++;
    var validator = this;
    _$jscoverage['jquery.validate.min.js'][16]++;
    this.startRequest(element);
    _$jscoverage['jquery.validate.min.js'][16]++;
    var data = {};
    _$jscoverage['jquery.validate.min.js'][16]++;
    data[element.name] = value;
    _$jscoverage['jquery.validate.min.js'][16]++;
    $.ajax($.extend(true, {url: param, mode: "abort", port: ("validate" + element.name), dataType: "json", data: data, success: (function (response) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  validator.settings.messages[element.name].remote = previous.originalMessage;
  _$jscoverage['jquery.validate.min.js'][16]++;
  var valid = (response === true);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (valid) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var submitted = validator.formSubmitted;
    _$jscoverage['jquery.validate.min.js'][16]++;
    validator.prepareElement(element);
    _$jscoverage['jquery.validate.min.js'][16]++;
    validator.formSubmitted = submitted;
    _$jscoverage['jquery.validate.min.js'][16]++;
    validator.successList.push(element);
    _$jscoverage['jquery.validate.min.js'][16]++;
    validator.showErrors();
  }
  else {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var errors = {};
    _$jscoverage['jquery.validate.min.js'][16]++;
    var message = (previous.message = (response || validator.defaultMessage(element, "remote")));
    _$jscoverage['jquery.validate.min.js'][16]++;
    errors[element.name] = ($.isFunction(message)? message(value): message);
    _$jscoverage['jquery.validate.min.js'][16]++;
    validator.showErrors(errors);
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  previous.valid = valid;
  _$jscoverage['jquery.validate.min.js'][16]++;
  validator.stopRequest(element, valid);
})}, param));
    _$jscoverage['jquery.validate.min.js'][16]++;
    return "pending";
  }
  else {
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (this.pending[element.name]) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      return "pending";
    }
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return previous.valid;
}), minlength: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || (this.getLength($.trim(value), element) >= param));
}), maxlength: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || (this.getLength($.trim(value), element) <= param));
}), rangelength: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var length = this.getLength($.trim(value), element);
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || ((length >= param[0]) && (length <= param[1])));
}), min: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || (value >= param));
}), max: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || (value <= param));
}), range: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || ((value >= param[0]) && (value <= param[1])));
}), email: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value));
}), url: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value));
}), date: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || (! /Invalid|NaN/.test(new Date(value))));
}), dateISO: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value));
}), number: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value));
}), digits: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || /^\d+$/.test(value));
}), creditcard: (function (value, element) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (this.optional(element)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return "dependency-mismatch";
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (/[^0-9-]+/.test(value)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return false;
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  var nCheck = 0, nDigit = 0, bEven = false;
  _$jscoverage['jquery.validate.min.js'][16]++;
  value = value.replace(/\D/g, "");
  _$jscoverage['jquery.validate.min.js'][16]++;
  for (var n = (value.length - 1); (n >= 0); (n--)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    var cDigit = value.charAt(n);
    _$jscoverage['jquery.validate.min.js'][16]++;
    var nDigit = parseInt(cDigit, 10);
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (bEven) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      if (((nDigit *= 2) > 9)) {
        _$jscoverage['jquery.validate.min.js'][16]++;
        nDigit -= 9;
      }
    }
    _$jscoverage['jquery.validate.min.js'][16]++;
    nCheck += nDigit;
    _$jscoverage['jquery.validate.min.js'][16]++;
    bEven = (! bEven);
}
  _$jscoverage['jquery.validate.min.js'][16]++;
  return ((nCheck % 10) == 0);
}), accept: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  param = (((typeof param) == "string")? param.replace(/,/g, "|"): "png|jpe?g|gif");
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (this.optional(element) || value.match(new RegExp((".(" + param + ")$"), "i")));
}), equalTo: (function (value, element, param) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  $(element).valid();
}));
  _$jscoverage['jquery.validate.min.js'][16]++;
  return (value == target.val());
})}});
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.format = $.validator.format;
})(jQuery);
_$jscoverage['jquery.validate.min.js'][16]++;
;
_$jscoverage['jquery.validate.min.js'][16]++;
(function ($) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var ajax = $.ajax;
  _$jscoverage['jquery.validate.min.js'][16]++;
  var pendingRequests = {};
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.ajax = (function (settings) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  settings = $.extend(settings, $.extend({}, $.ajaxSettings, settings));
  _$jscoverage['jquery.validate.min.js'][16]++;
  var port = settings.port;
  _$jscoverage['jquery.validate.min.js'][16]++;
  if ((settings.mode == "abort")) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    if (pendingRequests[port]) {
      _$jscoverage['jquery.validate.min.js'][16]++;
      pendingRequests[port].abort();
    }
    _$jscoverage['jquery.validate.min.js'][16]++;
    return (pendingRequests[port] = ajax.apply(this, arguments));
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  return ajax.apply(this, arguments);
});
})(jQuery);
_$jscoverage['jquery.validate.min.js'][16]++;
;
_$jscoverage['jquery.validate.min.js'][16]++;
(function ($) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (((! jQuery.event.special.focusin) && (! jQuery.event.special.focusout) && document.addEventListener)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    $.each({focus: "focusin", blur: "focusout"}, (function (original, fix) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.event.special[fix] = {setup: (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.addEventListener(original, handler, true);
}), teardown: (function () {
  _$jscoverage['jquery.validate.min.js'][16]++;
  this.removeEventListener(original, handler, true);
}), handler: (function (e) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  arguments[0] = $.event.fix(e);
  _$jscoverage['jquery.validate.min.js'][16]++;
  arguments[0].type = fix;
  _$jscoverage['jquery.validate.min.js'][16]++;
  return $.event.handle.apply(this, arguments);
})};
  _$jscoverage['jquery.validate.min.js'][16]++;
  function handler(e) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    e = $.event.fix(e);
    _$jscoverage['jquery.validate.min.js'][16]++;
    e.type = fix;
    _$jscoverage['jquery.validate.min.js'][16]++;
    return $.event.handle.call(this, e);
}
}));
  }
  _$jscoverage['jquery.validate.min.js'][16]++;
  ;
  _$jscoverage['jquery.validate.min.js'][16]++;
  $.extend($.fn, {validateDelegate: (function (delegate, type, handler) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  return this.bind(type, (function (event) {
  _$jscoverage['jquery.validate.min.js'][16]++;
  var target = $(event.target);
  _$jscoverage['jquery.validate.min.js'][16]++;
  if (target.is(delegate)) {
    _$jscoverage['jquery.validate.min.js'][16]++;
    return handler.apply(target, arguments);
  }
}));
})});
})(jQuery);
