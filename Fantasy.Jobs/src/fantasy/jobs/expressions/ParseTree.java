package fantasy.jobs.expressions;

import java.lang.reflect.*;

import org.apache.commons.lang3.StringUtils;

import fantasy.*;
import fantasy.collections.*;
import fantasy.jobs.properties.*;



// Generated by TinyPG v1.2 available at www.codeproject.com



@SuppressWarnings("rawtypes") 
public class ParseTree extends ParseNode
{
	public ParseErrors Errors;

	public java.util.ArrayList<Token> Skipped;

	public ParseTree()
	{
		super(new Token(), "ParseTree");
		Token.Type = TokenType.Start;
		Token.setText("Root");
		Skipped = new java.util.ArrayList<Token>();
		Errors = new ParseErrors();
	}

	public final String PrintTree()
	{
		StringBuilder sb = new StringBuilder();
		int indent = 0;
		PrintNode(sb, this, indent);
		return sb.toString();
	}

	private void PrintNode(StringBuilder sb, ParseNode node, int indent)
	{

		String space= StringUtils.leftPad("", indent);
	
		
		sb.append(space).append(node.getText()).append(StringUtils2.newLine());

		for (ParseNode n : node.getNodes())
		{
			PrintNode(sb, n, indent + 2);
		}
	}

	/** 
	 this is the entry point for executing and evaluating the parse tree.
	 
	 @param paramlist additional optional input parameters
	 @return the output of the evaluation function
	 * @throws Exception 
	*/
	public final Object Eval(Object... paramlist) throws Exception
	{
		return getNodes().get(0).Eval(this, paramlist);
	}



	public final Object OnInvokeFunction(java.lang.Class t, final String functionName, final Object[] arguments) throws Exception
	{
		
		Method method = new Enumerable<Method>(t.getMethods()).firstOrDefault(new Predicate<Method>(){

			@Override
			public boolean evaluate(Method method) {
				boolean rs = false;
				if(Modifier.isStatic(method.getModifiers()) && method.getName().equals(functionName))
				{
					Class[] ptypes = method.getParameterTypes();
					
					if(ptypes.length == arguments.length)
					{
						rs = true;
						
						for(int i = 0; i < ptypes.length; i ++)
						{
							if(arguments[i] == null && ptypes[i].isPrimitive())
							{
								rs = false;
								break;
							}
							else if(!ptypes[i].isInstance(arguments[i]))
							{
								rs = false;
								break;
							}
						}
					}
				}
				
				return rs;
			}});
	
		
		if(method == null)
		{
			throw new NoSuchMethodError(String.format(Resources.getMemberNotFoundExeptionText(), t, functionName));
		}

		return method.invoke(null, arguments);
		



	}




}