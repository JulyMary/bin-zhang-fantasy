<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:Syncfusion.Windows.Diagram"
    xmlns:shared="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.WPF"
   >

    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="/Syncfusion.Diagram.WPF;component/Themes/SymbolPalette.xaml"/>-->
        <ResourceDictionary Source="/Syncfusion.Diagram.WPF;component/Themes/DiagramPageStyle.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <DrawingImage x:Key="GripperImage">
        <DrawingImage.Drawing>
            <DrawingGroup>
                <DrawingGroup.Children>
                    <GeometryDrawing Geometry="F1 M 380.151,280.413L 398.889,280.413L 398.889,299.142L 380.151,299.142L 380.151,280.413 Z ">
                        <GeometryDrawing.Brush>
                            <LinearGradientBrush StartPoint="0.0602422,0.00643143" EndPoint="1.41804,0.00643143">
                                <LinearGradientBrush.RelativeTransform>
                                    <TransformGroup>
                                        <SkewTransform CenterX="0.0602422" CenterY="0.00643143" AngleX="0.0262937" AngleY="0"/>
                                        <RotateTransform CenterX="0.0602422" CenterY="0.00643143" Angle="47.1879"/>
                                    </TransformGroup>
                                </LinearGradientBrush.RelativeTransform>
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="#FF94A3B7" Offset="0"/>
                                    <GradientStop Color="#FF374D68" Offset="1"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </GeometryDrawing.Brush>
                    </GeometryDrawing>
                    <GeometryDrawing Geometry="F1 M 380.991,281.16L 398.103,281.16L 398.103,298.264L 380.991,298.264L 380.991,281.16 Z ">
                        <GeometryDrawing.Brush>
                            <RadialGradientBrush RadiusX="1.04588" RadiusY="1.04585" Center="0.943413,0.980391" GradientOrigin="0.943413,0.980391">
                                <RadialGradientBrush.GradientStops>
                                    <GradientStop Color="#FFBDCDF0" Offset="0"/>
                                    <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                </RadialGradientBrush.GradientStops>
                                <RadialGradientBrush.RelativeTransform>
                                    <TransformGroup>
                                        <SkewTransform CenterX="0.943413" CenterY="0.980391" AngleX="0.0264576" AngleY="0"/>
                                        <RotateTransform CenterX="0.943413" CenterY="0.980391" Angle="226.704"/>
                                    </TransformGroup>
                                </RadialGradientBrush.RelativeTransform>
                            </RadialGradientBrush>
                        </GeometryDrawing.Brush>
                    </GeometryDrawing>
                    <GeometryDrawing Geometry="F1 M 386.284,285.129L 389.54,281.162L 392.795,285.102L 390.169,285.113L 390.169,289.023L 394.152,289.023L 394.163,286.42L 398.102,289.675L 394.135,292.931L 394.146,290.336L 390.169,290.336L 390.169,294.31L 392.768,294.321L 389.512,298.261L 386.257,294.294L 388.856,294.305L 388.856,290.336L 384.95,290.336L 384.939,292.967L 381,289.712L 384.966,286.456L 384.956,289.023L 388.856,289.023L 388.856,285.118L 386.284,285.129 Z ">
                        <GeometryDrawing.Brush>
                            <LinearGradientBrush StartPoint="0.504142,0.0116851" EndPoint="0.504142,0.965569">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="#FF425469" Offset="0"/>
                                    <GradientStop Color="#FF000000" Offset="1"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </GeometryDrawing.Brush>
                    </GeometryDrawing>
                </DrawingGroup.Children>
            </DrawingGroup>
        </DrawingImage.Drawing>
    </DrawingImage>

    <local:HeightToWidthConverter x:Key="heighttowidthconverter"/>
    <BooleanToVisibilityConverter x:Key="Booleantovisibility"/>


    <!-- Dragprovider Default Template -->
    <Style TargetType="{x:Type local:DragProvider}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DragProvider}">
                    <Rectangle Fill="Transparent"   />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Gripper Default Template -->
    <Style x:Key="GripperTemplate"  TargetType="{x:Type local:Gripper}">
        <Setter Property="Width" Value="15"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="10,-9,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Gripper}">
                    <Border  >
                        <Image Source="{StaticResource GripperImage}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TopResizerThumpTemplate" TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000" />
        <Setter Property="Margin" Value="0 -3 0 0"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Height" Value="3" />
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftResizerThumpTemplate" TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000" />
        <Setter Property="Margin" Value="-3 0 0 0"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Width" Value="3"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="RightResizerThumpTemplate" TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000" />
        <Setter Property="Margin" Value="0 0 -3 0"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Width" Value="3"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="BottomResizerThumpTemplate" TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000" />
        <Setter Property="Margin" Value="0 0 0 -3"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Height" Value="3" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TopLeftCornerResizerThumpTemplate"  TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Cursor" Value="SizeNWSE"/>
        <Setter Property="Margin" Value="-5 -5 0 0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="TopRightCornerResizerThumpTemplate"  TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Cursor" Value="SizeNESW"/>
        <Setter Property="Margin" Value=" 0 -5 -5 0"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BottomLeftCornerResizerThumpTemplate"  TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Cursor" Value="SizeNESW"/>
        <Setter Property="Margin" Value="-5 0 0 -5"/>

        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BottomRightCornerResizerThumpTemplate"  TargetType="local:ResizerThumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Cursor" Value="SizeNWSE"/>
        <Setter Property="Margin" Value="0 0 -5 -5"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ResizerThumb">
                    <Border  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
          VerticalAlignment="{TemplateBinding VerticalAlignment}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Margin}"
          x:Name="PART_ReseizerThumb" CornerRadius="7" Panel.ZIndex="0"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:Resizer}">
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type local:Resizer}">

                    <Grid Opacity="0.7" SnapsToDevicePixels="true">
                        <local:ResizerThumb ResizerVerticalAlignment="Top"  ResizerHorizontalAlignment="Stretch"  Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=TopResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Stretch" ResizerHorizontalAlignment="Left"    Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=LeftResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Stretch" ResizerHorizontalAlignment="Right"   Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=RightResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Bottom" ResizerHorizontalAlignment="Stretch"   Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=BottomResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Top"    ResizerHorizontalAlignment="Left"  Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=TopLeftCornerResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Top" ResizerHorizontalAlignment="Right" Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=TopRightCornerResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Bottom"  ResizerHorizontalAlignment="Left"   Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=BottomLeftCornerResizer}"/>
                        <local:ResizerThumb ResizerVerticalAlignment="Bottom"  ResizerHorizontalAlignment="Right"  Style="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Node}},Path=BottomRightCornerResizer}"/>
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Shapes-->

    <Style x:Key="PathStyles" TargetType="Path">
        <Setter Property="Stroke" Value="MidnightBlue"/>
        <Setter Property="StrokeThickness" Value="1"/>
        <Setter Property="StrokeLineJoin" Value="Round" />
        <Setter Property="Fill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#FAFBE9" Offset="0" />
                        <GradientStop Color="CornflowerBlue" Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Stretch" Value="Fill"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Margin" Value="3"/>
    </Style>

    <!--RotateDecorator-->

    <Style TargetType="{x:Type local:RotateThumb}"  x:Key="RotateDecorator">

        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="#55000000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:RotateThumb">
                    <Border Height="18" Width="8">
                        <Path Stretch="UniformToFill" Data="M16.5,8C16.5,12.142135623731,12.9182779986463,15.5,8.5,15.5C4.08172200135365,15.5,0.5,12.142135623731,0.5,8C0.5,3.85786437626905,4.08172200135365,0.5,8.5,0.5C12.9182779986463,0.5,16.5,3.85786437626905,16.5,8z M6,15.5L10.625,15.375 10.375,60.125 6.125,60.125z" Fill="Red"
                              Stroke="DarkSlateGray"  StrokeThickness=".7">
                            <Path.RenderTransform>
                                <RotateTransform Angle="-400"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RotateOriginPointerDecorator Style -->
    <Style TargetType="{x:Type local:RotateOriginPointer}" x:Key="RotateOriginDecorator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RotateOriginPointer}">
                    <Border Name="RotateOriginPointerStyle"  BorderBrush="Black" BorderThickness="1" CornerRadius="6">
                        <Ellipse Width="5" Height="5" Fill="Red" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Rotator-->

    <Style TargetType="{x:Type local:Rotator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type local:Rotator}">
                    <Grid Opacity="0.7" SnapsToDevicePixels="true" >
                        <local:RotateThumb x:Name="PART_RotateThumb"  Margin="-23 -19 0 0"  
                     VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource RotateDecorator}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Connection Port-->

    <Style TargetType="{x:Type local:ConnectionPort}">
        <Style.Resources>
            <SolidColorBrush x:Key="SolidBorderBrush" Color="Green" />
            <Style x:Key="DecoratorBaseStyle" TargetType="Path">

                <Setter Property="Stretch" Value="Fill"/>
                <Setter Property="Stroke" Value="DarkGreen"/>

            </Style>
            <!-- Arrow -->
            <Style x:Key="Arrow" TargetType="Path" BasedOn="{StaticResource DecoratorBaseStyle}">
                <Setter Property="Data"  Value="M0,4 4,0 8,4 Z"/>
            </Style>
            <!-- Diamond  -->
            <Style x:Key="Diamond" TargetType="Path" BasedOn="{StaticResource DecoratorBaseStyle}">
                <Setter Property="Data" Value="M-5,0 0,-5 5,0 0,5 Z"/>
            </Style>
            <!-- Circle  -->
            <Style x:Key="Circle" TargetType="Path" BasedOn="{StaticResource DecoratorBaseStyle}">
                <Setter Property="Data" Value="M5,3C5,4.10456949966159,4.10456949966159,5,3,5C1.89543050033841,5,1,4.10456949966159,1,3C1,1.89543050033841,1.89543050033841,1,3,1C4.10456949966159,1,5,1.89543050033841,5,3z"/>

            </Style>
        </Style.Resources>
        <Setter Property="Width" Value="8"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="CustomPathStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="StrokeThickness" Value="{Binding Path=PortStyle.StrokeThickness, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ConnectionPort}}}"/>
                    <Setter Property="Stroke" Value="{Binding Path=PortStyle.Stroke, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ConnectionPort}}}"/>
                    <Setter Property="StrokeStartLineCap" Value="{Binding Path=PortStyle.StrokeStartLineCap,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ConnectionPort}}}"/>
                    <Setter Property="StrokeEndLineCap" Value="{Binding Path=PortStyle.StrokeEndLineCap, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ConnectionPort}}}"/>
                    <Setter Property="StrokeLineJoin" Value="{Binding Path=PortStyle.StrokeLineJoin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ConnectionPort}}}"/>
                    <Setter Property="Fill" Value="{Binding Path=PortStyle.Fill, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ConnectionPort}}}"/>
                    <Setter Property="Stretch" Value="Fill"/>
                    <!--<Setter Property="Data" Value="{Binding Path=HeadDecoratorStyle.Data, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Width" Value="{Binding Path=HeadDecoratorStyle.Width, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Height" Value="{Binding Path=HeadDecoratorStyle.Height, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>-->
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ConnectionPort}">
                    <Grid>
                        <!--<Path x:Name="PART_PortPath"
                               StrokeThickness="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:ConnectionPort}},Path=PortStyle.StrokeThickness}"  
                              Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:ConnectionPort}},Path=PortStyle.Stroke}"
                              StrokeStartLineCap="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:ConnectionPort}},Path=PortStyle.StrokeStartLineCap}"
                              StrokeEndLineCap="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:ConnectionPort}},Path=PortStyle.StrokeEndLineCap}"
                              StrokeLineJoin="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:ConnectionPort}},Path=PortStyle.StrokeLineJoin}"
                              Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:ConnectionPort}},Path=PortStyle.Fill}"  
                              Stretch="Fill"  Height="Auto" Width="Auto"
                          />-->
                        <Path x:Name="PART_PortPath"  Height="Auto" Width="Auto"
                              Style="{TemplateBinding CustomPathStyle}"/>
                            <Border BorderThickness="2" Width="{TemplateBinding Width}" Height="{TemplateBinding Width}"  Name="PART_PortHit" Visibility="Collapsed" IsHitTestVisible="False" BorderBrush="Red" Background="Transparent" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragOverPort"  Value="True">
                            <Setter Property="Visibility" TargetName="PART_PortHit"  Value="Visible">
                            </Setter>
                        </Trigger>
                        <Trigger Property="PortShape" Value="Arrow">
                            <Setter Property="Data" TargetName="PART_PortPath" Value="M0,4 4,0 8,4 Z"/>
                        </Trigger>
                        <Trigger Property="PortShape" Value="Diamond">
                            <Setter Property="Data" TargetName="PART_PortPath" Value="M-5,0 0,-5 5,0 0,5 Z"/>
                        </Trigger>
                        <Trigger Property="PortShape" Value="Circle">
                            <Setter Property="Data" TargetName="PART_PortPath" Value="M5,3C5,4.10456949966159,4.10456949966159,5,3,5C1.89543050033841,5,1,4.10456949966159,1,3C1,1.89543050033841,1.89543050033841,1,3,1C4.10456949966159,1,5,1.89543050033841,5,3z"/>
                        </Trigger>
                        <!--<DataTrigger Value="Arrow" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortShape}">
                            <Setter TargetName="PART_PortPath" Property="Style" Value="{StaticResource Arrow}"/>
                        </DataTrigger>
                        <DataTrigger Value="Diamond" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortShape}">
                            <Setter TargetName="PART_PortPath" Property="Style" Value="{StaticResource Diamond}"/>
                        </DataTrigger>
                        <DataTrigger Value="Circle" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortShape}">
                            <Setter TargetName="PART_PortPath" Property="Style" Value="{StaticResource Circle}"/>
                        </DataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ItemBrush1" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FAFBE9" Offset="0" />
            <GradientStop Color="CornflowerBlue" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--Node Default Template-->
    <Style TargetType="{x:Type local:Node}">
        <!--<Style.Resources>
            <local:PixelUnitConverter x:Key="PixelUnitCvt"/>
        </Style.Resources>-->
        <Setter Property="GripperStyle" Value="{StaticResource GripperTemplate}"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="CustomPathStyle" Value="{Binding Path=Page.CustomPathStyle, RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type local:DiagramView}}}"></Setter>
        <Setter Property="Content" Value=" " />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="TopResizer" Value="{StaticResource  TopResizerThumpTemplate}"/>
        <Setter Property="LeftResizer" Value="{StaticResource LeftResizerThumpTemplate}"/>
        <Setter Property="RightResizer" Value="{StaticResource RightResizerThumpTemplate}"/>
        <Setter Property="BottomResizer" Value="{StaticResource BottomResizerThumpTemplate}"/>
        <Setter Property="TopLeftCornerResizer"  Value="{StaticResource TopLeftCornerResizerThumpTemplate}"/>
        <Setter Property="TopRightCornerResizer"  Value="{StaticResource TopRightCornerResizerThumpTemplate}"/>
        <Setter Property="BottomLeftCornerResizer"  Value="{StaticResource BottomLeftCornerResizerThumpTemplate}"/>
        <Setter Property="BottomRightCornerResizer"  Value="{StaticResource BottomRightCornerResizerThumpTemplate}"/>
        <Setter Property="MeasurementUnits" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"/>
        <!--<Setter Property="PxLogicalOffsetX">
            <Setter.Value>
                <MultiBinding>
                    <MultiBinding.Converter>
                        <local:PixelUnitConverter/>
                    </MultiBinding.Converter>
                    <MultiBinding.Bindings>
                    <Binding Path="LogicalOffsetX" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="MeasurementUnits" RelativeSource="{RelativeSource Mode=Self}"/>
                    </MultiBinding.Bindings>
                </MultiBinding>
            </Setter.Value>
        </Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Node}">

                    <Border Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" IsHitTestVisible="True" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0" >
                        <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="True">
                            <local:DragProvider x:Name="PART_DragProvider"  Opacity="0" IsHitTestVisible="True" 
                                                 MeasurementUnits="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"/>
                            <local:Resizer IsHitTestVisible="{TemplateBinding AllowResize}" x:Name="PART_Resizer"  Visibility="Collapsed"/>
                            <Path  Stretch="Fill"   Name="PART_Shape" IsHitTestVisible="false" Style="{TemplateBinding CustomPathStyle}"/>

                            <ContentPresenter  
										  Visibility="Visible" 
										  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
										  ContentSource="Content" Margin="{TemplateBinding ContentControl.Padding}" 
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                            </ContentPresenter>
                            <local:LabelEditor LabelTextDecorations="{Binding Path=LabelTextDecorations, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               EnableMultilineLabel="{Binding Path=EnableMultilineLabel, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               VerticalAlignment="{Binding Path=LabelVerticalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"  
                                               HorizontalAlignment="{Binding Path=LabelHorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               Visibility="{Binding Path=LabelVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}" 
                                               Label="{Binding Path=Label, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               Width="{Binding Path=LabelWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelTextWrapping="{Binding Path=LabelTextWrapping, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelFontSize="{Binding Path=LabelFontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelFontFamily="{Binding Path=LabelFontFamily, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelFontStyle="{Binding Path=LabelFontStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelFontWeight="{Binding Path=LabelFontWeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelTextTrimming="{Binding Path=LabelTextTrimming, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               RenderTransformOrigin="0.5,0.5"
                                               LabelForeground="{Binding Path=LabelForeground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelBackground="{Binding Path=LabelBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               LabelTextAlignment="{Binding Path=LabelTextAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               EnableLabelEdit="{Binding Path=IsLabelEditable, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"
                                               x:Name="PART_LabelEditor"  IsHitTestVisible="True"   >
                                <local:LabelEditor.LayoutTransform>
                                    <RotateTransform Angle="{Binding Path=LabelAngle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}}"/>
                                </local:LabelEditor.LayoutTransform>
                            </local:LabelEditor>
                            <local:Rotator x:Name="PART_Rotator"   Visibility="Collapsed" IsHitTestVisible="True"/>
                            <ItemsControl ItemsSource="{Binding Path=Ports, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}}" x:Name="PART_PortItems" Visibility="Collapsed">

                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <!--<local:RotateOriginPointer   VerticalAlignment="Center" x:Name="PART_RotateOrigin" Visibility="Collapsed"  HorizontalAlignment="Center"  Style="{StaticResource RotateOriginDecorator}"/>-->
                            <Border BorderThickness="2" Name="PART_ConectorOver" Visibility="Collapsed" IsHitTestVisible="False" BorderBrush="Red" Background="Transparent" />
                            <local:Gripper Style="{Binding Path=GripperStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"  
                                           Visibility="{Binding Path=GripperVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Node}}, Mode=TwoWay}"   
                                           MeasurementUnits="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"
                                           IsHitTestVisible="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Shapes Template-->
                        <Trigger Property="Shape"  Value="Star">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 9,2 11,7 17,7 12,10 14,15 9,12 4,15 6,10 1,7 7,7 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Rectangle">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M80,80 L160,80 160,120 80,120 z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Hexagon">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M165.5,-1.50000000000001L-2.5,213 167,444 444.5,442.5 621.5,214.5 438.5,-1.50000000000002z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Octagon">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M160.329212944922,-3.01862318403769L-2.5,130.5 -5.00506481618589,311.336343115124 163.335290725089,448.012415349887 436.888368720338,448.012420654297 593,309 591.5,133.5 429.5,-1.5z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Pentagon">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M284.5,0.5L-2.49999999999999,126 132.460005030756,444 450.460016884495,442.5 586.96,127.5z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Triangle">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M198,79L77.5,278 317.5,279.5z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Ellipse">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M305.772,123.75C305.772,191.819095416645,237.434535075173,247,153.136,247C68.837464924827,247,0.5,191.819095416645,0.5,123.75C0.5,55.6809045833547,68.837464924827,0.5,153.136,0.5C237.434535075173,0.5,305.772,55.6809045833547,305.772,123.75z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Plus">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M281,41L362,41 361,160 479,160 480,241 361,240 361,360 280,360 279,241 160,240 160,160 280,160z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="RoundedRectangle">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M0.5,40.5C0.5,18.4086100067683,18.4086100067683,0.5,40.5,0.5L309.5,0.5C331.591389993232,0.5,349.5,18.4086100067683,349.5,40.5L349.5,195.5C349.5,217.591389993232,331.591389993232,235.5,309.5,235.5L40.5,235.5C18.4086100067683,235.5,0.5,217.591389993232,0.5,195.5z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="RoundedSquare">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M0.5,80.5C0.5,36.3172200135365,36.3172200135365,0.5,80.5,0.5L451.5,0.5C495.682779986463,0.5,531.5,36.3172200135365,531.5,80.5L531.5,443.5C531.5,487.682779986463,495.682779986463,523.5,451.5,523.5L80.5,523.5C36.3172200135365,523.5,0.5,487.682779986463,0.5,443.5z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="RightTriangle">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M200,200L200,397.5 397.5,399.5z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Process">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,0 H 60 V40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Start">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 10,20 A 20,20 0 1 1 50,20 A 20,20 0 1 1 10,20">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Decision">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,20 L 30 0 L 60,20 L 30,40 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Predefined">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 50,0 V 40 M 10,0 V 40 M 0 0 H 60 V 40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Heptagon">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M199.5,0.999999999999972L77.5000000000001,42.5 38.5000000000006,155 140.5,255.5 259,255.5 356.5,156.5 320.5,44z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_StoredData">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 5,0 H 60 A 40,40 0 0 0 60,40 H 5 A 40,40 0 0 1 5,0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Document">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,0 H 60 V 40 C 30,30 30,50 0,40 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Data">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 10,0 L 60 0 L 50,40 L 0,40 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_InternalStorage">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,10 H 60 M 10,0 V 40 M 0,0 H 60 V 40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_PaperTape">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,3 C 30,-7 30,13 60,3 V 37 C 30,47 30,27 0,37 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_SequentialData">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 30,40 A 20,20 0 1 1 30,0 A 20,20 0 0 1 43,35 H 50 L 50,40 Z">
                            </Setter>
                        </Trigger>

                        <Trigger Property="Shape"  Value="FlowChart_DirectData">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="F 1 M 57,40 H 3 A 4,20 0 1 1 3,0 H 57 A 4,20.1 0 1 1 56,0">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_ManualInput">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0 10 L 60,0 V 40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Card">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0 10 L 10,0 H 60 V 40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Delay">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,0 H 40 A 20,20 0 0 1 40,40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Terminator">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 20,40 A 20,20 0 0 1 20,0 H 40 A 20,20 0 0 1 40,40 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Display">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,20 A 40,40 0 0 1 15,0 H 55 A 60,60 0 0 1 55,40 H 15 A 40,40, 0 0 1 0,20 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_LoopLimit">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0 10 L 10,0 H 50 L 60,10 V 40 H 0 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Preparation">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0,20 L 10,0  H 50 L 60,20 L 50,40 H10 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_ManualOperation">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0 0 H 60 L 50 40 H 10 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_OffPageReference">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 0 0 H 60 V 20 L 30,40 L 0,20 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="FlowChart_Star">
                            <Setter  Property="Data" TargetName="PART_Shape"  Value="M 9,2 11,7 17,7 12,10 14,15 9,12 4,15 6,10 1,7 7,7 Z">
                            </Setter>
                        </Trigger>
                        <Trigger Property="Shape"  Value="Default">
                            <Setter Property="Visibility" TargetName="PART_Shape"  Value="Collapsed">
                            </Setter>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"/>
                                <Condition Value="{x:Static sys:Guid.Empty}" Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentID}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Resizer" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Rotator" Property="Visibility" Value="Visible"/>
                            <!--<Setter TargetName="PART_RotateOrigin" Property="Visibility" Value="Visible"/>-->

                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition  Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}"/>
                                <Condition Value="Visible" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortVisibility}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <Trigger Property="PortVisibility"  Value="Visible">
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition  Value="Visible" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortVisibility}"/>
                                <Condition Value="Collapsed" Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:DiagramView}},Path=PortVisibility}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition  Value="Collapsed" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortVisibility}"/>
                                <Condition Value="Visible" Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:DiagramView}},Path=PortVisibility}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition  Value="Visible" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortVisibility}"/>
                                <Condition Value="Visible" Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:DiagramView}},Path=PortVisibility}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition  Value="Collapsed" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortVisibility}"/>
                                <Condition Value="Collapsed" Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:DiagramView}},Path=PortVisibility}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsPortEnabled}"/>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"/>
                                <Condition Value="Visible" Binding="{Binding RelativeSource={RelativeSource Self},Path=PortVisibility}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="False" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsPortEnabled}"/>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_PortItems" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>

                        <DataTrigger Value="Visible" Binding="{Binding RelativeSource={RelativeSource Self},Path=LabelVisibility}">
                            <Setter TargetName="PART_LabelEditor" Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <Trigger Property="IsDragConnectionOver"  Value="True">
                            <Setter Property="Visibility" TargetName="PART_ConectorOver"  Value="Visible">
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Group Default Template-->
    <Style TargetType="{x:Type local:Group}" >
        <Setter Property="TopResizer" Value="{StaticResource  TopResizerThumpTemplate}"/>
        <Setter Property="LeftResizer" Value="{StaticResource LeftResizerThumpTemplate}"/>
        <Setter Property="RightResizer" Value="{StaticResource RightResizerThumpTemplate}"/>
        <Setter Property="BottomResizer" Value="{StaticResource BottomResizerThumpTemplate}"/>
        <Setter Property="TopLeftCornerResizer"  Value="{StaticResource TopLeftCornerResizerThumpTemplate}"/>
        <Setter Property="TopRightCornerResizer"  Value="{StaticResource TopRightCornerResizerThumpTemplate}"/>
        <Setter Property="BottomLeftCornerResizer"  Value="{StaticResource BottomLeftCornerResizerThumpTemplate}"/>
        <Setter Property="BottomRightCornerResizer"  Value="{StaticResource BottomRightCornerResizerThumpTemplate}"/>
        <Setter Property="MeasurementUnits" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Group}">

                    <Border Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" IsHitTestVisible="True" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0" >
                        <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="True">
                            <local:DragProvider x:Name="PART_DragProvider1" Opacity="0" IsHitTestVisible="False" 
                                                 MeasurementUnits="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"/>
                            <local:Resizer x:Name="PART_Resizer1"  Visibility="Collapsed" IsHitTestVisible="True"/>
                            <Path  Stretch="Fill"   Name="PART_Shape1" IsHitTestVisible="false" Style="{TemplateBinding CustomPathStyle}"/>


                            <ItemsControl x:Name="Part_Presenter" ItemsSource="{TemplateBinding GroupNodes}" ItemTemplate="{TemplateBinding ItemTemplate}">
                            </ItemsControl>
                            <ContentPresenter  
										  Visibility="Visible" 
										  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
										  ContentSource="Content" Margin="{TemplateBinding ContentControl.Padding}" 
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                            </ContentPresenter>
                            <local:Rotator  x:Name="PART_Rotator1" Visibility="Collapsed" IsHitTestVisible="True"/>

                            <!--<local:RotateOriginPointer   VerticalAlignment="Center" x:Name="PART_RotateOrigin" Visibility="Collapsed"  HorizontalAlignment="Center"  Style="{StaticResource RotateOriginDecorator}"/>-->
                            <Border BorderThickness="2" x:Name="PART_ConectorOver1"  Visibility="Collapsed" IsHitTestVisible="False" BorderBrush="Red" Background="Transparent" />

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"/>
                                <Condition Value="{x:Static sys:Guid.Empty}" Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentID}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Resizer1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Rotator1" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsDragConnectionOver"  Value="True">
                            <Setter Property="Visibility" TargetName="PART_ConectorOver1"  Value="Visible">
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Group Default Template-->
    <Style TargetType="{x:Type local:Layer}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Layer}">

                    <Border Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" IsHitTestVisible="True"  Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0" >
                        <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="True">
                            <local:DragProvider x:Name="PART_DragProvider1" Opacity="0" IsHitTestVisible="True"
                                                 MeasurementUnits="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"/>
                            <!--<local:Resizer x:Name="PART_Resizer1"  Visibility="Hidden"  IsHitTestVisible="False"/>-->
                            <Path  Stretch="Fill"   Name="PART_Shape1" IsHitTestVisible="false" Style="{TemplateBinding CustomPathStyle}"/>

                            <ContentPresenter  
										  Visibility="Visible" 
										  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
										  ContentSource="Content" Margin="{TemplateBinding ContentControl.Padding}" 
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                            </ContentPresenter>
                            <!--<local:Rotator  x:Name="PART_Rotator1" Visibility="Hidden"  IsHitTestVisible="False"/>-->

                            <!--<local:RotateOriginPointer   VerticalAlignment="Center" x:Name="PART_RotateOrigin" Visibility="Collapsed"  HorizontalAlignment="Center"  Style="{StaticResource RotateOriginDecorator}"/>-->
                            <Border BorderThickness="2" x:Name="PART_ConectorOver1"  Visibility="Hidden"  IsHitTestVisible="False" BorderBrush="Red" Background="Transparent" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"/>
                                <Condition Value="{x:Static sys:Guid.Empty}" Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentID}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Resizer1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Rotator1" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>-->
                        <!--<Trigger Property="IsDragConnectionOver"  Value="True">
                            <Setter Property="Visibility" TargetName="PART_ConectorOver1"  Value="Visible">
                            </Setter>
                        </Trigger>-->
                        <Trigger Property="Background"  Value="Transparent">
                            <Setter Property="IsHitTestVisible" Value="False">
                            </Setter>
                        </Trigger>
                        <!--<DataTrigger Value="Transparent" Binding="{Binding RelativeSource={RelativeSource Self},Path=Background}">
                            <Setter TargetName="PART_DragProvider1" Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--HorizontalRuler Default Template-->
    <Style TargetType="{x:Type local:HorizontalRuler}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=ShowHorizontalRulers,Mode=TwoWay,Converter={StaticResource Booleantovisibility}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Height="{Binding RulerThickness}" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid >
                            <Grid ShowGridLines="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*"/>
                                    <ColumnDefinition Width="8*"/>
                                </Grid.ColumnDefinitions>
                                <local:TickBar Grid.ColumnSpan="2"  Grid.Row="0"  x:Name="PART_TickBar" Grid.RowSpan="2" 
                                           TickBarOrientation="Horizontal" MajorLinesStroke="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HorizontalRuler}},Path=MajorLinesStroke}"
                                           MinorLinesStroke="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HorizontalRuler}},Path=MinorLinesStroke}"
                                           
                                           LabelFontColor="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HorizontalRuler}},Path=LabelFontColor}"
                                           Interval="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:HorizontalRuler}},Path=Interval}"
                                           MinorLinesCount="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=MinorLinesPerInterval}"
                                           MeasurementUnits="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"
                                           >
                                    <local:TickBar.Height>
                                        <MultiBinding Converter="{StaticResource heighttowidthconverter}" ConverterParameter="TickBarHeight">
                                            <MultiBinding.Bindings>
                                                <Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor,AncestorType={x:Type local:HorizontalRuler}}" Mode="TwoWay"/>
                                                <Binding Path="RulerThickness" RelativeSource="{RelativeSource FindAncestor,AncestorType={x:Type local:HorizontalRuler}}"/>
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </local:TickBar.Height>
                                </local:TickBar>
                                <Border Grid.RowSpan="2" Grid.ColumnSpan="2" x:Name="PART_Marker" Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=MarkerThickness}" 
                                    HorizontalAlignment="Left" Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=MarkerBrush}"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=ShowMarker,Converter={StaticResource Booleantovisibility}}">
                                    <Border.RenderTransform>
                                        <TranslateTransform X="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=MarkerPosition}"/>
                                    </Border.RenderTransform>
                                </Border>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--VerticalRuler Default Template-->
    <Style TargetType="{x:Type local:VerticalRuler}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=ShowVerticalRulers,Mode=TwoWay,Converter={StaticResource Booleantovisibility}}"/>
        <Setter Property="BorderThickness" Value="1,1,1,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ct">
                    <Border Width="{Binding RulerThickness}" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid >
                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition  Width="9*"/>
                                    <ColumnDefinition Width="1*"/>
                                </Grid.ColumnDefinitions>

                                <local:TickBar Grid.Row="0" x:Name="PART_TickBar" Grid.Column="0"
                                           TickBarOrientation="Vertical" 
                                           MajorLinesStroke="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:VerticalRuler}},Path=MajorLinesStroke}"
                                           MinorLinesStroke="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:VerticalRuler}},Path=MinorLinesStroke}"
                                          
                                           LabelFontColor="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:VerticalRuler}},Path=LabelFontColor}"
                                           Interval="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:VerticalRuler}},Path=Interval}"
                                           MinorLinesCount="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=MinorLinesPerInterval}"
                                           MeasurementUnits="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=Page.MeasurementUnits,Mode=TwoWay}"
                                           >
                                    <local:TickBar.Width>
                                        <MultiBinding Converter="{StaticResource heighttowidthconverter}" ConverterParameter="TickBarWidth">
                                            <MultiBinding.Bindings>
                                                <Binding Path="Orientation" RelativeSource="{RelativeSource FindAncestor,AncestorType={x:Type local:VerticalRuler}}" Mode="TwoWay"/>
                                                <Binding Path="RulerThickness" RelativeSource="{RelativeSource FindAncestor,AncestorType={x:Type local:VerticalRuler}}"/>
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                            </MultiBinding.Bindings>
                                        </MultiBinding>
                                    </local:TickBar.Width>
                                </local:TickBar>
                                <Border VerticalAlignment="Top" Grid.ColumnSpan="2" x:Name="PART_Marker" Height="{Binding Path=MarkerThickness, RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}}}" Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=MarkerBrush}"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=ShowMarker,Converter={StaticResource Booleantovisibility}}">
                                    <Border.RenderTransform>
                                        <TranslateTransform Y="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=MarkerPosition}"/>
                                    </Border.RenderTransform>
                                </Border>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DiagramView Default Template-->
    <Style TargetType="{x:Type local:DiagramView}">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="FocusManager.IsFocusScope" Value="True" />
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DiagramView}">
                    <Border  Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_RulerGrid">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <ScrollViewer  x:Name="PART_ScrollViewer" Grid.Row="1" Grid.Column="1" IsDeferredScrollingEnabled="False" CanContentScroll="True" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}">
                                <local:ScrollableGrid x:Name="viewgrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{Binding ElementName=PART_Page, Path=Content.Top}"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{Binding ElementName=PART_Page, Path=Content.Left}"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.ColumnSpan="2" Grid.RowSpan="2" x:Name="PART_PageBackground" Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}}, Path=PageBackground}"/>
                                    <local:DiagramViewGrid Grid.ColumnSpan="3" Grid.RowSpan="3" x:Name="PART_Grid"/>
                                    <!--<Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>-->
                                    <!--<local:DiagramViewGrid  Name="PART_Grid"/>-->
                                    <!--<ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Page.Children}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                            <local:DiagramPage/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>-->
                                    <ContentPresenter Grid.Column="1" Grid.Row="1" x:Name="PART_Page" ContentSource="Page"  Content="{TemplateBinding Page}" />
                                </local:ScrollableGrid>
                            </ScrollViewer>
                            <Border  Name="PART_HorizontalRuler" BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=BorderBrush}" Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=Background}" BorderThickness="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalRuler}},Path=BorderThickness}" Grid.Row="0" Grid.Column="1">
                                <ContentPresenter   Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=HorizontalRuler}" />
                            </Border>
                            <Border Name="PART_VerticalRuler" BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=BorderBrush}" Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=Background}" BorderThickness="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:VerticalRuler}},Path=BorderThickness}" Grid.Row="1" Grid.Column="0">
                                <ContentPresenter   Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramView}},Path=VerticalRuler}" />
                            </Border>
                            <Border Background="WhiteSmoke" Grid.Column="0" Grid.Row="0"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DiagramControl Default Template-->
    <Style TargetType="{x:Type local:DiagramControl}">
        <!--<Setter Property="SymbolPalette" Value="{StaticResource defaultSymbolPalette}"/>-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type local:DiagramControl}">
                    <Border Grid.Column="1"  Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>


                            <Grid Grid.Column="1"  Name="ControlGrid" Background="{TemplateBinding Background}">
                                <ContentPresenter Name="CP"  ContentSource="View" />
                            </Grid>
                            <ContentPresenter Grid.Column="0" ContentSource="SymbolPalette" Content="{TemplateBinding SymbolPalette}" Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramControl}},Path=IsSymbolPaletteEnabled,Converter={StaticResource Booleantovisibility},ConverterParameter=Pallete}"/>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Fill Brushes -->
    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!-- Border Brushes -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />


    <!--Line Connection Template -->
    <Style TargetType="{x:Type local:LineConnector}" >
        <Style.Resources>
            <!-- Style for the ConnectorAdorner Vertex -->
            <Style x:Key="ConnectorAdornerVertexStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Width" Value="7"/>
                <Setter Property="Height" Value="7"/>
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform X="-3" Y="-3"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Rectangle RenderTransformOrigin="0.5,0.5" Fill="#AADCDCDC"  Stroke="DodgerBlue"  StrokeThickness="1" RadiusX="0" RadiusY="0">
                                <!--<Rectangle.RenderTransform>
                                        <RotateTransform Angle="45"/>
                                    </Rectangle.RenderTransform>-->
                            </Rectangle>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--Label Template-->
            <!-- Style for the ConnectorAdorner thumbs -->
            <Style x:Key="ConnectorAdornerThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Width" Value="14"/>
                <Setter Property="Height" Value="14"/>
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <!--<Setter Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform X="-6" Y="-6"/>
                    </Setter.Value>
                </Setter>-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Rectangle Fill="#AADCDCDC" Stroke="DodgerBlue" StrokeThickness="1" RadiusX="0" RadiusY="0"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--Label Template-->

            <DataTemplate   x:Key="labelTemplate">
                <Border >
                    <!--<ContentPresenter  Margin="2">
                    </ContentPresenter>-->
                </Border>
            </DataTemplate>

            <!-- Arrow Grid Style -->
            <Style x:Key="ArrowGridStyle" TargetType="Grid">
                <Setter Property="Width" Value="10"/>
                <Setter Property="Height" Value="10"/>
                <!--<Setter Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform X="-5" Y="-5"/>
                    </Setter.Value>
                </Setter>-->
            </Style>

        </Style.Resources>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="MeasurementUnit" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DiagramPage}},Path=MeasurementUnits}"/>
        <Setter Property="LabelTemplate" Value="{StaticResource labelTemplate}"/>
        <Setter Property="CustomPathStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="StrokeThickness" Value="{Binding Path=LineStyle.StrokeThickness, Mode=TwoWay,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Stroke" Value="{Binding Path=LineStyle.Stroke, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeStartLineCap" Value="{Binding Path=LineStyle.StrokeStartLineCap, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeEndLineCap" Value="{Binding Path=LineStyle.StrokeEndLineCap, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeLineJoin" Value="{Binding Path=LineStyle.StrokeLineJoin, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeDashArray" Value="{Binding Path=LineStyle.StrokeDashArray, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CustomHeadDecoratorStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="StrokeThickness" Value="{Binding Path=HeadDecoratorStyle.StrokeThickness, Mode=TwoWay,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Stroke" Value="{Binding Path=HeadDecoratorStyle.Stroke, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeStartLineCap" Value="{Binding Path=HeadDecoratorStyle.StrokeStartLineCap, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeEndLineCap" Value="{Binding Path=HeadDecoratorStyle.StrokeEndLineCap, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeLineJoin" Value="{Binding Path=HeadDecoratorStyle.StrokeLineJoin, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Fill" Value="{Binding Path=HeadDecoratorStyle.Fill, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Stretch" Value="Fill"/>
                    <Setter Property="Data" Value="{Binding Path=HeadDecoratorStyle.Data, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Width" Value="{Binding Path=HeadDecoratorStyle.Width, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Height" Value="{Binding Path=HeadDecoratorStyle.Height, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CustomTailDecoratorStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="StrokeThickness" Value="{Binding Path=TailDecoratorStyle.StrokeThickness, Mode=TwoWay,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Stroke" Value="{Binding Path=TailDecoratorStyle.Stroke, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeStartLineCap" Value="{Binding Path=TailDecoratorStyle.StrokeStartLineCap, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeEndLineCap" Value="{Binding Path=TailDecoratorStyle.StrokeEndLineCap, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="StrokeLineJoin" Value="{Binding Path=TailDecoratorStyle.StrokeLineJoin, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Fill" Value="{Binding Path=TailDecoratorStyle.Fill, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Data" Value="{Binding Path=TailDecoratorStyle.Data, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Width" Value="{Binding Path=TailDecoratorStyle.Width, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Height" Value="{Binding Path=TailDecoratorStyle.Height, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                    <Setter Property="Stretch" Value="Fill"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LineConnector}">
                    <Canvas>
                        <Path Name="PART_ConnectionPath"  
                              SnapsToDevicePixels="True" 
                              Data="{Binding Path=ConnectorPathGeometry,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"
                              Style="{Binding Path=CustomPathStyle, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}">
                        </Path>
                        <Grid Height="Auto" Width="Auto"
                              Canvas.Left="{Binding Path=HeadDecoratorPosition.X,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"
                              Canvas.Top="{Binding Path=HeadDecoratorPosition.Y,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}">
                            <Path Name="PART_HeadDecoratorAnchorPath"  Stretch="Fill"
                             Style="{Binding Path=CustomHeadDecoratorStyle, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform  Angle="{Binding Path=HeadDecoratorAngle,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                                        <!--<TranslateTransform X="-9" Y="-5"/>-->
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <!--<Grid.LayoutTransform>
                                <RotateTransform Angle="{Binding Path=HeadDecoratorAngle,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                            </Grid.LayoutTransform>-->
                        </Grid>
                        <Grid   Height="Auto" Width="Auto"
                              Canvas.Left="{Binding Path=TailDecoratorPosition.X,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"
                              Canvas.Top="{Binding Path=TailDecoratorPosition.Y,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}">
                            <Path Name="PART_SinkAnchorPath" Stretch="Fill"
                              Style="{Binding Path=CustomTailDecoratorStyle, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="{Binding Path=TailDecoratorAngle,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                                        <!--<TranslateTransform X="-9" Y="-5"/>-->
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <!--<Grid.LayoutTransform>
                                <RotateTransform CenterX="5" CenterY="5" Angle="{Binding Path=TailDecoratorAngle,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"/>
                            </Grid.LayoutTransform>-->

                        </Grid>
                        <Grid  Canvas.Left="{Binding Path=LabelTemplatePosition.X,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"
                               
                               Canvas.Top="{Binding Path=LabelTemplatePosition.Y,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}">
                            <!-- Width="{Binding Path=LabelTemplateDistance,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}" -->
                            <!--<ContentControl Template="{Binding Path=LabelTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"  
                                   VerticalAlignment="{Binding Path=LabelTemplateVerticalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"  
                                HorizontalAlignment="{Binding Path=LabelTemplateHorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"    >
                                <ContentControl.RenderTransform>
                                    <TranslateTransform X="5" Y="5"/>
                                </ContentControl.RenderTransform>
                            </ContentControl>-->
                            <ContentPresenter x:Name="PART_ConnectorLabelTemplateEditor"  
										  Visibility="Visible" 
										  HorizontalAlignment="{Binding Path=LabelTemplateHorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}" 
                                          VerticalAlignment="{Binding Path=LabelTemplateVerticalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}" 
										  ContentSource="Content" 
                                          Margin="{TemplateBinding ContentControl.Padding}" 
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:LineConnector}},Path=LabelTemplate,Mode=TwoWay}"
										  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                            </ContentPresenter>

                            <Grid.RenderTransform >
                                <RotateTransform Angle="{Binding Path=LabelTemplateAngle,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid   Canvas.Left="{Binding Path=LabelPosition.X,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}"
                                Canvas.Top="{Binding Path=LabelPosition.Y,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}}" 
                                
                                >

                            <local:LabelEditor x:Name="PART_ConnectorLabelEditor"
                                LabelTextDecorations="{Binding Path=LabelTextDecorations, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                VerticalAlignment="{Binding Path=LabelVerticalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"  
                                HorizontalAlignment="Left"
                                TextWidth="{Binding Path=TextWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                Visibility="{Binding Path=LabelVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"  
                                Background="{Binding Background}"   BorderThickness="{Binding BorderThickness}"    BorderBrush="{Binding BorderBrush}"
                                Label="{Binding Path=Label, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"  
                                Width="{Binding Path=LabelWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelTextWrapping="{Binding Path=LabelTextWrapping, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelForeground="{Binding Path=LabelForeground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelBackground="{Binding Path=LabelBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelFontSize="{Binding Path=LabelFontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelFontFamily="{Binding Path=LabelFontFamily, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelFontStyle="{Binding Path=LabelFontStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelFontWeight="{Binding Path=LabelFontWeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelTextTrimming="{Binding Path=LabelTextTrimming, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                EnableLabelEdit="{Binding Path=IsLabelEditable, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                LabelTextAlignment="Left"
                                IsHitTestVisible="False"
                                EnableMultilineLabel="{Binding Path=EnableMultilineLabel, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}"
                                               >
                            </local:LabelEditor>

                            <Grid.RenderTransform >
                                <RotateTransform Angle="{Binding Path=LabelAngle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LineConnector}}, Mode=TwoWay}" />

                            </Grid.RenderTransform>

                        </Grid>

                    </Canvas>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Arrow" Binding="{Binding RelativeSource={RelativeSource Self},Path=HeadDecoratorShape}">
                            <Setter TargetName="PART_HeadDecoratorAnchorPath" Property="Data" Value="M0,0 10,5 0,10 Z"/>
                        </DataTrigger>
                        <DataTrigger Value="Diamond" Binding="{Binding RelativeSource={RelativeSource Self},Path=HeadDecoratorShape}">
                            <Setter TargetName="PART_HeadDecoratorAnchorPath" Property="Data" Value="M-5,0 0,-5 5,0 0,5 Z"/>
                        </DataTrigger>
                        <DataTrigger Value="Circle" Binding="{Binding RelativeSource={RelativeSource Self},Path=HeadDecoratorShape}">
                            <Setter TargetName="PART_HeadDecoratorAnchorPath" Property="Data" Value="M5,3C5,4.10456949966159,4.10456949966159,5,3,5C1.89543050033841,5,1,4.10456949966159,1,3C1,1.89543050033841,1.89543050033841,1,3,1C4.10456949966159,1,5,1.89543050033841,5,3z"/>
                        </DataTrigger>
                        <DataTrigger Value="None" Binding="{Binding RelativeSource={RelativeSource Self},Path=HeadDecoratorShape}">
                            <Setter TargetName="PART_HeadDecoratorAnchorPath" Property="Data" Value=""/>
                        </DataTrigger>
                        <DataTrigger Value="Arrow" Binding="{Binding RelativeSource={RelativeSource Self},Path=TailDecoratorShape}">
                            <Setter TargetName="PART_SinkAnchorPath" Property="Data" Value="M0,0 10,5 0,10 Z"/>
                        </DataTrigger>
                        <DataTrigger Value="Diamond" Binding="{Binding RelativeSource={RelativeSource Self},Path=TailDecoratorShape}">
                            <Setter TargetName="PART_SinkAnchorPath" Property="Data" Value="M-5,0 0,-5 5,0 0,5 Z"/>
                        </DataTrigger>
                        <DataTrigger Value="Circle" Binding="{Binding RelativeSource={RelativeSource Self},Path=TailDecoratorShape}">
                            <Setter TargetName="PART_SinkAnchorPath" Property="Data" Value="M5,3C5,4.10456949966159,4.10456949966159,5,3,5C1.89543050033841,5,1,4.10456949966159,1,3C1,1.89543050033841,1.89543050033841,1,3,1C4.10456949966159,1,5,1.89543050033841,5,3z"/>
                        </DataTrigger>
                        <DataTrigger Value="None" Binding="{Binding RelativeSource={RelativeSource Self},Path=TailDecoratorShape}">
                            <Setter TargetName="PART_SinkAnchorPath" Property="Data" Value=""/>
                        </DataTrigger>
                        <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self},Path=IsLabelEditable}">
                            <Setter TargetName="PART_ConnectorLabelEditor" Property="IsHitTestVisible" Value="True"/>
                        </DataTrigger>
                        <DataTrigger Value="Visible" Binding="{Binding RelativeSource={RelativeSource Self},Path=LabelVisibility}">
                            <Setter TargetName="PART_ConnectorLabelEditor" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Converters-->
    <local:PalleteFilterConverter x:Key="PalleteFilterConverter"/>
    <local:FilterToRibbonButtonConverter x:Key="FilterToRibbonButtonConverter"/>
    <!--<local:TextWrappingConverter x:Key="TextWrappingConverter"/>-->

    <!--Brushes-->
    <SolidColorBrush x:Key="ItemCheckedOutsideBorderBrush" Color="Brown"/>
    <SolidColorBrush x:Key="ItemCheckedBorderBrush" Color="Chocolate"/>
    <SolidColorBrush x:Key="ItemMouseOverOuterBorderBrush" Color="Blue"/>
    <SolidColorBrush x:Key="ItemMouseOverBorderBrush" Color="CadetBlue"/>
    <SolidColorBrush x:Key="ItemMouseOverCheckedBorderBrush" Color="Green"/>
    <SolidColorBrush x:Key="ItemMouseOverCheckedOutsideBorderBrush" Color="GreenYellow"/>
    <SolidColorBrush x:Key="GroupNameForeground" Color="DarkSlateGray"/>
    <SolidColorBrush x:Key="GroupNameBackground" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="CheckerBorderBrush" Color="DarkSlateGray"/>
    <SolidColorBrush x:Key="CheckerBackground" Color="Bisque"/>
    <SolidColorBrush x:Key="CheckerTick" Color="DarkSlateGray"/>
    <SolidColorBrush x:Key="GroupNamesinPopupBackground" Color="LightSalmon"/>
    <SolidColorBrush x:Key="GroupNamesinPopupBorderBrush" Color="Gray"/>
    <SolidColorBrush x:Key="FilterNameForeground" Color="DarkSlateGray"/>
    <SolidColorBrush x:Key="FilterSelectorBackground" Color="Chocolate"/>
    <SolidColorBrush x:Key="DropDownBorderBrush" Color="Chocolate"/>
    <SolidColorBrush x:Key="FilterNameForegroundMouseOver" Color="OldLace"/>
    <SolidColorBrush x:Key="LabelTextBlockForeground" Color="OrangeRed"/>
    <SolidColorBrush x:Key="SymbolPalleteBackground" Color="Beige"/>
    <SolidColorBrush x:Key="SymbolPalleteBorderBrush" Color="Brown"/>
    <SolidColorBrush x:Key="SymbolPalleteGroupBackground" Color="Bisque"/>
    <SolidColorBrush x:Key="SymbolPalleteGroupForeground" Color="SaddleBrown"/>
    <SolidColorBrush x:Key="SymbolPalleteGroupBorderBrush" Color="Chocolate"/>
    <SolidColorBrush x:Key="PopUpBorderBrush" Color="Chocolate"/>

    <SolidColorBrush x:Key="PopupLeftColunBackgroundBrush" Color="#FFD3D3D3"/>

    <!--SymbolPalette-->
    <Style TargetType="{x:Type local:SymbolPaletteItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SymbolPaletteItem}">
                    <Border x:Name="OuterBorder" BorderThickness="1" BorderBrush="Transparent">
                        <Border     Name="PART_TrippleBorder"
                                   BorderThickness="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:SymbolPalette}}, Path=ItemBorderThickness}"
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   Background="{TemplateBinding Background}"
                                   CornerRadius="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:SymbolPalette}}, Path=ItemCornerRadius}"
                                   MinWidth="0"
                                   SnapsToDevicePixels="False"
                                Padding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:SymbolPalette}}, Path=ItemPadding}"
                                >

                            <ContentPresenter MinWidth="0" 
                              ContentSource="Content"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <Style  TargetType="{x:Type local:SymbolPaletteGroup}">
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=SymbolPaletteGroupBorderBrush,Mode=TwoWay}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=SymbolPaletteGroupForeground,Mode=TwoWay}"/>
        <!--<Setter Property="Height" Value="21"/>-->
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SymbolPaletteGroup}">
                    <Grid Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPaletteGroup}}, Path=PanelVisibility}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22" />
                            <RowDefinition  Height="*"/>
                        </Grid.RowDefinitions>

                        <Border Width="{TemplateBinding Width}"
                  Height="{TemplateBinding Height}"
                  Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=SymbolPaletteGroupBackground,Mode=TwoWay}"
                  BorderThickness="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=SymbolPaletteGroupBorderThickness,Mode=TwoWay}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Padding="7,0,0,0" Margin="1,1,1,0"></Border>
                        <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPaletteGroup}}, Path=Label}" Visibility="{TemplateBinding HeaderVisibility}" Grid.Row="0" VerticalAlignment="Center" FontWeight="bold" Margin="5"  Foreground="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=SymbolPaletteGroupForeground}" HorizontalAlignment="Left"  FontSize="13"/>
                        <ItemsPresenter Grid.Row="1" HorizontalAlignment="Left"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style  TargetType="{x:Type local:SymbolPalette}" >
        <Setter Property="Background" Value="Beige"/>
        <Setter Property="BorderBrush" Value="Brown"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="MinHeight" Value="62"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SymbolPalette}" >
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">

                                <VisualState x:Name="MouseOverAutomatic">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder1" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="Orange"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFFFE6"/>
                                        </ColorAnimationUsingKeyFrames>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFEF8E1"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCDE93"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFF6D3"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder1" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="Transparent"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFEF8E1"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCDE93"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Automatic1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFF6D3"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder1" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="Orange"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFFFE6"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder1" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD8ECFE"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="AutoBorder2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD8ECFE"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="MoreBorders">
                                <VisualState x:Name="MouseOverBorder">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFEF8E1"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCDE93"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFF6D3"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="NormalBorder">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFFFFF"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFFFFF"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFFFFF"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="MoreColors1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFFFFF"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="UpDownStates">
                                <VisualState x:Name="UpDown">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFF6D3"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD0B989"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="UpDownBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD0B989"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="UpDownBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFF6E4B4"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="UpDownBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCEFBD"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="UpDownBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCCD52"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>

                                </VisualState>
                                <VisualState x:Name="ColorMouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFF6D3"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFFDD83"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD0B989"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="UpDownBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD0B989"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="ColorBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFF6E4B4"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="ColorBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCEFBD"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="ColorBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFFCCD52"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>

                                </VisualState>

                                <VisualState x:Name="UpDownNormal">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFD3E1F0"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFBED5F4"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FFC0D4ED"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="OutBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="#FF9BB9DF"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="UpDownBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="0" Value="Transparent"/>
                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" x:Name="b" Width="Auto"  Background="{TemplateBinding Background}" >
                            <Border Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=FilterParent.SymbolPaletteBackground,Mode=TwoWay}">                               
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" >
                                <StackPanel Orientation="Vertical">
                                    <local:PalleteFilterSelector  Width="{TemplateBinding Width}" Filters="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SymbolFilters,Mode=TwoWay}"  SelectedFilter="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentFilter,Mode=TwoWay}"/>
                                    <ItemsPresenter/>
                                </StackPanel>
                                </ScrollViewer>

                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   

    <Style x:Key="GroupNamesPopupItemStyle" TargetType="{x:Type local:FilterRibbonButton}">
        <Setter Property="Height" Value="23"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FilterRibbonButton}">
                    <Grid>


                        <Border BorderThickness="0" x:Name="PART_Button"
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  Background="Transparent"
                  Width="{TemplateBinding Width}"
                  Height="{TemplateBinding Height}"
                  MinWidth="{TemplateBinding MinWidth}"
                  MaxWidth="{TemplateBinding MaxWidth}"
                  MinHeight="{TemplateBinding MinHeight}"
                  MaxHeight="{TemplateBinding MaxHeight}" 
                  Margin="{TemplateBinding Margin}" 
                  SnapsToDevicePixels="True"
                  >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="21"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>



                                <Border Name="PART_PopupLeftColumnBorder" Background="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.PopUpLeftColumnBackground,Mode=OneWay}"  Grid.Column="0">
                                    <Border Name="PART_CheckBorder" 
                                        Visibility="{Binding Path=IsSelected,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource Booleantovisibility},Mode=TwoWay}" 
                                        Width="21" Height="21"
                                        BorderThickness="1" 
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.CheckerBorderBrush,Mode=TwoWay}"  
                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.CheckerBackground,Mode=TwoWay}"  
                                        CornerRadius="2"
                                         >

                                        <Path Stroke="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.CheckerTickBrush,Mode=TwoWay}" StrokeThickness="1.4">
                                            <Path.Data>
                                                <GeometryGroup>
                                                    <LineGeometry StartPoint="6 9" EndPoint="9 16"/>
                                                    <LineGeometry StartPoint="9 16" EndPoint="13 3"/>
                                                </GeometryGroup>
                                            </Path.Data>
                                        </Path>
                                    </Border>
                                </Border>
                                <TextBlock Grid.Column="1" Margin="10,0,0,0"   Text="{TemplateBinding Label}" Foreground="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.PopUpForeground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

   


    <!--PalleteFilterSelector-->
    <Style TargetType="{x:Type local:PalleteFilterSelector}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PalleteFilterSelector}">
                    <Grid>

                        <Border Height="15" 
                    Name="PART_DropDownButton" 
                    Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=FilterSelectorBackground,Mode=TwoWay}"
                    BorderThickness="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=FilterSelectorBorderThickness,Mode=TwoWay}" 
                    BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=FilterSelectorBorderBrush,Mode=TwoWay}">

                            <StackPanel Orientation="Horizontal">
                                <TextBlock Margin="10,0,0,0" 
                           Foreground="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.FilterSelectorForeground,Mode=OneWay}"  x:Name="PART_text" 
                           FontFamily="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"
                           FontStyle="Normal"                            
                           FontSize="12"
                           VerticalAlignment="Center"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PalleteFilterSelector}},                  
                                          Path=SelectedFilter.Label}"/>
                                <Border Name="PART_DropDownBorder">
                                    <Path Fill="{TemplateBinding Foreground}"
					            HorizontalAlignment="Center"
					            VerticalAlignment="Center"
					            Data="M 0 0 L 4 4 L 8 0 Z"
					            Margin="3"/>
                                </Border>

                            </StackPanel>
                        </Border>


                        <Popup Name="PART_Popup"  
                          
                   Placement="Bottom"  
                   Focusable="False"
                   AllowsTransparency="True"
                   StaysOpen="False"
                   PopupAnimation="Fade" >


                            <Border Background="{Binding RelativeSource={RelativeSource TemplatedParent},Path=FilterParent.PopUpBackground}" BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:SymbolPalette}},Path=PopUpBorderBrush,Mode=TwoWay}"
                                    BorderThickness="0,1,1,1" Name="PART_PopupBorder">

                                <local:ButtonChecker x:Name="PART_Filters"  ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PalleteFilterSelector}},
                                                                               Path=Filters}"
                
                      CheckedButton="{Binding Mode=TwoWay,
                                          RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PalleteFilterSelector}},
                                          Converter={StaticResource FilterToRibbonButtonConverter},
                                          Path=SelectedFilter}">
                                    <local:ButtonChecker.ItemTemplate>
                                        <DataTemplate>
                                            <local:FilterRibbonButton Content="{Binding}" Style="{StaticResource GroupNamesPopupItemStyle}" Label="{Binding Label}" ClickMode="Release"/>
                                        </DataTemplate>
                                    </local:ButtonChecker.ItemTemplate>
                                </local:ButtonChecker>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    

    <!--ButtonChecker-->
    <Style TargetType="{x:Type local:ButtonChecker}">
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonChecker}">
                    <Border Background="Transparent" >
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   
    <!--HeaderDataTemplate-->
    <DataTemplate x:Key="HeaderDataTemplate" DataType="{x:Type local:LabelEditor}">
        <TextBlock Focusable="False" 
                   Text="{Binding}" 
                   TextWrapping="{Binding Path=LabelTextWrapping, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   Foreground="{Binding Path=LabelForeground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   Background="{Binding Path=LabelBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   IsHitTestVisible="True" 
                   FontSize="{Binding Path=LabelFontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   FontFamily="{Binding Path=LabelFontFamily, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   FontStyle="{Binding Path=LabelFontStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   FontWeight="{Binding Path=LabelFontWeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   TextTrimming="{Binding Path=LabelTextTrimming, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   TextAlignment="{Binding Path=LabelTextAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   TextDecorations="{Binding Path=LabelTextDecorations, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   >

        </TextBlock>
    </DataTemplate>

    <!--EditableDataTemplate-->
    <DataTemplate x:Key="EditableDataTemplate" DataType="{x:Type local:LabelEditor}">
        <TextBox  x:Name="EditableHeader" Focusable="True" IsReadOnly="False"
                  Text="{Binding Path=Label, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"   
                  TextWrapping="{Binding Path=LabelTextWrapping, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                  IsHitTestVisible="True"
                  FontSize="{Binding Path=LabelFontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                  FontFamily="{Binding Path=LabelFontFamily, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                  FontStyle="{Binding Path=LabelFontStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                  FontWeight="{Binding Path=LabelFontWeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}" 
                  TextAlignment="{Binding Path=LabelTextAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                  AcceptsReturn="{Binding Path=EnableMultilineLabel, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                  TextDecorations="{Binding Path=LabelTextDecorations, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:LabelEditor}}, Mode=TwoWay}"
                   >
        </TextBox>
    </DataTemplate>

    <!--Label Editor-->
    <Style  TargetType="{x:Type local:LabelEditor}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LabelEditor}">

                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter  x:Name="Content" Margin="0,0,0,0" TextElement.Foreground="{TemplateBinding TextElement.Foreground}"
                                          ContentSource="Label"
                                          RecognizesAccessKey="True" Content="{TemplateBinding Label}" 
                                          ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"                                           
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Top" 
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"></ContentPresenter>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding HeaderTemplate}" Value="{x:Null}">
                <Setter Property="HeaderTemplate" Value="{StaticResource HeaderDataTemplate}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:LabelEditor.IsEditing), RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="HeaderTemplate" Value="{StaticResource EditableDataTemplate}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>   
</ResourceDictionary>
