<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
 xmlns:local="clr-namespace:Syncfusion.Windows.Shared"
    xmlns:utilsOuter="clr-namespace:Syncfusion.Windows.Shared" 
    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Syncfusion.Shared.WPF;component/Controls/Clock/Themes/Brushes.xaml"/>        
    </ResourceDictionary.MergedDictionaries>

    <local:SecondsConverter x:Key="secondsConverter"/>
    <local:MinutesConverter x:Key="minutesConverter"/>
    <local:HoursConverter x:Key="hoursConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 3 L 7 0 Z</Geometry>
    <Geometry x:Key="UpArrowGeometry">M 0 3 L 3.5 0 L 7 3 Z</Geometry>

    <!--InnerClockGeneralStyle-->
    <Style x:Key="InnerClockGeneralStyle" TargetType="{x:Type FrameworkElement}">
        <Setter Property="Width" Value="{Binding Path=InnerClockGeneralWidth, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=InnerClockGeneralHeight, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>
    <!--FirstBorderFrameStyle-->
    <Style x:Key="FirstBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource ShinyRed.BorderBrushKey}" />
        <Setter Property="Width" Value="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>
 
    <!--SecondBorderFrameStyle-->
    <Style x:Key="SecondBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource ShinyRed.SecondBorderFrameBrush}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
       
    </Style>
    <!--SecondInnerBorderFrameStyle-->
    <Style x:Key="SecondInnerBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource ShinyRed.SecondInnerBorderFrameColor}" />
        <Setter Property="Width" Value="{Binding Path=SecondInnerBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=SecondInnerBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        
    </Style>
    <!--ThirdBorderFrameStyle-->
    <Style x:Key="ThirdBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource ShinyRed.ThirdBorderFrameBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ShinyRed.SecondInnerBorderFrameColor}" />
        <Setter Property="Width" Value="{Binding Path=ThirdBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=ThirdBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=InnerBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="local:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" Value="{StaticResource ShinyBlue.ThirdBorderFrameBackground}" />               
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--InnerBorderStyle-->
    <Style x:Key="InnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource ShinyRed.ClockPanelBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="{Binding Path=DialBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="local:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="BorderBrush" Value="{StaticResource ShinyBlue.ClockPanelBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
  
   

    <!--ClockPointStyle-->
    <Style x:Key="ClockPointStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Width" Value="2" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="60" />
        <Style.Triggers>
            <Trigger Property="utilsOuter:SkinStorage.VisualStyle" Value="Default">
                <Setter Property="Fill" Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
   
    <!--ClockPointLittleStyle-->
    <Style x:Key="ClockPointLittleStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Width" Value="1" />
        <Setter Property="Height" Value="3" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="60" />
        <Style.Triggers>
            <Trigger Property="utilsOuter:SkinStorage.VisualStyle" Value="Default">
                <Setter Property="Fill" Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--HourHandStyle-->
    <Style x:Key="HourHandStyle" TargetType="{x:Type Path}">
        <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandColor}" />
        <Setter Property="Fill" Value="{StaticResource ShinyRed.MinuteHandColor}" />
        <Setter Property="Data" Value="M 5,5 L 0,28 L 3.5,38 L 8,28 Z" />
        <Setter Property="Panel.ZIndex" Value="2" />
        <Setter Property="Canvas.Top" Value="27" />
        <Setter Property="Canvas.Left" Value="58" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource ShinyRed.MinuteHandMouseOverColor}" />
                <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandMouseOverColor}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedHourHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource ShinyRed.MinuteHandPressedColor}" />
                <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandPressedColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    
    <!--HourHandDefaultStyle-->
    <Style x:Key="HourHandDefaultStyle" TargetType="{x:Type Path}" BasedOn="{StaticResource HourHandStyle}">
        <Setter Property="Stroke" Value="{Binding Path=HourHandBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Fill" Value="{Binding Path=HourHandBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill"  Value="{Binding Path=HourHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                <Setter Property="Stroke" Value="{Binding Path=HourHandMouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedHourHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{Binding Path=HourHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
                <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandPressedColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--MinuteHandStyle-->
    <Style x:Key="MinuteHandStyle" TargetType="{x:Type Path}">
        <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandColor}" />
        <Setter Property="Fill" Value="{StaticResource ShinyRed.MinuteHandColor}" />
        <Setter Property="Data" Value="M 5,5 L 0,40 L 3.5,48 L 8,40 Z" />
        <Setter Property="Panel.ZIndex" Value="1" />
        <Setter Property="Canvas.Top" Value="16" />
        <Setter Property="Canvas.Left" Value="57" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource ShinyRed.MinuteHandMouseOverColor}" />
                <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandMouseOverColor}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedMinuteHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource ShinyRed.MinuteHandPressedColor}" />
                <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandPressedColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!--MinuteHandDefaultStyle-->
    <Style x:Key="MinuteHandDefaultStyle" TargetType="{x:Type Path}" BasedOn="{StaticResource MinuteHandStyle}">
        <Setter Property="Stroke" Value="{Binding Path=MinuteHandBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Fill" Value="{Binding Path=MinuteHandBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill"  Value="{Binding Path=MinuteHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                <Setter Property="Stroke" Value="{Binding Path=MinuteHandMouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedMinuteHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{Binding Path=MinuteHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
                <Setter Property="Stroke" Value="{StaticResource ShinyRed.MinuteHandPressedColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--SecondHandStyle-->
    <Style x:Key="SecondHandStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource ShinyRed.SecondHandColor}" />
        <Setter Property="Width" Value="{Binding Path=SecondHandThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=SecondHandHeight, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Panel.ZIndex" Value="3" />
        <Setter Property="Canvas.Top" Value="12" />
        <Setter Property="Canvas.Left" Value="61" />
        <Style.Triggers>
            <Trigger Property="local:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Fill" Value="{StaticResource ShinyBlue.SecondHandColor}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource ShinyRed.SecondHandMouseOverColor}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="local:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Fill" Value="{StaticResource ShinyBlue.SecondHandMouseOverColor}" />
            </MultiTrigger>           
            <DataTrigger Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource ShinyRed.SecondHandPressedColor}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=local:SkinStorage.VisualStyle, RelativeSource={RelativeSource TemplatedParent}}" Value="ShinyBlue"/>
                    <Condition Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Fill" Value="{StaticResource ShinyBlue.SecondHandPressedColor}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <!--SecondHandDefaultStyle-->
    <Style x:Key="SecondHandDefaultStyle" TargetType="{x:Type Rectangle}" BasedOn="{StaticResource SecondHandStyle}">
        <Setter Property="Fill" Value="{Binding Path=SecondHandBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{Binding Path=SecondHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{Binding Path=SecondHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--TimeTextBlockStyle-->
    <Style x:Key="TimeTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="62" />
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{StaticResource ShinyRed.TextBrushKey}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
    </Style>


    <!--TimeTextBlockSmallStyle-->
    <Style x:Key="TimeTextBlockSmallStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="{StaticResource ShinyRed.TextBrushKey}" />
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <!--ContentPresenterStyle-->
    <Style x:Key="ContentPresenterStyle" TargetType="{x:Type ContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--RectangleStyle-->
    <Style x:Key="RectangleStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="8" />
        <Setter Property="RadiusX" Value="0" />
        <Setter Property="RadiusY" Value="0" />
        <Setter Property="Fill" Value="{StaticResource ShinyRed.ButtonBackgroundBrushKey}" />
        <Style.Triggers>
            <Trigger Property="local:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Fill" Value="{StaticResource ShinyBlue.ButtonBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--PathStyle-->
    <Style x:Key="PathStyle" TargetType="{x:Type Path}">
        <Setter Property="Margin" Value="0,-3,0,-3" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="5" />
    </Style>
    <!--ArrowBorderStyle-->
    <Style x:Key="ArrowBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource ShinyRed.ArrowBorderFill}" />
    </Style>
    <!--FrameBorderStyle-->
    <Style x:Key="FrameBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{Binding Path=FrameCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=FrameBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderBrush" Value="{StaticResource ShinyRed.FirstBorderFrameColor}" />
        <Setter Property="Background" Value="{StaticResource ShinyRed.FirstBorderFrameColor}" />
        <Setter Property="Width" Value="{Binding Path=FrameWidth, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="local:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="BorderBrush" Value="{StaticResource ShinyBlue.FirstBorderFrameColor}" />
                <Setter Property="Background" Value="{StaticResource ShinyBlue.FirstBorderFrameColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    <!--FrameInnerBorderStyle-->
    <Style x:Key="FrameInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{Binding Path=FrameCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=FrameInnerBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Padding" Value="10,5,10,0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Background" Value="{Binding Path=FrameBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />

    </Style>

   
   

    <ControlTemplate x:Key="ScrollBarButtonUpTemplate.ShinyRed" TargetType="{x:Type RepeatButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Border x:Name="Border" 
                    Background="{Binding Path=AMPMSelectorButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" 
                    CornerRadius="2,2,2,2" BorderBrush="{Binding Path=AMPMSelectorButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" BorderThickness="2"/>
            <Rectangle x:Name="BackgroundAnimation"
                             Opacity="0"
                             Fill="{Binding Path=AMPMMouseOverButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
                             Stroke="{Binding Path=AMPMMouseOverButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
                             StrokeThickness="0"
                             RadiusX="1"
                             RadiusY="1"
                             Margin="2,2,2,2" />
            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" >
                <ContentPresenter.Content>
                    <Grid>
                        <Path x:Name="DecreaseArrow" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z" Fill="{Binding Path=AMPMSelectorButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                    </Grid>
                </ContentPresenter.Content>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="#777" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
                </Trigger.ExitActions>
                <Setter Property="Fill" TargetName="DecreaseArrow" Value="{Binding Path=AMPMMouseOverButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ScrollBarButtonDownTemplate.ShinyRed" TargetType="{x:Type RepeatButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Border x:Name="Border" Background="{Binding Path=AMPMSelectorButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" 
                    CornerRadius="2,2,2,2" BorderBrush="{Binding Path=AMPMSelectorButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" BorderThickness="2"/>
            <Rectangle x:Name="BackgroundAnimation"
                             Opacity="0"
                             Fill="{Binding Path=AMPMMouseOverButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
                             Stroke="{Binding Path=AMPMMouseOverButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
                             StrokeThickness="0"
                             RadiusX="1"
                             RadiusY="1"
                             Margin="2,2,2,2" />
            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" >
                <ContentPresenter.Content>
                    <Grid>
                        <Path x:Name="IncreaseArrow" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{Binding Path=AMPMSelectorButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                    </Grid>
                </ContentPresenter.Content>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="#777" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
                </Trigger.ExitActions>
                <Setter Property="Fill" TargetName="IncreaseArrow" Value="{Binding Path=AMPMMouseOverButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>

            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <DataTemplate x:Key="NinethPartTemplate.ShinyRed">
        <Canvas>
            <Rectangle Style="{StaticResource ClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="270" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
  
    <DataTemplate x:Key="TwelfthPartTemplate.ShinyRed">
        <Canvas>
            <Rectangle Style="{StaticResource ClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="0" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>

    <!--ThirdPartTemplate-->
    <DataTemplate x:Key="ThirdPartTemplate.ShinyRed">
        <Canvas>
            <Rectangle Style="{StaticResource ClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="90" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>

    <DataTemplate x:Key="SixthPartTemplate.ShinyRed">
        <Canvas>

            <Rectangle Style="{StaticResource ClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="180" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    
  
    
    <Style x:Key="CenteredEllipseStyle.ShinyRed" TargetType="{x:Type Ellipse}">
        <Setter Property="Stroke" Value="{StaticResource CenteredEllipseStroke.ShinyRed}"/>
        <Setter Property="StrokeThickness" Value="1"/>
        <Setter Property="Fill" Value="{StaticResource CenteredEllipseStroke.ShinyRed}" />
        <Setter Property="Width" Value="{Binding Path=CenteredEllipseRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=CenteredEllipseRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Panel.ZIndex" Value="4" />
        <Setter Property="Canvas.Top" Value="60" />
        <Setter Property="Canvas.Left" Value="57" />
    </Style>


    <!--ClockMainTemplate-->
    <ControlTemplate x:Key="ClockMainTemplate.ShinyRed" TargetType="{x:Type local:Clock}">
        <Border Name="FrameBorder" Background="{Binding Path=FrameInnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" BorderBrush="{Binding Path=FrameBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Style="{StaticResource FrameBorderStyle}">
            <Border Name="FrameInnerBorder" Style="{StaticResource FrameInnerBorderStyle}">
                <Grid HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                        <RowDefinition Height="30" />
                    </Grid.RowDefinitions>
                    <Border Name="FirstBorder"  BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Grid.Row="0" Grid.Column="0" Style="{StaticResource FirstBorderFrameStyle}">
                        <Border BorderThickness="0" Style="{StaticResource SecondBorderFrameStyle}" Background="{StaticResource ShinyRed.SecondBorderFrameBrush}">
                            <Border BorderThickness="5" Name="SecondBorder" Background="{Binding Path=ClockFrameBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Style="{StaticResource SecondBorderFrameStyle}">
                                <Border BorderThickness="3" Name="SecondInnerBorder" Background="{Binding Path=ClockFrameBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Style="{StaticResource SecondInnerBorderFrameStyle}">
                                    <Border Name="ThirdBorder"  BorderBrush="{Binding Path=InnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Background="{Binding Path=DialCenterBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Style="{StaticResource ThirdBorderFrameStyle}">
                                        <Border Name="InnerBorder" BorderBrush="{Binding Path=DialBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Style="{StaticResource InnerBorderStyle}"/>
                                    </Border>
                                </Border>
                            </Border>
                        </Border>
                    </Border>

                    <Canvas Style="{StaticResource InnerClockGeneralStyle}" FlowDirection="LeftToRight">
                        <Ellipse Name="CenteredEllipse" Fill="{Binding Path=CenterCircleBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Style="{StaticResource CenteredEllipseStyle.ShinyRed}" />
                        <!--<ContentPresenter ContentTemplate="{StaticResource FirstPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource SecondPartTemplate}"/>-->
                        <ContentPresenter ContentTemplate="{StaticResource ThirdPartTemplate.ShinyRed}"/>
                        <!--<ContentPresenter ContentTemplate="{StaticResource FourthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource FifthPartTemplate}"/>-->
                        <ContentPresenter ContentTemplate="{StaticResource SixthPartTemplate.ShinyRed}"/>
                        <!--<ContentPresenter ContentTemplate="{StaticResource SeventhPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource EighthPartTemplate}"/>-->
                        <ContentPresenter ContentTemplate="{StaticResource NinethPartTemplate.ShinyRed}"/>
                        <!--<ContentPresenter ContentTemplate="{StaticResource TenthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource EleventhPartTemplate}"/>-->
                        <ContentPresenter ContentTemplate="{StaticResource TwelfthPartTemplate.ShinyRed}"/>
                        <Path x:Name="HourHand" Style="{StaticResource HourHandDefaultStyle}">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="HourHandRotateTransform" CenterX="4" CenterY="39" Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource hoursConverter}}"></RotateTransform>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="MinuteHand" Style="{StaticResource MinuteHandDefaultStyle}">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="MinuteHandRotateTransform" CenterX="4.7" CenterY="49" Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource minutesConverter}}"></RotateTransform>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle x:Name="SecondHand" Style="{StaticResource SecondHandDefaultStyle}">
                            <Rectangle.RenderTransform>
                                <RotateTransform x:Name="SecondHandRotateTransform" CenterX="0.5" CenterY="55" Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource secondsConverter}}"></RotateTransform>
                            </Rectangle.RenderTransform>
                        </Rectangle>

                        <StackPanel Name="SmallAmPmPanel" Width="28" Panel.ZIndex="0" Canvas.Top="76" Canvas.Left="45" Visibility="{TemplateBinding IsInsideAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border Name="SmallAmPmPanelBorder"
                CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
                BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" 
                BorderBrush="{Binding Path=AMPMSelectorBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}">
                                <Grid Name="SmallAmPmPanelGrid" Background="{Binding Path=AMPMSelectorBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="16" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Name="SmallTimeTextBlock" Foreground="{Binding Path=AMPMSelectorForeground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Grid.Column="0" Style="{StaticResource TimeTextBlockSmallStyle}" Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}" />
                  <Grid Grid.Column="1" Grid.Row="0" Grid.RowSpan="3">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition />
                      <RowDefinition />
                    </Grid.RowDefinitions>
                    <RepeatButton Name="UpInnerRepeatButton" Grid.Row="0" Margin="-1,0,0,0" Width="10" Height="8" Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonUpTemplate.ShinyRed}" />
                    <RepeatButton Name="DownInnerRepeatButton" Grid.Row="1" Margin="-1,0,0,0" Width="10" Height="8" Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonDownTemplate.ShinyRed}"/>
                  </Grid>
                </Grid>
                            </Border>
                        </StackPanel>
                    </Canvas>

                    <StackPanel Name="BigAmPmPanel" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Width="90" 
                      Visibility="{TemplateBinding IsDigitalAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Border Name="BigAmPmPanelBorder"
              CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
              BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" 
              BorderBrush="{Binding Path=AMPMSelectorBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}">
                            <StackPanel Name="BigAmPmContainer" Background="{Binding Path=AMPMSelectorBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Orientation="Horizontal">
                                <TextBlock Name="TimeTextBlock" Foreground="{Binding Path=AMPMSelectorForeground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Grid.Column="0" Style="{StaticResource TimeTextBlockStyle}" Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}" />
                  <Grid Name="BigAmPmSelectorGrid" Width="16" Grid.Column="1" Grid.Row="0" Grid.RowSpan="3" >
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                        <RepeatButton Name="UpRepeatButton" Grid.Row="0" Width="15" Height="10" Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonUpTemplate.ShinyRed}" />
                        <RepeatButton Name="DownRepeatButton" Grid.Row="1" Width="15" Height="10" Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonDownTemplate.ShinyRed}" />
                  </Grid>
              </StackPanel>
                        </Border>
                    </StackPanel>
                </Grid>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="local:Clock.IsDigitalAmPmVisible" Value="False">
                <Setter TargetName="BigAmPmPanel" Property="Width" Value="75" />
            </Trigger>
            <Trigger Property="local:Clock.IsDigitalAmPmVisible" Value="True">
                <Setter TargetName="BigAmPmPanel" Property="Width" Value="90" />
            </Trigger>
            <Trigger Property="local:Clock.ClockFrameBrush" Value="Transparent">
                <Setter TargetName="SecondInnerBorder" Property="Background" Value="{StaticResource ShinyRed.SecondInnerBorderFrameColor}" />
                <Setter TargetName="SecondBorder" Property="Background" Value="{StaticResource ShinyRed.SecondBorderFrameBrush}" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Bottom">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="96" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="49" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Top">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="16" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="48" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Left">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="10" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Right">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="87" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

   
</ResourceDictionary>