<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:local="clr-namespace:Syncfusion.Windows.Shared"
    xmlns:utilsOuter="clr-namespace:Syncfusion.Windows.Shared" >
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Syncfusion.Shared.WPF;component/Controls/Clock/Themes/Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <local:SecondsConverter x:Key="secondsConverter"/>
    <local:MinutesConverter x:Key="minutesConverter"/>
    <local:HoursConverter x:Key="hoursConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 3 L 7 0 Z</Geometry>
    <Geometry x:Key="UpArrowGeometry">M 0 3 L 3.5 0 L 7 3 Z</Geometry>

    <!--InnerClockGeneralStyle-->
    <Style x:Key="InnerClockGeneralStyle" TargetType="{x:Type FrameworkElement}">
        <Setter Property="Width" Value="{Binding Path=InnerClockGeneralWidth, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=InnerClockGeneralHeight, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>
    <!--FirstBorderFrameStyle-->
    
    <Style x:Key="OrangeFirstBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource FirstBorderFrameColor.Orange}" />
        <Setter Property="Background" Value="{StaticResource ClockBackground.Orange}"/>
        <Setter Property="Width" Value="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>
    <!--SecondBorderFrameStyle-->
    <Style x:Key="SecondBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource SecondBorderFrameColor.Orange}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
       
    </Style>
    <!--SecondInnerBorderFrameStyle-->
    <Style x:Key="SecondInnerBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource SecondInnerBorderFrameColor.Orange}" />
        <Setter Property="Width" Value="{Binding Path=SecondInnerBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=SecondInnerBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
       
    </Style>
    <!--ThirdBorderFrameStyle-->
    <Style x:Key="ThirdBorderFrameStyle" TargetType="{x:Type Border}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource ThirdBorderFrameBackgroundColor.Orange}" />
        <Setter Property="BorderBrush" Value="{StaticResource ThirdBorderFrameBrushColor.Orange}" />
        <Setter Property="Width" Value="{Binding Path=ThirdBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=ThirdBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=InnerBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>
    <!--InnerBorderStyle-->
   
    <Style x:Key="OrangeInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource InnerCircleColor.Orange}" />
        <Setter Property="Width" Value="23"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="CornerRadius" Value="16" />
    </Style>
    <!--CenteredEllipseStyle-->
    <Style x:Key="CenteredEllipseStyle" TargetType="{x:Type Ellipse}">
        <Setter Property="Fill" Value="{StaticResource CenteredEllipseColor.Orange}" />
        <Setter Property="Width" Value="{Binding Path=CenteredEllipseRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=CenteredEllipseRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Panel.ZIndex" Value="4" />
        <Setter Property="Canvas.Top" Value="60" />
        <Setter Property="Canvas.Left" Value="57" />
    </Style>

    <!--ClockPointStyle-->

    <Style x:Key="OrangeClockPointStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource ClockPointColor.Orange}" />
        <Setter Property="Width" Value="4" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="60" />
    </Style>
    <Style x:Key="OrangeMainClockPointStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource MainClockPointColor.Orange}" />
        <Setter Property="Width" Value="4" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="60" />
    </Style>
    <!--ClockPointLittleStyle-->
    <Style x:Key="ClockPointLittleStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Width" Value="1" />
        <Setter Property="Height" Value="3" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="60" />
        <Style.Triggers>
            <Trigger Property="utilsOuter:SkinStorage.VisualStyle" Value="Default">
                <Setter Property="Fill" Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--HourHandStyle-->
    


    <Style x:Key="OrangeHourHandStyle" TargetType="{x:Type Path}">
        <Setter Property="Stroke" Value="{StaticResource HourHandColor.Orange}" />
        <Setter Property="Fill" Value="{StaticResource HourHandColor.Orange}" />
        <Setter Property="Data" Value="M 5,5 L 0,28 L 3.5,38 L 8,28 Z" />
        <Setter Property="Panel.ZIndex" Value="2" />
        <Setter Property="Canvas.Top" Value="27" />
        <Setter Property="Canvas.Left" Value="58" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource HourHandMouseOverColor.Orange}" />
                <Setter Property="Stroke" Value="{StaticResource HourHandMouseOverColor.Orange}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedHourHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource HourHandPressedColor.Orange}" />
                <Setter Property="Stroke" Value="{StaticResource HourHandPressedColor.Orange}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--HourHandDefaultStyle-->
    <Style x:Key="HourHandDefaultStyle" TargetType="{x:Type Path}" BasedOn="{StaticResource HourHandStyle}">
        <Setter Property="Stroke" Value="{Binding Path=HourHandBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Fill" Value="{Binding Path=HourHandBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill"  Value="{Binding Path=HourHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                <Setter Property="Stroke" Value="{Binding Path=HourHandMouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedHourHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{Binding Path=HourHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
                <Setter Property="Stroke" Value="{StaticResource HourHandPressedColor.Orange}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--MinuteHandStyle-->
  
    <Style x:Key="OrangeMinuteHandStyle" TargetType="{x:Type Path}">
        <Setter Property="Stroke" Value="{StaticResource MinuteHandColor.Orange}" />
        <Setter Property="Fill" Value="{StaticResource MinuteHandColor.Orange}" />
        <Setter Property="Data" Value="M 5,5 L 0,40 L 3.5,48 L 8,40 Z" />
        <Setter Property="Panel.ZIndex" Value="1"/>
        <Setter Property="Canvas.Top" Value="16"/>
        <Setter Property="Canvas.Left" Value="57"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource MinuteHandMouseOverColor.Orange}" />
                <Setter Property="Stroke" Value="{StaticResource MinuteHandMouseOverColor.Orange}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedMinuteHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource MinuteHandPressedColor.Orange}" />
                <Setter Property="Stroke" Value="{StaticResource MinuteHandPressedColor.Orange}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--MinuteHandDefaultStyle-->
    <Style x:Key="MinuteHandDefaultStyle" TargetType="{x:Type Path}" BasedOn="{StaticResource MinuteHandStyle}">
        <Setter Property="Stroke" Value="{Binding Path=MinuteHandBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Fill" Value="{Binding Path=MinuteHandBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill"  Value="{Binding Path=MinuteHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                <Setter Property="Stroke" Value="{Binding Path=MinuteHandMouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedMinuteHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{Binding Path=MinuteHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
                <Setter Property="Stroke" Value="{StaticResource MinuteHandPressedColor.Orange}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--SecondHandStyle-->
    <Style x:Key="SecondHandStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{StaticResource SecondHandColor.Orange}" />
        <Setter Property="Width" Value="{Binding Path=SecondHandThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Height" Value="{Binding Path=SecondHandHeight, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Panel.ZIndex" Value="3" />
        <Setter Property="Canvas.Top" Value="12" />
        <Setter Property="Canvas.Left" Value="61" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource SecondHandMouseOverColor.Orange}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource SecondHandPressedColor.Orange}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--SecondHandDefaultStyle-->
    <Style x:Key="SecondHandDefaultStyle" TargetType="{x:Type Rectangle}" BasedOn="{StaticResource SecondHandStyle}">
        <Setter Property="Fill" Value="{Binding Path=SecondHandBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{Binding Path=SecondHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" Value="True">
                <Setter Property="Fill" Value="{Binding Path=SecondHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--TimeTextBlockStyle-->
    <Style x:Key="TimeTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="62" />
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{StaticResource TextBlockForeground.Orange}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
    </Style>


    <!--TimeTextBlockSmallStyle-->
    <Style x:Key="TimeTextBlockSmallStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Foreground" Value="{StaticResource TextBlockForeground.Orange}" />
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <!--ContentPresenterStyle-->
    <Style x:Key="ContentPresenterStyle" TargetType="{x:Type ContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--RectangleStyle-->
    <!--<Style x:Key="RectangleStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="8" />
        <Setter Property="RadiusX" Value="0" />
        <Setter Property="RadiusY" Value="0" />
        <Setter Property="Fill" Value="{StaticResource Office2007Blue.RectangleStyle}" />
    </Style>-->
    <!--PathStyle-->
    <Style x:Key="PathStyle" TargetType="{x:Type Path}">
        <Setter Property="Margin" Value="0,-3,0,-3" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Canvas.Top" Value="5" />
        <Setter Property="Canvas.Left" Value="5" />
    </Style>
    <!--ArrowBorderStyle-->
    <Style x:Key="ArrowBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource ArrowBorderColor.Orange}" />
    </Style>
    <!--FrameBorderStyle-->
   
    <Style x:Key="OrangeFrameBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="3" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ClockPanelBorderColor.Orange}" />
        <Setter Property="Background" Value="{StaticResource ClockPanelInnerBorderColor.Orange}" />
        <Setter Property="Width" Value="{Binding Path=FrameWidth, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>
    <!--FrameInnerBorderStyle-->
    <Style x:Key="FrameInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{Binding Path=FrameCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="BorderThickness" Value="{Binding Path=FrameInnerBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="Padding" Value="10,5,10,0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Background" Value="{Binding Path=FrameBackground, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />

    </Style>

    <!--TwelfthPartTemplate-->
  

    <DataTemplate x:Key="OrangeTwelfthPartTemplate">
        <Canvas>
            <Rectangle Style="{StaticResource OrangeMainClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="0" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--EleventhPartTemplate-->
    
    <DataTemplate x:Key="OrangeEleventhPartTemplate">
        <Canvas>
            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="330" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>

    <!--TenthPartTemplate-->
  

    <DataTemplate x:Key="OrangeTenthPartTemplate">
        <Canvas>
            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="300" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>

    <!--NinethPartTemplate-->
    
    <DataTemplate x:Key="OrangeNinethPartTemplate">
        <Canvas>
            <Rectangle Style="{StaticResource OrangeMainClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="270" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>

    <!--EighthPartTemplate-->
   

    <DataTemplate x:Key="OrangeEighthPartTemplate">
        <Canvas>
            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="240" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--SeventhPartTemplate-->
   

    <DataTemplate x:Key="OrangeSeventhPartTemplate">
        <Canvas>

            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="210" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--SixthPartTemplate-->
    

    <DataTemplate x:Key="OrangeSixthPartTemplate">
        <Canvas>

            <Rectangle Style="{StaticResource OrangeMainClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="180" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--FifthPartTemplate-->
   
    <DataTemplate x:Key="OrangeFifthPartTemplate">
        <Canvas>

            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="150" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--FourthPartTemplate-->
    

    <DataTemplate x:Key="OrangeFourthPartTemplate">
        <Canvas>

            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="120" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--ThirdPartTemplate-->
   
    <DataTemplate x:Key="OrangeThirdPartTemplate">
        <Canvas>


            <Rectangle Style="{StaticResource OrangeMainClockPointStyle}">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="90" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--SecondPartTemplate-->
    
    <DataTemplate x:Key="OrangeSecondPartTemplate">
        <Canvas>
            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="60" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>
    <!--FirstPartTemplate-->
    
    <DataTemplate x:Key="OrangeFirstPartTemplate">
        <Canvas>

            <Rectangle Style="{StaticResource OrangeClockPointStyle}" Canvas.Left="61">
                <Rectangle.RenderTransform>
                    <RotateTransform CenterX="2" CenterY="60" Angle="30" />
                </Rectangle.RenderTransform>
            </Rectangle>
        </Canvas>
    </DataTemplate>

    <!--ScrollBarButtonDownTemplate -->
    

    <ControlTemplate x:Key="OrangeScrollBarButtonDownTemplate" TargetType="{x:Type RepeatButton}">
        <Grid FocusManager.IsFocusScope="True">
            <ContentPresenter Style="{StaticResource ContentPresenterStyle}" >
                <ContentPresenter.Content>
                    <Canvas Height="{TemplateBinding RepeatButton.Height}" Width="{TemplateBinding RepeatButton.Width}">
                        <Border Name="DownBorder" Width="7" Height="7" Background="{StaticResource ScrollDownButtonBrush.Orange}">
                        </Border>
                    </Canvas>
                </ContentPresenter.Content>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="DownBorder" Property="Background" Value="{StaticResource ScrollDownButtonBrushHover.Orange}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="DownBorder" Property="Background" Value="{StaticResource ScrollDownButtonPressedBrush.Orange}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="OrangeInsideScrollBarButtonDownTemplate" TargetType="{x:Type RepeatButton}">
        <Grid FocusManager.IsFocusScope="True">
            <Border Background="#FFF9A542">
                <ContentPresenter Style="{StaticResource ContentPresenterStyle}" >
                    <ContentPresenter.Content>
                        <Canvas Height="{TemplateBinding RepeatButton.Height}" Width="{TemplateBinding RepeatButton.Width}">
                            <Border Name="DownBorder" Margin="1,1,0,0" Width="5" Height="4" Background="{StaticResource ScrollDownButtonBrush.Orange}">
                            </Border>
                        </Canvas>
                    </ContentPresenter.Content>
                </ContentPresenter>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="DownBorder" Property="Background" Value="{StaticResource ScrollDownButtonBrushHover.Orange}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="DownBorder" Property="Background" Value="{StaticResource ScrollDownButtonPressedBrush.Orange}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--ScrollBarButtonUpTemplate -->
  

    <ControlTemplate x:Key="OrangeScrollBarButtonUpTemplate" TargetType="{x:Type RepeatButton}">
        <Grid FocusManager.IsFocusScope="True">
            <ContentPresenter Style="{StaticResource ContentPresenterStyle}" >
                <ContentPresenter.Content>
                    <Canvas Height="{TemplateBinding RepeatButton.Height}" Width="{TemplateBinding RepeatButton.Width}">
                        <Border Name="UpBorder" Height="7" Width="7" Background="{StaticResource ScrollUpButtonBrush.Orange}">
                            <!--<Rectangle Name="UpRect" Height="{TemplateBinding RepeatButton.Height}" Width="{TemplateBinding RepeatButton.Width}" Style="{StaticResource RectangleStyle}" />-->
                        </Border>
                    </Canvas>
                </ContentPresenter.Content>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="UpBorder" Property="Background" Value="{StaticResource ScrollUpButtonBrushHover.Orange}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="UpBorder" Property="Background" Value="{StaticResource ScrollUpButtonPressedBrush.Orange}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="OrangeInsideScrollBarButtonUpTemplate" TargetType="{x:Type RepeatButton}">
        <Grid FocusManager.IsFocusScope="True">
            <Border Background="#FFF9A542">
                <ContentPresenter Style="{StaticResource ContentPresenterStyle}" >
                    <ContentPresenter.Content>
                        <Canvas Height="{TemplateBinding RepeatButton.Height}" Width="{TemplateBinding RepeatButton.Width}">
                            <Border Name="UpBorder" Margin="1,2,0,0" Height="4" Width="5" Background="{StaticResource ScrollUpButtonBrush.Orange}">
                                <!--<Rectangle Name="UpRect" Height="{TemplateBinding RepeatButton.Height}" Width="{TemplateBinding RepeatButton.Width}" Style="{StaticResource RectangleStyle}" />-->
                            </Border>
                        </Canvas>
                    </ContentPresenter.Content>
                </ContentPresenter>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="UpBorder" Property="Background" Value="{StaticResource ScrollUpButtonBrushHover.Orange}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="UpBorder" Property="Background" Value="{StaticResource ScrollUpButtonPressedBrush.Orange}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--InnerBorderStyle-->
    <Style x:Key="InnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource Aero.DialBorderColor}" />
        <Setter Property="BorderThickness" Value="{Binding Path=DialBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
        <Setter Property="CornerRadius" Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
    </Style>


    <!--ClockMainTemplate-->
   

    <ControlTemplate x:Key="OrangeClockMainTemplate" TargetType="{x:Type local:Clock}">
        <Border Name="FrameBorder" Style="{StaticResource OrangeFrameBorderStyle}">
            <Border Name="FrameInnerBorder" Style="{StaticResource FrameInnerBorderStyle}">
                <Grid HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"/>
                        <RowDefinition Height="30" />
                    </Grid.RowDefinitions>
                    <Border Name="FirstBorder" Grid.Row="0" Grid.Column="0" Style="{StaticResource OrangeFirstBorderFrameStyle}">
                        <Border Style="{StaticResource SecondBorderFrameStyle}" Background="Transparent">
                            <Border Name="SecondBorder" Style="{StaticResource SecondBorderFrameStyle}">
                                <Border Name="SecondInnerBorder" Style="{StaticResource SecondInnerBorderFrameStyle}">
                                    <Border Name="ThirdBorder" Style="{StaticResource ThirdBorderFrameStyle}">
                                        <Border Style="{StaticResource OrangeInnerBorderStyle}">
                                            <!--<Border Name="InnerBorder" Style="{StaticResource InnerBorderStyle}"/>-->
                                        </Border>
                                    </Border>
                                </Border>
                            </Border>
                        </Border>
                    </Border>

                    <Canvas Style="{StaticResource InnerClockGeneralStyle}" FlowDirection="LeftToRight">
                        <Ellipse Name="CenteredEllipse" Style="{StaticResource CenteredEllipseStyle}" />
                        <ContentPresenter ContentTemplate="{StaticResource OrangeFirstPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeSecondPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeThirdPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeFourthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeFifthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeSixthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeSeventhPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeEighthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeNinethPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeTenthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeEleventhPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource OrangeTwelfthPartTemplate}"/>
                        <Path x:Name="HourHand" Style="{StaticResource OrangeHourHandStyle}">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="HourHandRotateTransform" CenterX="4" CenterY="39" Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource hoursConverter}}"></RotateTransform>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="MinuteHand" Style="{StaticResource OrangeMinuteHandStyle}">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="MinuteHandRotateTransform" CenterX="4.7" CenterY="49" Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource minutesConverter}}"></RotateTransform>
                            </Path.RenderTransform>
                        </Path>
                        <Rectangle x:Name="SecondHand" Style="{StaticResource SecondHandStyle}">
                            <Rectangle.RenderTransform>
                                <RotateTransform x:Name="SecondHandRotateTransform" CenterX="0.5" CenterY="55" Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource secondsConverter}}"></RotateTransform>
                            </Rectangle.RenderTransform>
                        </Rectangle>

                        <StackPanel Name="SmallAmPmPanel" Width="26" Panel.ZIndex="0" Canvas.Top="76" Canvas.Left="45" Visibility="{TemplateBinding IsInsideAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border Name="SmallAmPmPanelBorder"
                CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
                BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" 
                BorderBrush="{StaticResource ArrowBorderColor.Orange}">

                                <Grid Name="SmallAmPmPanelGrid" Width="26" Background="{StaticResource TextBlockBackground1.Orange}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="16" />
                                        <ColumnDefinition Width="12" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Name="SmallTimeTextBlock" Grid.Column="0" Style="{StaticResource TimeTextBlockSmallStyle}" Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Grid Grid.Column="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <RepeatButton Name="UpInnerRepeatButton" Grid.Row="0" Width="10" Height="8" Command="local:Clock.m_AMPMSelect" Template="{StaticResource OrangeInsideScrollBarButtonUpTemplate}" />
                                        <RepeatButton Name="DownInnerRepeatButton" Grid.Row="1" Width="10" Height="8" Command="local:Clock.m_AMPMSelect" Template="{StaticResource OrangeInsideScrollBarButtonDownTemplate}"/>
                                    </Grid>
                                </Grid>


                              
                            </Border>
                        </StackPanel>
                    </Canvas>

                    <StackPanel Name="BigAmPmPanel" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Width="90" 
                      Visibility="{TemplateBinding IsDigitalAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Border Name="BigAmPmPanelBorder"
              CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}"
              BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:Clock}}}" 
              BorderBrush="Transparent">
                            <StackPanel Name="BigAmPmContainer" Background="{StaticResource TextBlockBackground.Orange}" Orientation="Horizontal">
                                <TextBlock Name="TimeTextBlock" Style="{StaticResource TimeTextBlockStyle}" Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Grid Name="BigAmPmSelectorGrid" Width="16" HorizontalAlignment="Right" >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <RepeatButton Name="UpRepeatButton" Grid.Row="0" Width="15" Height="10" Margin="6,3,0,0" Command="local:Clock.m_AMPMSelect" Template="{StaticResource OrangeScrollBarButtonUpTemplate}" />
                                    <RepeatButton Name="DownRepeatButton" Grid.Row="1" Width="15" Height="10" Margin="6,0,0,0" Command="local:Clock.m_AMPMSelect" Template="{StaticResource OrangeScrollBarButtonDownTemplate}" />
                                </Grid>
                            </StackPanel>
                        </Border>
                    </StackPanel>
                </Grid>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="local:Clock.IsDigitalAmPmVisible" Value="False">
                <Setter TargetName="BigAmPmPanel" Property="Width" Value="75" />
            </Trigger>
            <Trigger Property="local:Clock.IsDigitalAmPmVisible" Value="True">
                <Setter TargetName="BigAmPmPanel" Property="Width" Value="90" />
            </Trigger>
            <Trigger Property="local:Clock.ClockFrameBrush" Value="Transparent">
                <Setter TargetName="SecondInnerBorder" Property="Background" Value="{StaticResource SecondInnerBorderFrameColor.Orange}" />
                <Setter TargetName="SecondBorder" Property="Background" Value="{StaticResource SecondBorderFrameColor.Orange}" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Bottom">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="96" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="49" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Top">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="16" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="48" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Left">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="10" />
            </Trigger>
            <Trigger Property="local:Clock.AMPMSelectorPosition" Value="Right">
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56" />
                <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="87" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>