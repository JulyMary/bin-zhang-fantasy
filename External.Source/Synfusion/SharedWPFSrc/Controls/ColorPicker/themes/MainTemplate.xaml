<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Syncfusion.Windows.Shared"
    xmlns:conv="clr-namespace:Syncfusion.Windows.Tools"
    xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Shared"
	xmlns:shared="clr-namespace:Syncfusion.Windows.Shared">

    <ResourceDictionary.MergedDictionaries>    
        <ResourceDictionary Source="/Syncfusion.Shared.WPF;component/Controls/ColorPicker/Themes/Brushes.xaml"/>
        <ResourceDictionary Source="/Syncfusion.Shared.WPF;component/Controls/ColorPicker/Themes/ShinyTemplate.xaml"/>
    </ResourceDictionary.MergedDictionaries>
  
	<conv:ValueToStringConverter x:Key="FloatToString"></conv:ValueToStringConverter>
	<conv:ColorToStringConverter x:Key="ColorToString"></conv:ColorToStringConverter>
	<conv:ColorToValueConverter x:Key="ColorToValue"></conv:ColorToValueConverter>
	<conv:ColorToBrushConverter x:Key="ColorToBrush"></conv:ColorToBrushConverter>
	<conv:ColorToWordKnownColorsConverter x:Key="ColorToWordKnownColors"></conv:ColorToWordKnownColorsConverter>
	<conv:RGBToStringConverter x:Key="RGBToString"></conv:RGBToStringConverter>
    <conv:RangedFloatToStringConverter x:Key="RangedFloatToString"></conv:RangedFloatToStringConverter>

    <PathGeometry x:Key="geometry" Figures="M0,0L3.5,4 7,0z"/>
    
	<local:ColorItemList x:Key="ColorList"/>
    <Style x:Key="ButtonStyle1" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border Background="{StaticResource ReverseBrushKey}"></Border>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                        <Rectangle x:Name="DisabledVisualElement"  RadiusX="3" RadiusY="3" IsHitTestVisible="false" Opacity="0"/>
                        <Rectangle x:Name="FocusVisualElement"  StrokeThickness="1" RadiusX="2" RadiusY="2" Margin="1,1,1,0" IsHitTestVisible="false" Opacity="0" Height="24" VerticalAlignment="Top"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

  
    <Style x:Key="LinearButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border Background="{StaticResource linear}"></Border>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                        <Rectangle x:Name="DisabledVisualElement"  RadiusX="3" RadiusY="3" IsHitTestVisible="false" Opacity="0"/>
                        <Rectangle x:Name="FocusVisualElement"  StrokeThickness="1" RadiusX="2" RadiusY="2" Margin="1,1,1,0" IsHitTestVisible="false" Opacity="0" Height="24" VerticalAlignment="Top"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

  
    
    <Style x:Key="colorNameStyle" TargetType="{x:Type StackPanel}">
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="TextBlock.Foreground" Value="White"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<DataTemplate x:Key="ColorItemTemplate">
		<StackPanel Orientation="Horizontal" Name="colorName" Style="{StaticResource colorNameStyle}">
			<Border Width="20" Height="12" BorderThickness="1" BorderBrush="Black"  Margin="1,1,3,1"
				Background="{Binding Path=Brush}">
			</Border>
			<TextBlock
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Text="{Binding Path=Name}"/>
		</StackPanel>
	</DataTemplate>

	<DrawingBrush x:Key="BrushForTransparency" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Brush="White">
					<GeometryDrawing.Geometry>
						<RectangleGeometry Rect="0,0 100,100" />
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing Brush="LightGray">
					<GeometryDrawing.Geometry>
						<GeometryGroup>
							<RectangleGeometry Rect="0,0 50,50" />
							<RectangleGeometry Rect="50,50 50,50" />
						</GeometryGroup>
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

  <ControlTemplate x:Key="ToggleDropDownButtonTemplate" TargetType="ToggleButton">
      <Border  Background="Transparent" >
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <ContentPresenter Grid.Column="0"  RecognizesAccessKey="True"
                    Content="{TemplateBinding ContentControl.Content}"
                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            
          <Border Grid.Column="1" Width="20"
                    Background="{TemplateBinding Panel.Background}"
                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                    BorderBrush="{TemplateBinding Border.BorderBrush}">
            <Viewbox  Width="7" Height="9">
                <Path Data="{StaticResource geometry}" Fill="{TemplateBinding Foreground}"/>
            </Viewbox>
          </Border>
        </Grid>
      </Border>
  </ControlTemplate>

    <ControlTemplate x:Key="OrangeToggleDropDownButtonTemplate" TargetType="ToggleButton">
        <Border  Background="Transparent" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter Grid.Column="0"  RecognizesAccessKey="True"
                    Content="{TemplateBinding ContentControl.Content}"
                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />

                <Border Grid.Column="1" Width="40"
                    Background="{TemplateBinding Panel.Background}">                  
                   
                </Border>
            </Grid>
        </Border>
    </ControlTemplate>
    
    

   

    <ControlTemplate x:Key="TogglePopupButtonTemplate" TargetType="ToggleButton">
        <Border Name="Bd"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>            

                <ContentPresenter RecognizesAccessKey="True"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
             
                    <Path Name="Arrow" StrokeThickness="2"                                 
                                  Stroke="Black"
                                  Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>                

            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger  Property="IsMouseOver" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToggleButton.Aero.Background.IsMouseOver}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.Aero.BorderBrush.IsMouseOver}"/>
            </Trigger>  
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToggleButton.Office2007Blue.Background.IsMouseOver}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.Office2007Blue.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Black"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background"  Value="{StaticResource ToggleButton.Office2007Black.Background.IsMouseOver}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.Office2007Black.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToggleButton.Office2007_Silver.Background.IsMouseOver}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.Office2007_Silver.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2003"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToggleButton.Office2003.Background.IsMouseOver}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.Office2003.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Blend"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToggleButton.Blend.Background.IsMouseOver}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.Blend.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="SyncOrange"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{StaticResource ToggleMouseOverBrushKey.Orange}"/>
                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ToggleButton.BorderBrush.IsMouseOver.Orange}"/>
            </MultiTrigger>            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ToggleDropDownButtonStyle" TargetType="ToggleButton">
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.Width" Value="Auto"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Panel.Background" Value="{StaticResource Aero.Background}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Border.BorderBrush" Value="Transparent"/>
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="Template" Value="{StaticResource ToggleDropDownButtonTemplate}"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Style.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                <Setter Property="Panel.Background" Value="{StaticResource Office2007Blue.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                <Setter Property="Panel.Background" Value="{StaticResource Office2007Black.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                <Setter Property="Panel.Background" Value="{StaticResource Office2007_Silver.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                <Setter Property="Panel.Background" Value="{StaticResource Office2003.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                <Setter Property="Panel.Background" Value="{StaticResource Blend.Background}"/>
            </Trigger>           
            <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Panel.Background" Value="{StaticResource ToggleButton.Aero.Background.IsMouseOver}"/>
        <Setter Property="Border.BorderBrush"  Value="{StaticResource ToggleButton.Aero.BorderBrush.IsMouseOver}"/>
      </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue"/>
                    <Condition Property="UIElement.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Panel.Background" Value="{StaticResource ToggleButton.Office2007Blue.Background.IsMouseOver}"/>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ToggleButton.Office2007Blue.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Black"/>
                    <Condition Property="UIElement.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Panel.Background"  Value="{StaticResource ToggleButton.Office2007Black.Background.IsMouseOver}"/>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ToggleButton.Office2007Black.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver"/>
                    <Condition Property="UIElement.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Panel.Background" Value="{StaticResource ToggleButton.Office2007_Silver.Background.IsMouseOver}"/>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ToggleButton.Office2007_Silver.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2003"/>
                    <Condition Property="UIElement.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Panel.Background" Value="{StaticResource ToggleButton.Office2003.Background.IsMouseOver}"/>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ToggleButton.Office2003.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Blend"/>
                    <Condition Property="UIElement.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Panel.Background"  Value="{StaticResource ToggleButton.Blend.Background.IsMouseOver}"/>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ToggleButton.Blend.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="SyncOrange"/>
                    <Condition Property="UIElement.IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Panel.Background" Value="{StaticResource FocusedToggleButtonBackground.Orange}"/>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ToggleButton.BorderBrush.IsMouseOver.Orange}"/>
            </MultiTrigger>
        </Style.Triggers>
  </Style>
    <Style x:Key="OrangeToggleDropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
        <Setter Property="FrameworkElement.Height" Value="Auto"/>
        <Setter Property="Panel.Background" Value="{StaticResource ToggleButtonBackground1.Orange}"/>    
        <Setter Property="UIElement.Focusable" Value="False"/>
        <Setter Property="Border.BorderBrush" Value="Transparent"/>        
        <Setter Property="Template" Value="{StaticResource OrangeToggleDropDownButtonTemplate}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" Value="{StaticResource FocusedToggleButtonBackground.Orange}"/>     
            </Trigger>
        </Style.Triggers>
    </Style>


    <PathGeometry x:Key="geometry1" Figures="M0,0 4.5,4 9,0 5.5,0 4.5,1 3.5,0z"/>

	<ControlTemplate x:Key="ColorPickerTemplate" TargetType="{x:Type local:ColorPicker}">
		<Border Name="mainBorder"
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}"
               >

			<Grid Margin="{TemplateBinding Padding}">
				<ToggleButton Grid.Column="2" 
                      Command="local:ColorPicker.M_displayPopup" 
                      Name="colorToggleButton" 
                      Style="{StaticResource ToggleDropDownButtonStyle}"
                      ClickMode="Press">
					<StackPanel Orientation="Horizontal">
						<Border Name="selectedColorRect" HorizontalAlignment="Left"                
                        Background="{TemplateBinding Color, Converter={StaticResource ColorToBrush}}"
                        Width="20" Height="22" Margin="2"/>

						<TextBlock Foreground="{TemplateBinding Foreground}"               
                        HorizontalAlignment="Left" VerticalAlignment="Center" Name="SelectedColorText"
                        Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}"/>	
                   </StackPanel>
				</ToggleButton>
        
				<Popup Name="colorEditPopup" PopupAnimation="Slide" AllowsTransparency="True"  StaysOpen="False" MinWidth="250"
					   IsOpen="{Binding ElementName= colorToggleButton, Path=IsChecked}">
					<StackPanel Background="{Binding ElementName=ColorEdit, Path=Background}">
						<local:ColorEdit Name="ColorEdit" Style="{StaticResource Aero.ColorEditStyle}" VisualizationStyle="{TemplateBinding VisualizationStyle}"/>
						<Border Name="systemColorsPanel" Visibility="Collapsed"
								DataContext="{Binding Source={StaticResource ColorList}}">
							<ComboBox Name="systemColors" DockPanel.Dock="Left" Margin="4,2,4,4"
									ItemsSource="{Binding}"
									ItemTemplate = "{StaticResource ColorItemTemplate}"
									IsSynchronizedWithCurrentItem="True" />
						</Border>
					</StackPanel>                
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                <Setter Property="Style" TargetName="ColorEdit" Value="{StaticResource Office2007Blue.ColorEditStyle}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                <Setter Property="Style" TargetName="ColorEdit" Value="{StaticResource Office2007Black.ColorEditStyle}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                <Setter Property="Style" TargetName="ColorEdit"  Value="{StaticResource Office2007Silver.ColorEditStyle}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                <Setter Property="Style" TargetName="ColorEdit" Value="{StaticResource Office2003.ColorEditStyle}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                <Setter Property="Style" TargetName="ColorEdit" Value="{StaticResource Blend.ColorEditStyle}"/>
            </Trigger>
                  
            <Trigger Property="IsMouseOver" Value="True" >
				<Setter Property="Background" TargetName="mainBorder"   Value="{StaticResource WhiteBrush}"/>
			</Trigger>
           
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Blend"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="mainBorder"  Value="{StaticResource Blend.Background}"/>
            </MultiTrigger>

            <Trigger Property="IsKeyboardFocusWithin" Value="True">
				<Setter Property="Background"  TargetName="mainBorder"  Value="{StaticResource WhiteBrush}"/>
			</Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Blend"/>
                    <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="mainBorder"  Value="{StaticResource Blend.Background}"/>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=IsColorPaletteVisible, RelativeSource={RelativeSource Self}}"
					Value="True">
				<Setter TargetName="ColorEdit" Property="BorderThickness" Value="1,1,1,0" />
				<Setter TargetName="systemColorsPanel" Property="BorderBrush" Value="{Binding ElementName=ColorEdit, Path=BorderBrush}" />
				<Setter TargetName="systemColorsPanel" Property="Visibility" Value="Visible" />
				<Setter TargetName="systemColorsPanel" Property="BorderThickness" Value="1,0,1,1" />
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

    <ControlTemplate x:Key="OrangeColorPickerTemplate" TargetType="{x:Type local:ColorPicker}">
       
            <Grid Name="mainBorder" Margin="{TemplateBinding Padding}" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel Grid.Column="0" Orientation="Horizontal" Background="{StaticResource ColorPickerPanelBackground.Orange}" >
               
                <Border Name="selectedColorRect" HorizontalAlignment="Left"                
                        Background="{TemplateBinding Color, Converter={StaticResource ColorToBrush}}"
                        Width="25" Height="20" Margin="4,2,2,2"/>

                <TextBlock                
                        HorizontalAlignment="Left" VerticalAlignment="Center" Name="SelectedColorText"
                        Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}"/>	
                   </StackPanel>
            <ToggleButton Grid.Column="1" Margin="-3,0,0,0"
                      Command="local:ColorPicker.M_displayPopup" 
                      Name="colorToggleButton" 
                      Style="{StaticResource OrangeToggleDropDownButtonStyle}"
                      ClickMode="Press">
                    
                </ToggleButton>

                <Popup Name="colorEditPopup" PopupAnimation="Slide" AllowsTransparency="True" StaysOpen="False" MinWidth="250"
					   IsOpen="{Binding ElementName= colorToggleButton, Path=IsChecked}">
                    <StackPanel Background="{Binding ElementName=ColorEdit, Path=Background}">
                        <local:ColorEdit Name="ColorEdit"  Style="{StaticResource Aero.ColorEditStyle}" VisualizationStyle="{TemplateBinding VisualizationStyle}"/>
                        <Border Name="systemColorsPanel" Visibility="Collapsed"
								DataContext="{Binding Source={StaticResource ColorList}}">
                            <ComboBox Name="systemColors" DockPanel.Dock="Left" Margin="4,2,4,4"
									ItemsSource="{Binding}"
									ItemTemplate = "{StaticResource ColorItemTemplate}"
									IsSynchronizedWithCurrentItem="True" />
                        </Border>
                    </StackPanel>
                </Popup>
            </Grid>
        
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="mainBorder"  Value="{StaticResource WhiteBrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background"  TargetName="mainBorder" Value="{StaticResource WhiteBrush}"/>
            </Trigger>
            
           
            <DataTrigger Binding="{Binding Path=IsColorPaletteVisible, RelativeSource={RelativeSource Self}}"
					Value="True" >
                <Setter TargetName="ColorEdit" Property="BorderThickness" Value="1,1,1,0" />
                <Setter TargetName="systemColorsPanel" Property="BorderBrush" Value="{Binding ElementName=ColorEdit, Path=BorderBrush}" />
                <Setter TargetName="systemColorsPanel" Property="Visibility" Value="Visible" />
                <Setter TargetName="systemColorsPanel" Property="BorderThickness" Value="1,0,1,1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
   
    <Style x:Key="ThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Polygon Points="0,18 0,14 8,8 15,14 15,18" Name="polygon" Style="{StaticResource Default.SliderPolygonStyle}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource Office2007Blue.SliderPolygonStyle}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource Office2007Black.SliderPolygonStyle}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource Office2007_Silver.SliderPolygonStyle}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource Office2003.SliderPolygonStyle}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource Blend.SliderPolygonStyle}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="SyncOrange">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource Orange.SliderPolygonStyle}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyRed">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource SliderPolygonStyle.ShinyRed}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                            <Setter Property="Style" TargetName="polygon" Value="{StaticResource SliderPolygonStyle.ShinyBlue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
       
    </Style>

    <Style x:Key="ThumbVerticalStyle" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Polygon Name="polygon" Points="0,0 0,10 10,10 15,5 10,0" Stroke="{StaticResource Aero.SliderPolygonStrokeColor}" Fill="{StaticResource Default.SliderPolygonFillColor}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                            <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource Office2007Blue.SliderPolygonStrokeColor}"/>
                            <Setter Property="Fill" TargetName="polygon" Value="{StaticResource Office2007Blue.SliderPolygonFillColor}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                            <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource Office2007Black.SliderPolygonStrokeColor}"/>
                            <Setter Property="Fill" TargetName="polygon" Value="{StaticResource Office2007Black.SliderPolygonFillColor}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                            <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource Office2007Silver.SliderPolygonStrokeColor}"/>
                            <Setter Property="Fill" TargetName="polygon" Value="{StaticResource Office2007Silver.SliderPolygonFillColor}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                            <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource Office2003.SliderPolygonStrokeColor}"/>
                            <Setter Property="Fill" TargetName="polygon" Value="{StaticResource Office2003.SliderPolygonFillColor}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                            <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource Blend.SliderPolygonStrokeColor}"/>
                            <Setter Property="Fill" TargetName="polygon" Value="{StaticResource Blend.SliderPolygonFillColor}"/>
                        </Trigger>
                        <Trigger Property="shared:SkinStorage.VisualStyle" Value="SyncOrange">
                            <Setter Property="Stroke" TargetName="polygon" Value="{StaticResource SliderThumbBorder.Orange}"/>
                            <Setter Property="Fill" TargetName="polygon" Value="{StaticResource SliderThumbBackground.Orange}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
       
	</Style>

	<Style x:Key="Slider_CustomStyle" TargetType="{x:Type Slider}">
		<Setter Property="Minimum" Value="0"/>
		<Setter Property="Maximum" Value="1"/>
		<Setter Property="IsMoveToPointEnabled" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid ClipToBounds="false">
						<Border Margin="5,4,5,4" CornerRadius="3" Background="{StaticResource BrushForTransparency}"/>
						<Border Margin="5,4,5,4"  CornerRadius="3" Background="{TemplateBinding Background}"
							BorderBrush="Black" BorderThickness="1"/>
						<Track Name="PART_Track">
							<Track.Thumb>
								<Thumb Style="{StaticResource ThumbStyle}" />
							</Track.Thumb>
						</Track>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    
    
	<Style x:Key="Slider_CustomStyleVertical" TargetType="{x:Type Slider}">
		<Setter Property="Minimum" Value="0"/>
		<Setter Property="IsMoveToPointEnabled" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid ClipToBounds="false">
						<Border Margin="5,4,5,4"  CornerRadius="3" Background="{TemplateBinding Background}"
                        BorderBrush="Black" BorderThickness="1"/>
						<Track Name="PART_Track">
							<Track.Thumb>
								<Thumb Style="{StaticResource ThumbVerticalStyle}"/>
							</Track.Thumb>
						</Track>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolTip_CustomStyle" TargetType="{x:Type ToolTip}">
		<Setter Property="Background">
			<Setter.Value>
				<SolidColorBrush>
					<SolidColorBrush.Color>
						<Color A="200"  R="255" G="255" B="255"/>
					</SolidColorBrush.Color>
				</SolidColorBrush>
			</Setter.Value>
		</Setter>
	</Style>
    
    <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBlock}">
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="Margin" Value="3,2,0,0" />
	</Style>
    
    
    <Style TargetType="{x:Type Path}" x:Key="petal">
        <Setter Property="Stroke" Value="Black" />
        <Setter Property="Fill" Value="Red" />
        
    </Style>


    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="RGBExtended">
		<Border MinWidth="250" Name="ColorEditBorder"
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
			<Grid Name="Grid" Margin="2,2,2,0">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="18"/>
					<ColumnDefinition Width="20*"/>
					<ColumnDefinition Width="24"/>
					
                    <ColumnDefinition Width="76"/> 
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="20"/>
					<RowDefinition Height="20"/>
					<RowDefinition Height="20"/>
					<RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<TextBlock Grid.Column="0" Grid.Row="0" Style="{StaticResource TextBlockStyle}" HorizontalAlignment="Left">
					R:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Red</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
				<TextBlock Grid.Column="0" Grid.Row="1" Style="{StaticResource TextBlockStyle}" HorizontalAlignment="Left">
					G:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Green</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
				<TextBlock Grid.Column="0" Grid.Row="2" Style="{StaticResource TextBlockStyle}" HorizontalAlignment="Left">
					B:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Blue</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
				<TextBlock Grid.Column="0" Name="AlphaText" Grid.Row="3" Style="{StaticResource TextBlockStyle}" Visibility="Visible" HorizontalAlignment="Left">
					A:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Alpha</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
				<Slider Grid.Column="1" Grid.Row="0"  Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundR}" Value="{Binding Path=R, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Slider Grid.Column="1" Grid.Row="1" Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundG}" Value="{Binding Path=G, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Slider Grid.Column="1" Grid.Row="2" Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundB}" Value="{Binding Path=B, RelativeSource={RelativeSource TemplatedParent}}"/>
				<Slider Grid.Column="1" Grid.Row="3" Name="AlphaSlider"   Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundA}" Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}"/>
				<TextBlock  Grid.Column="2" Grid.Row="0" Text="{local:ScRGBColorExtension R}" Margin="1,0,1,0"/>
				<TextBlock Grid.Column="2" Grid.Row="1" Text="{local:ScRGBColorExtension G}" Margin="1,0,1,0"/>
				<TextBlock Grid.Column="2" Grid.Row="2" Text="{local:ScRGBColorExtension B}" Margin="1,0,1,0"/>
				<TextBlock Grid.Column="2" Grid.Row="3" Name="AlphaValue" Visibility="Visible" Text="{local:ScRGBColorExtension A}" Margin="1,0,1,0"/>
				<Rectangle Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Fill="{StaticResource BrushForTransparency}"/>
				<Rectangle Name="ColorRect"  Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>
				<StackPanel Grid.Column="3" Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,1,5,1">
					<Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorWhite">
						<Button.Template>
							<ControlTemplate>
								<Border BorderThickness="1" BorderBrush="Black" CornerRadius="3" Background="White"/>
							</ControlTemplate>
						</Button.Template>
					</Button>
					<Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorBlack">
						<Button.Template>
							<ControlTemplate>
								<Border CornerRadius="3" Background="Black"/>
							</ControlTemplate>
						</Button.Template>
					</Button>
          <!--Background="{Binding Path=Color, RelativeSource={RelativeSource Self}, Converter={StaticResource ColorToBrush}}"-->
          <!--Visibility="{Binding Path=IsMouseCaptured, ElementName=EyeDropBorder, Converter={shared:Converter shared:BooleanToVisibilityConverterEx}, ConverterParameter=inverse}"-->
          <local:BorderEyeDrop CornerRadius="3"
					                     BorderThickness="1" 
                               BorderBrush="Gray" 
                               Width="20" 
					                     Name="EyeDropBorder">
						<Image Width="15" Height="15" Name="PART_Image"
							     VerticalAlignment="Center" HorizontalAlignment="Center"
                   Source="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropGray.png"/>
					</local:BorderEyeDrop>

				</StackPanel>
				<TextBox Grid.Column="3" Name="PART_ColorStringEditor" Grid.Row="3" Height="17" Margin="5,0,5,0" TextBlock.FontSize="10" Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" />
                <local:ColorBar Grid.Row="4" Grid.ColumnSpan="3" Name="PickerColorBar" 
                       
                        Height="20" HorizontalAlignment="Stretch"/>

                <StackPanel Grid.Column="4" Grid.Row="4" HorizontalAlignment="Center" Name="EnableSwitch"  Height="20" Orientation="Horizontal">
                    <Button Width="30" Margin="0,2,3,1" Name="Solid">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="30" Margin="0,2,2,1" Name="Gradient">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </StackPanel>
                <Border Grid.Row="5" Margin="-2,4,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" Grid.ColumnSpan="4" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>                              
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>
                               
                            </Grid>
                            
                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                            <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                            <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>                               

                            </StackPanel>
                            <Grid Grid.Row="1" Grid.ColumnSpan="2" Visibility="Visible" Name="GridPopup">
                                <StackPanel>
                                    <!--Background="{shared:SkinObject BrushBackground}"-->
                                    <!--<ToggleButton Visibility="Visible" Name="ButtonExt" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{TemplateBinding Background}" Template="{StaticResource TogglePopupButtonTemplate}" Margin="0,2,0,0" Height="14" HorizontalAlignment="Stretch">

                                    </ToggleButton>-->
                                    <Border Name="GradPopup" Background="{TemplateBinding Background}" MinWidth="249" Grid.Row="2" Visibility="Visible" Width="{TemplateBinding Width}" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                               
                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                          
                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Visibility="Visible"  Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Visibility="Visible"  Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">

                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>

                                            </Grid>
                                        </Grid>
                                    </Border>
                                </StackPanel>
                            </Grid>
                                                 
                        </Grid >
                      
                    </Grid>
                </Border>               
      </Grid>
         
        </Border>
		<ControlTemplate.Triggers>
			<Trigger SourceName="EyeDropBorder" Property="IsMouseCaptured" Value="True">
				<Setter TargetName="EyeDropBorder" Property="Color" Value="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
			<Setter TargetName="PART_Image" Property="Source" Value="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropColor.png"/>
			</Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaText" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaSlider" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaValue" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PickerColorBar" Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"/>
                <Setter Property="Grid.ColumnSpan" TargetName="PickerColorBar" Value="4"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridBorder" Property="Visibility" Value="Collapsed"></Setter>
                <Setter Property="Margin" TargetName="Grid" Value="2"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="GradPopup"/>
                <Setter Property="Visibility" Value="Visible" TargetName="LinearGrid"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GradPopup"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="LinearGrid"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="RadialGrid"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
        </ControlTemplate.Triggers>
        
	</ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="RGBPopup">
        <Border MinWidth="250" Name="ColorEditBorder"
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Name="Grid" Margin="2,2,2,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="18"/>
                    <ColumnDefinition Width="20*"/>
                    <ColumnDefinition Width="24"/>

                    <ColumnDefinition Width="76"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Column="0" Grid.Row="0" Style="{StaticResource TextBlockStyle}" HorizontalAlignment="Left">
					R:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Red</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Grid.Row="1" Style="{StaticResource TextBlockStyle}" HorizontalAlignment="Left">
					G:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Green</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Grid.Row="2" Style="{StaticResource TextBlockStyle}" HorizontalAlignment="Left">
					B:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Blue</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Name="AlphaText" Grid.Row="3" Style="{StaticResource TextBlockStyle}" Visibility="Visible" HorizontalAlignment="Left">
					A:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
							<TextBlock>Alpha</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <Slider Grid.Column="1" Grid.Row="0"  Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundR}" Value="{Binding Path=R, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="1" Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundG}" Value="{Binding Path=G, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="2" Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundB}" Value="{Binding Path=B, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="3" Name="AlphaSlider"   Style="{StaticResource Slider_CustomStyle}" Background="{TemplateBinding BackgroundA}" Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}"/>
                <TextBlock  Grid.Column="2" Grid.Row="0" Text="{local:ScRGBColorExtension R}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="1" Text="{local:ScRGBColorExtension G}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="2" Text="{local:ScRGBColorExtension B}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="3" Name="AlphaValue" Visibility="Visible" Text="{local:ScRGBColorExtension A}" Margin="1,0,1,0"/>
                <Rectangle Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Fill="{StaticResource BrushForTransparency}"/>
                <Rectangle Name="ColorRect"  Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>
                <StackPanel Grid.Column="3" Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,1,5,1">
                    <Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorWhite">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="Black" CornerRadius="3" Background="White"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorBlack">
                        <Button.Template>
                            <ControlTemplate>
                                <Border CornerRadius="3" Background="Black"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <!--Background="{Binding Path=Color, RelativeSource={RelativeSource Self}, Converter={StaticResource ColorToBrush}}"-->
                    <!--Visibility="{Binding Path=IsMouseCaptured, ElementName=EyeDropBorder, Converter={shared:Converter shared:BooleanToVisibilityConverterEx}, ConverterParameter=inverse}"-->
                    <local:BorderEyeDrop CornerRadius="3"
					                     BorderThickness="1" 
                               BorderBrush="Gray" 
                               Width="20" 
					                     Name="EyeDropBorder">
                        <Image Width="15" Height="15" Name="PART_Image"
							     VerticalAlignment="Center" HorizontalAlignment="Center"
                   Source="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropGray.png"/>
                    </local:BorderEyeDrop>

                </StackPanel>
                <TextBox Grid.Column="3" Name="PART_ColorStringEditor" Grid.Row="3" Height="17" Margin="5,0,5,0" TextBlock.FontSize="10" Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" />
                <local:ColorBar Grid.Row="4" Grid.ColumnSpan="3" Name="PickerColorBar" 
                       
                        Height="20" HorizontalAlignment="Stretch"/>

                <StackPanel Grid.Column="4" Grid.Row="4" HorizontalAlignment="Center" Name="EnableSwitch"  Height="20" Orientation="Horizontal">
                    <Button Width="30" Margin="0,2,3,1" Name="Solid">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="30" Margin="0,2,2,1" Name="Gradient">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </StackPanel>
                <Border Grid.Row="5" Margin="-2,4,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" Grid.ColumnSpan="4" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>

                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Visibility="Visible" Grid.ColumnSpan="2" Name="GridPopup">                             

                                    <!--Background="{shared:SkinObject BrushBackground}"-->
                                    <ToggleButton Name="PopButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{TemplateBinding Background}" Template="{StaticResource TogglePopupButtonTemplate}" Margin="0,2,0,0" Height="14" HorizontalAlignment="Stretch">

                                    </ToggleButton>
                                    <Popup Name="GradPopup" PopupAnimation="Slide" MinWidth="249" AllowsTransparency="True" StaysOpen="False" Width="{TemplateBinding Width}"
					   IsOpen="{Binding ElementName=PopButton, Path=IsChecked}" >

                                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                            <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                </Grid.RowDefinitions>

                                                <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition/>
                                                        <RowDefinition/>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="3.5*"/>
                                                        <ColumnDefinition Width="6.5*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Grid Grid.Column="1" Grid.Row="0">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="75"/>
                                                            <ColumnDefinition Width="75"/>
                                                        </Grid.ColumnDefinitions>

                                                        <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                        <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                    </Grid>


                                                    <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx" ></syncfusion:UpDown>
                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty" ></syncfusion:UpDown>
                                                    </StackPanel>
                                                    <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                    <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                    <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                    </StackPanel>
                                                </Grid>
                                                <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition/>
                                                        <RowDefinition/>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>

                                                    <Grid Grid.Column="1" Grid.Row="0">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="75"/>
                                                            <ColumnDefinition Width="75"/>
                                                        </Grid.ColumnDefinitions>

                                                        <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                        <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                    </Grid>

                                                    <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                    <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                    <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">

                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                    </StackPanel>
                                                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">

                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                        <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                    </StackPanel>
                                                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">
                                                        <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                        <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                    </StackPanel>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Popup>                             
                            </Grid>
                        </Grid >

                    </Grid>
                </Border>
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="EyeDropBorder" Property="IsMouseCaptured" Value="True">
                <Setter TargetName="EyeDropBorder" Property="Color" Value="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                <Setter TargetName="PART_Image" Property="Source" Value="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropColor.png"/>
            </Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaText" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaSlider" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaValue" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PickerColorBar" Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"/>
                <Setter Property="Grid.ColumnSpan" TargetName="PickerColorBar" Value="4"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridBorder" Property="Visibility" Value="Collapsed"></Setter>
                <Setter Property="Margin" TargetName="Grid" Value="2"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
               <Setter Property="IsOpen" Value="True" TargetName="GradPopup"/>                 
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGradientPropertyEnabled" Value="False"/>
                    <Condition Property="IsOpenGradientPropertyEditor" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate x:Key="ThumbTemplateKey">
        <!--<Path Stroke="Black" Fill="Blue"  Data="M0,0L0,0L-6,0L-12,6L12,6L6,0L0,0"/>-->
        <Polygon x:Name="Poly" Fill="{StaticResource Aero.ColorEditContainerBrush}" Stroke="Gray" Points="0,-5 -5,0 -5,5 5,5 5,0"></Polygon>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2007Blue.ColorEditContainerBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2007Black.ColorEditContainerBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2007Silver.ColorEditContainerBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2003.ColorEditContainerBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Blend.ColorEditContainerBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="SyncOrange">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ColorEditContainerBrush.Orange}"/>
            </Trigger>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.Aero.BorderBrush.IsMouseOver}"></Setter>
            </Trigger> 
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.Office2007Blue.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Black"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.Office2007Black.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.Office2007_Silver.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2003"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.Office2003.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Blend"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.Blend.BorderBrush.IsMouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="SyncOrange"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource ToggleButton.BorderBrush.IsMouseOver.Orange}"/>
            </MultiTrigger>

            <Trigger Property="Canvas.ZIndex" Value="1">
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Default.SliderPolygonFillColor}"></Setter>
            </Trigger> 
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue"/>
                    <Condition Property="Canvas.ZIndex" Value="1"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2007Blue.SliderPolygonFillColor}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Black"/>
                    <Condition Property="Canvas.ZIndex" Value="1"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2007Black.SliderPolygonFillColor}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver"/>
                    <Condition Property="Canvas.ZIndex" Value="1"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2007Silver.SliderPolygonFillColor}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2003"/>
                    <Condition Property="Canvas.ZIndex" Value="1"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Office2003.SliderPolygonFillColor}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Blend"/>
                    <Condition Property="Canvas.ZIndex" Value="1"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource Blend.SliderPolygonFillColor}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="SyncOrange"/>
                    <Condition Property="Canvas.ZIndex" Value="1"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Poly" Property="Fill" Value="{StaticResource SliderThumbBackground.Orange}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
        
    </ControlTemplate>

    <ControlTemplate x:Key="ThumbTemplateKey.ShinyRed">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid>
            <Polygon x:Name="Base" Points="0,-5 -5,0 -5,5 5,5 5,0" Fill="#FF000000" StrokeThickness="2"/>
            <Polygon x:Name="Background" Points="0,-5 -5,0 -5,5 5,5 5,0" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="2" />
            <Polygon x:Name="BackgroundAnimation" Points="0,-5 -5,0 -5,5 5,5 5,0" Opacity="0" Fill="{StaticResource ThumbHighlightBrushKey.ShinyRed}" Margin="2,2,2,2" StrokeThickness="0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </Trigger.EnterActions>

            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="BackgroundAnimation" Value="{StaticResource ThumbHighlightBrushKey.ShinyBlue}"/>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard1"/>
                </MultiTrigger.ExitActions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="HSVExtended">
		<Border Background="{TemplateBinding Background}" Name="ColorEditBorder"
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
			<Grid ClipToBounds="True" 
            Background="{TemplateBinding Background}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="7*"/>
					<ColumnDefinition Width="30"/>
					<ColumnDefinition Width="120"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
                    <RowDefinition />
                   <RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<Border Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Name="ColorPalitte" Background="{local:HSVBackgroundBrush Background}">
				</Border>
				<Canvas Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" ClipToBounds="True">
					<Ellipse
            Canvas.Left="{Binding Path=SelectorPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Canvas.Top="{Binding Path=SelectorPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Stroke="{Binding InvertColor, Converter={StaticResource ColorToBrush}, RelativeSource={RelativeSource TemplatedParent}}" Width="10" Height="10">
					</Ellipse>
					<Popup Name="WordKnownColorsPopup" PlacementRectangle="0,0,0,0" AllowsTransparency="True"
            HorizontalOffset="{Binding Path=WordKnownColorsPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            VerticalOffset="{Binding Path=WordKnownColorsPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            IsOpen="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
						<Border CornerRadius="2" ClipToBounds="True" BorderThickness="1" BorderBrush="Black">
							<Border.Background>
								<SolidColorBrush>
									<SolidColorBrush.Color>
										<Color A="200"  R="255" G="255" B="255"/>
									</SolidColorBrush.Color>
								</SolidColorBrush>
							</Border.Background>
							<TextBox Name="WordKnownColorsTextBox" IsReadOnly="True" BorderBrush="Transparent" Foreground="Black" Background="Transparent"
                Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}" BorderThickness="0" >
							</TextBox>
						</Border>
					</Popup>
				</Canvas>
        <Slider Grid.Column="1"
                Grid.RowSpan="2"
                Margin="5,0,0,0"
                Orientation="Vertical"
                Grid.Row="0"
                Background="{local:HSVBackgroundBrush VerticalSlider}"
                Maximum="{Binding Path=SliderMaxValueHSV, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Slider_CustomStyleVertical}"
                Value="{Binding Path=SliderValueHSV, RelativeSource={RelativeSource TemplatedParent}}"/>
                <StackPanel Grid.Column="2" Grid.Row="1" Margin="1,2,0,0" Orientation="Horizontal">
                    <TextBox  Name="PART_ColorStringEditor"                
                 Height="20" 
                 Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" >
				</TextBox>
                    <StackPanel  Name="EnableSwitch" Margin="5,0,0,2"  Height="20" Orientation="Horizontal">

                        <Button Width="20" Margin="2,2,3,1" Name="Solid">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <Button Width="20" Margin="0,2,2,1" Name="Gradient">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </StackPanel>
                </StackPanel>
                <Grid Grid.Column="2" Grid.Row="0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"/>
                        <ColumnDefinition Width="44"/>
                        <ColumnDefinition Width="16"/>
                        <ColumnDefinition Width="29"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <!--<RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>-->
                    </Grid.RowDefinitions>
                    <RadioButton Grid.Column="0" Grid.Row="1"  Foreground="{TemplateBinding Foreground}" Content="H" Name="ButtomH">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
                                <TextBlock>Hue.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="2" Content="S" Foreground="{TemplateBinding Foreground}"  Name="ButtomS">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
                                <TextBlock>Saturation.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="3" Content="V" Foreground="{TemplateBinding Foreground}"  Name="ButtomV">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
                                <TextBlock>Value/Brightness.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <TextBox Grid.Column="1" Grid.Row="1" Margin="1,1,1,1" Name="Hval"  Text="{Binding H, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="2" Margin="1,1,1,1" Name="Sval" Text="{Binding S, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="3" Margin="1,1,1,1" Name="Vval" Text="{Binding V, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Grid.Column="2" Name="AlphaLabel" Grid.Row="0" VerticalAlignment="Bottom" Height="21" HorizontalAlignment="Center">
					  A:
					  <TextBlock.ToolTip>
					    <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
						  <TextBlock>Alpha.</TextBlock>
					    </ToolTip>
					  </TextBlock.ToolTip>
				    </TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="1" HorizontalAlignment="Center">
						R:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
								<TextBlock>Red.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="2" HorizontalAlignment="Center">
						G:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
								<TextBlock>Green.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="3" HorizontalAlignment="Center">
						B:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
								<TextBlock>Blue.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBox Grid.Column="3" Grid.Row="0" Name="AlphaVal"  Text="{Binding A, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Bottom" Height="21" />
                    <TextBox Grid.Column="3" Grid.Row="1" Name="Rval" Text="{Binding R, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="2" Name="Gval"  Text="{Binding G, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="3" Name="Bval" Text="{Binding B, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <Rectangle Grid.Column="0" Grid.Row="0"  Grid.ColumnSpan="2" Margin="0,0,0,3"  Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>

                </Grid>
                <Border Grid.Row="3" Grid.ColumnSpan="3" Margin="-2,0,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,5,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Visibility="Visible" Grid.ColumnSpan="2" Name="GridPopup">
                                <StackPanel>
                                    <!--<ToggleButton Name="ButtonExt" Visibility="Visible" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{TemplateBinding Background}" Template="{StaticResource TogglePopupButtonTemplate}" Margin="0,2,0,0" Height="14" HorizontalAlignment="Stretch">

                                    </ToggleButton>-->

                                    <Border Name="GradPopup" Background="{TemplateBinding Background}" MinWidth="249" Grid.Row="2" Visibility="Visible" Width="{TemplateBinding Width}" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">

                                        <!--<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">-->
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">

                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>

                                            </Grid>
                                        </Grid>
                                    </Border>
                                </StackPanel>
                            </Grid>
                        </Grid >

                    </Grid>
                </Border>


            </Grid>
		</Border>
        <ControlTemplate.Triggers>
        <Trigger Property="IsAlphaVisible" Value="False">
            <Setter TargetName="AlphaLabel" Property="Visibility" Value="Collapsed"></Setter>
            <Setter TargetName="AlphaVal" Property="Visibility" Value="Collapsed"></Setter>      
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PART_ColorStringEditor" Property="Width" Value="115"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridGradient" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="GradPopup"/>
                <Setter Property="Visibility" Value="Visible" TargetName="LinearGrid"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GradPopup"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="LinearGrid"/>
                <Setter Property="Visibility" Value="Collapsed" TargetName="RadialGrid"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
        </ControlTemplate.Triggers>
        
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="HSVPopup">
        <Border Background="{TemplateBinding Background}" Name="ColorEditBorder"
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid ClipToBounds="True" 
            Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="7*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="120"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Border Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Name="ColorPalitte" Background="{local:HSVBackgroundBrush Background}">
                </Border>
                <Canvas Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" ClipToBounds="True">
                    <Ellipse
            Canvas.Left="{Binding Path=SelectorPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Canvas.Top="{Binding Path=SelectorPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Stroke="{Binding InvertColor, Converter={StaticResource ColorToBrush}, RelativeSource={RelativeSource TemplatedParent}}" Width="10" Height="10">
                    </Ellipse>
                    <Popup Name="WordKnownColorsPopup" PlacementRectangle="0,0,0,0" AllowsTransparency="True"
            HorizontalOffset="{Binding Path=WordKnownColorsPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            VerticalOffset="{Binding Path=WordKnownColorsPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            IsOpen="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border CornerRadius="2" ClipToBounds="True" BorderThickness="1" BorderBrush="Black">
                            <Border.Background>
                                <SolidColorBrush>
                                    <SolidColorBrush.Color>
                                        <Color A="200"  R="255" G="255" B="255"/>
                                    </SolidColorBrush.Color>
                                </SolidColorBrush>
                            </Border.Background>
                            <TextBox Name="WordKnownColorsTextBox" IsReadOnly="True" BorderBrush="Transparent" Foreground="Black" Background="Transparent"
                Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}" BorderThickness="0" >
                            </TextBox>
                        </Border>
                    </Popup>
                </Canvas>
                <Slider Grid.Column="1"
                Grid.RowSpan="2"
                Margin="5,0,0,0"
                Orientation="Vertical"
                Grid.Row="0"
                Background="{local:HSVBackgroundBrush VerticalSlider}"
                Maximum="{Binding Path=SliderMaxValueHSV, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Slider_CustomStyleVertical}"
                Value="{Binding Path=SliderValueHSV, RelativeSource={RelativeSource TemplatedParent}}"/>
                <StackPanel Grid.Column="2" Grid.Row="1" Margin="1,2,0,0" Orientation="Horizontal">
                    <TextBox  Name="PART_ColorStringEditor"                
                 Height="20" 
                 Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" >
                    </TextBox>
                    <StackPanel  Name="EnableSwitch" Margin="5,0,0,2"  Height="20" Orientation="Horizontal">

                        <Button Width="20" Margin="2,2,3,1" Name="Solid">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <Button Width="20" Margin="0,2,2,1" Name="Gradient">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </StackPanel>
                </StackPanel>
                <Grid Grid.Column="2" Grid.Row="0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"/>
                        <ColumnDefinition Width="44"/>
                        <ColumnDefinition Width="16"/>
                        <ColumnDefinition Width="29"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <!--<RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>-->
                    </Grid.RowDefinitions>
                    <RadioButton Grid.Column="0" Grid.Row="1"  Foreground="{TemplateBinding Foreground}" Content="H" Name="ButtomH">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
                                <TextBlock>Hue.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="2" Content="S" Foreground="{TemplateBinding Foreground}"  Name="ButtomS">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
                                <TextBlock>Saturation.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="3" Content="V" Foreground="{TemplateBinding Foreground}"  Name="ButtomV">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
                                <TextBlock>Value/Brightness.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <TextBox Grid.Column="1" Grid.Row="1" Margin="1,1,1,1" Name="Hval" Text="{Binding H, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="2" Margin="1,1,1,1" Name="Sval" Text="{Binding S, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="3" Margin="1,1,1,1" Name="Vval"  Text="{Binding V, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Grid.Column="2" Name="AlphaLabel" Grid.Row="0" VerticalAlignment="Bottom" Height="21" HorizontalAlignment="Center">
					  A:
					  <TextBlock.ToolTip>
					    <ToolTip Style="{StaticResource ToolTip_CustomStyle}">
						  <TextBlock>Alpha.</TextBlock>
					    </ToolTip>
					  </TextBlock.ToolTip>
				    </TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="1" HorizontalAlignment="Center">
						R:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
								<TextBlock>Red.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="2" HorizontalAlignment="Center">
						G:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
								<TextBlock>Green.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="3" HorizontalAlignment="Center">
						B:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle}">
								<TextBlock>Blue.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBox Grid.Column="3" Grid.Row="0" Name="AlphaVal"  Text="{Binding A, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Bottom" Height="21" />
                    <TextBox Grid.Column="3" Grid.Row="1" Name="Rval" Text="{Binding R, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="2" Name="Gval" Text="{Binding G, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="3" Name="Bval" Text="{Binding B, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <Rectangle Grid.Column="0" Grid.Row="0"  Grid.ColumnSpan="2" Margin="0,0,0,3"  Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>

                </Grid>
                <Border Grid.Row="3" Grid.ColumnSpan="3" Margin="-2,0,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,5,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Grid.ColumnSpan="2" Visibility="Visible" Name="GridPopup">

                                <ToggleButton Name="PopButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{StaticResource Aero.Background}" Template="{StaticResource TogglePopupButtonTemplate}" Margin="0,2,0,0" ClickMode="Press" Height="14" HorizontalAlignment="Stretch">

                                </ToggleButton>

                                <Popup Name="GradPopup" PopupAnimation="Slide" AllowsTransparency="True" MinWidth="249" StaysOpen="False" Width="{TemplateBinding Width}"
					   IsOpen="{Binding ElementName= PopButton, Path=IsChecked}" >
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">

                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>

                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid >

                    </Grid>
                </Border>


            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource Office2007Blue.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource Office2007Black.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource Office2007_Silver.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource Office2003.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource Blend.Background}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="SyncOrange">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource TextBoxBackground.Orange}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyRed">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource TextBoxBackgroundBrushKey.ShinyRed}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource TextBoxBackgroundBrushKey.ShinyRed}"/>
            </Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaLabel" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaVal" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PART_ColorStringEditor" Property="Width" Value="115"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridGradient" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="IsOpen" Value="True" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGradientPropertyEnabled" Value="False"/>
                    <Condition Property="IsOpenGradientPropertyEditor" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style x:Key="ColorEditBaseStyle" TargetType="{x:Type local:ColorEdit}">
		<Setter Property="Background" Value="{StaticResource Aero.ColorEditContainerBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource Aero.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
		<Style.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                <Setter Property="Background"  Value="{StaticResource Office2007Blue.ColorEditContainerBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2007Blue.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                <Setter Property="Background" Value="{StaticResource Office2007Black.ColorEditContainerBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2007Black.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                <Setter Property="Background" Value="{StaticResource Office2007Silver.ColorEditContainerBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2007_Silver.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                <Setter Property="Background" Value="{StaticResource Office2003.ColorEditContainerBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2003.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                <Setter Property="Background" Value="{StaticResource Blend.ColorEditContainerBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Blend.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="SyncOrange">
                <Setter Property="Background" Value="{StaticResource ColorEditContainerBrush.Orange}"/>
                <Setter Property="BorderBrush"  Value="{StaticResource BorderBrush.Orange}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush1.Orange}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyRed">
                <Setter Property="Background" Value="{StaticResource BrushBackground.ShinyRed}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
                <Setter Property="Foreground" Value="{StaticResource TextBrushKey.ShinyRed}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" Value="{StaticResource BrushBackground.ShinyBlue}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
                <Setter Property="Foreground" Value="{StaticResource TextBrushKey.ShinyRed}"/>
            </Trigger>
            <Trigger Property="VisualizationStyle" Value="RGB">
				<Setter Property="Template" Value="{StaticResource RGBPopup}"/>
                <Setter Property="ThumbTemplate" Value="{StaticResource ThumbTemplateKey}"/>
			</Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource RGBPopup.ShinyRed}"/>
                <Setter Property="ThumbTemplate" Value="{StaticResource ThumbTemplateKey.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyRed"/>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource RGBPopup.ShinyRed}"/>
                <Setter Property="ThumbTemplate" Value="{StaticResource ThumbTemplateKey.ShinyRed}"/>
            </MultiTrigger>
            <Trigger Property="VisualizationStyle" Value="HSV">
				<Setter Property="Template" Value="{StaticResource HSVPopup}"/>
                <Setter Property="ThumbTemplate" Value="{StaticResource ThumbTemplateKey}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVPopup.ShinyRed}"/>
                <Setter Property="ThumbTemplate" Value="{StaticResource ThumbTemplateKey.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyRed"/>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVPopup.ShinyRed}"/>
                <Setter Property="ThumbTemplate" Value="{StaticResource ThumbTemplateKey.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Popup"/>                   
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource RGBPopup}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Popup"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyRed"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource RGBPopup.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Popup"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource RGBPopup.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Extended"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource RGBExtended}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Extended"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyRed"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template"  Value="{StaticResource RGBExtended.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="RGB"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Extended"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template"  Value="{StaticResource RGBExtended.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Popup"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVPopup}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Popup"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyRed"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVPopup.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Popup"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVPopup.ShinyRed}"/>
            </MultiTrigger>          
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Extended"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVExtended}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Extended"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyRed"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVExtended.ShinyRed}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="VisualizationStyle" Value="HSV"/>
                    <Condition Property="GradientPropertyEditorMode" Value="Extended"/>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource HSVExtended.ShinyRed}"/>
            </MultiTrigger>
        </Style.Triggers>
	</Style>

	<Style x:Key="baseStyleColorPicker" TargetType="{x:Type local:ColorPicker}">
		<Setter Property="Template" Value="{StaticResource ColorPickerTemplate}"/>
		<Setter Property="MinWidth" Value="150"/>
		<Setter Property="Height" Value="28"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="BorderBrush" Value="{StaticResource Aero.BorderBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Background" Value="{StaticResource Aero.Background}"/>
		<Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
        <Style.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Blue">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2007Blue.BorderBrush}"/>
                <Setter Property="Background" Value="{StaticResource Office2007Blue.Background}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Black">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2007Black.BorderBrush}"/>
                <Setter Property="Background" Value="{StaticResource Office2007Black.Background}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2007Silver">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2007_Silver.BorderBrush}"/>
                <Setter Property="Background" Value="{StaticResource Office2007_Silver.Background}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Office2003">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Office2003.BorderBrush}"/>
                <Setter Property="Background" Value="{StaticResource Office2003.Background}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="Blend">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Blend.BorderBrush}"/>
                <Setter Property="Background" Value="{StaticResource Blend.Background}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="SyncOrange">
                <Setter Property="Template" Value="{StaticResource OrangeColorPickerTemplate}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushBorder.Orange}"/>
                <Setter Property="Background" Value="{StaticResource TextBoxBackground.Orange}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush.Orange}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyRed">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate.ShinyRed}"/>
                <Setter Property="BorderBrush"  Value="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
                <Setter Property="Background" Value="{StaticResource TextBoxBackgroundBrushKey.ShinyRed}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackTextBrushKey.ShinyRed}"/>
            </Trigger>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Template" Value="{StaticResource ColorPickerTemplate.ShinyRed}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyBlue}"/>
                <Setter Property="Background" Value="{StaticResource TextBoxBackgroundBrushKey.ShinyRed}"/>
                <Setter Property="Foreground" Value="{StaticResource BlackTextBrushKey.ShinyRed}"/>
            </Trigger>
        </Style.Triggers>
	</Style>

	<Style x:Key="fakeButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}"/>
			</Setter.Value>
		</Setter>
	</Style>
   
</ResourceDictionary>