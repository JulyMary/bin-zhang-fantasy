<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
 xmlns:local="clr-namespace:Syncfusion.Windows.Shared"
    xmlns:conv="clr-namespace:Syncfusion.Windows.Tools"
                    xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Shared" 
	xmlns:shared="clr-namespace:Syncfusion.Windows.Shared">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Syncfusion.Shared.WPF;component/Controls/ColorPicker/Themes/Brushes.xaml"/>        
    </ResourceDictionary.MergedDictionaries>


    <conv:ValueToStringConverter x:Key="FloatToString"></conv:ValueToStringConverter>
    <conv:ColorToStringConverter x:Key="ColorToString"></conv:ColorToStringConverter>
    <conv:ColorToValueConverter x:Key="ColorToValue"></conv:ColorToValueConverter>
    <conv:ColorToBrushConverter x:Key="ColorToBrush"></conv:ColorToBrushConverter>
    <conv:ColorToWordKnownColorsConverter x:Key="ColorToWordKnownColors"></conv:ColorToWordKnownColorsConverter>
    <conv:RGBToStringConverter x:Key="RGBToString"></conv:RGBToStringConverter>
    <conv:RangedFloatToStringConverter x:Key="RangedFloatToString"></conv:RangedFloatToStringConverter>

    <PathGeometry x:Key="geometry" Figures="M0,0L3.5,4 7,0z"/>

    <local:ColorItemList x:Key="ColorList"/>

    <Style x:Key="colorNameStyle.ShinyRed" TargetType="{x:Type StackPanel}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="ColorItemTemplate.ShinyRed">
        <StackPanel Orientation="Horizontal" Name="colorName" Style="{StaticResource colorNameStyle.ShinyRed}">
            <Border Width="20" Height="12" BorderThickness="1" BorderBrush="Black"  Margin="1,1,3,1"
				Background="{Binding Path=Brush}">
            </Border>
            <TextBlock
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Text="{Binding Path=Name}"/>
		</StackPanel>
    </DataTemplate>

    <DrawingBrush x:Key="BrushForTransparency.ShinyRed" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <ControlTemplate x:Key="TogglePopupButtonTemplate.ShinyRed" TargetType="{x:Type ToggleButton}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Border  Background="Transparent" >
            <Grid>              
                <Border x:Name="Rectangle"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}">
                    <Path Name="Arrow" StrokeThickness="2"                                 
                                  Stroke="Black"
                                  Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                </Border>
                <Border x:Name="HoverRectangle"
                    Background="{StaticResource HighlightBrushKey.ShinyRed}" Opacity="0"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{x:Null}">
                    <Path Name="Arrow1" StrokeThickness="2"                                 
                                  Stroke="Black"
                                  Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                </Border>

              

                    <ContentPresenter RecognizesAccessKey="True"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />

                  

              
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </Trigger.EnterActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="HoverRectangle"  Value="{StaticResource HighlightBrushKey.ShinyBlue}"/>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard1"/>
                </MultiTrigger.ExitActions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                </MultiTrigger.EnterActions>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="true">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

   

    <Style x:Key="ToggleDropDownButtonStyle.ShinyRed" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.MinHeight" Value="0"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
        <Setter Property="FrameworkElement.Height" Value="Auto"/>       
        <Setter Property="UIElement.Focusable" Value="False"/>      
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushKey.ShinyRed}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
        <Setter Property="BorderThickness" Value="2,2,0,2"/> 
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border  Background="Transparent" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="1" Width="20"  x:Name="Rectangle"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}">                               
                                    <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{StaticResource GlyphBrushKey.ShinyRed}" Data="M 0 0 L 4 4 L 8 0 Z" Margin="2"/>
                               
                            </Border>
                            <Border Grid.Column="1" Width="20"   x:Name="HoverRectangle"
                    Background="{StaticResource HighlightBrushKey.ShinyRed}" Opacity="0"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{x:Null}">
                                <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow1" VerticalAlignment="Center" Fill="{StaticResource GlyphBrushKey.ShinyRed}" Data="M 0 0 L 4 4 L 8 0 Z" Margin="2"/>

                            </Border>
                          
                            <ContentPresenter Grid.Column="0"  RecognizesAccessKey="True"
                    Content="{TemplateBinding ContentControl.Content}"
                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                         </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="HoverRectangle"  Value="{StaticResource HighlightBrushKey.ShinyBlue}"/>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard1"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyBlue}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ThumbStyle.ShinyRed" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushKey.ShinyRed}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Polygon x:Name="Base" Points="0,18 0,14 8,8 15,14 15,18" Fill="#FF000000" StrokeThickness="2"/>
                        <Polygon x:Name="Background" Points="0,18 0,14 8,8 15,14 15,18" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="2" />
                        <Polygon x:Name="BackgroundAnimation" Points="0,18 0,14 8,8 15,14 15,18" Opacity="0" Fill="{StaticResource ThumbHighlightBrushKey.ShinyRed}" Margin="2,2,2,2" StrokeThickness="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="BackgroundAnimation"  Value="{StaticResource ThumbHighlightBrushKey.ShinyBlue}"/>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard1"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyBlue}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThumbVerticalStyle.ShinyRed" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>

        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushKey.ShinyRed}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Polygon x:Name="Base" Points="0,0 0,10 10,10 15,5 10,0" Fill="#FF000000" StrokeThickness="2"/>
                        <Polygon x:Name="Background" Points="0,0 0,10 10,10 15,5 10,0" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="2" />
                        <Polygon x:Name="BackgroundAnimation" Points="0,0 0,10 10,10 15,5 10,0" Opacity="0" Fill="{StaticResource ThumbHighlightBrushKey.ShinyRed}" Margin="2,2,2,2" StrokeThickness="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="BackgroundAnimation"  Value="{StaticResource ThumbHighlightBrushKey.ShinyBlue}"/>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard1"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </MultiTrigger.EnterActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushKey.ShinyBlue}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
   


    <Style x:Key="Slider_CustomStyle.ShinyRed" TargetType="{x:Type Slider}">
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="1"/>
        <Setter Property="IsMoveToPointEnabled" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid ClipToBounds="false">
                        <Border Margin="5,4,5,4" CornerRadius="3" Background="{StaticResource BrushForTransparency.ShinyRed}"/>
                        <Border Margin="5,4,5,4"  CornerRadius="3" Background="{TemplateBinding Background}"
							BorderBrush="Black" BorderThickness="1"/>
                        <Track Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ThumbStyle.ShinyRed}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Slider_CustomStyleVertical.ShinyRed" TargetType="{x:Type Slider}">
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="IsMoveToPointEnabled" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid ClipToBounds="false">
                        <Border Margin="5,4,5,4"  CornerRadius="3" Background="{TemplateBinding Background}"
                        BorderBrush="Black" BorderThickness="1"/>
                        <Track Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ThumbVerticalStyle.ShinyRed}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolTip_CustomStyle.ShinyRed" TargetType="{x:Type ToolTip}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush>
                    <SolidColorBrush.Color>
                        <Color A="200"  R="255" G="255" B="255"/>
                    </SolidColorBrush.Color>
                </SolidColorBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockStyle.ShinyRed" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="3,2,0,0" />
    </Style>

    <ControlTemplate x:Key="ColorPickerTemplate.ShinyRed" TargetType="{x:Type local:ColorPicker}">
        <Border Name="mainBorder"
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">

            <Grid Margin="{TemplateBinding Padding}">
                <ToggleButton Grid.Column="2" 
                      Command="local:ColorPicker.M_displayPopup" 
                      Name="colorToggleButton" 
                      Style="{StaticResource ToggleDropDownButtonStyle.ShinyRed}"
                      ClickMode="Press">
                    <StackPanel Orientation="Horizontal">
                        <Border Name="selectedColorRect" HorizontalAlignment="Left"                
                        Background="{TemplateBinding Color, Converter={StaticResource ColorToBrush}}"
                        Width="20" Height="22" Margin="2"/>

                        <TextBlock Foreground="{TemplateBinding Foreground}"               
                        HorizontalAlignment="Left" VerticalAlignment="Center" Name="SelectedColorText"
                        Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}"/>	
                   </StackPanel>
                </ToggleButton>

                <Popup Name="colorEditPopup" PopupAnimation="Slide" AllowsTransparency="True" StaysOpen="False" MinWidth="250"
					   IsOpen="{Binding ElementName= colorToggleButton, Path=IsChecked}">
                    <StackPanel Background="{Binding ElementName=ColorEdit, Path=Background}">
                        <local:ColorEdit Name="ColorEdit" Background="{StaticResource BrushBackground.ShinyRed}" VisualizationStyle="{TemplateBinding VisualizationStyle}" BorderBrush="{StaticResource ButtonBorderBrushKey.ShinyRed}"/>
                        <Border Name="systemColorsPanel" Visibility="Collapsed"
								DataContext="{Binding Source={StaticResource ColorList}}">
                            <ComboBox Name="systemColors" DockPanel.Dock="Left" Margin="4,2,4,4"
									ItemsSource="{Binding}"
									ItemTemplate = "{StaticResource ColorItemTemplate.ShinyRed}"
									IsSynchronizedWithCurrentItem="True" />
                        </Border>
                    </StackPanel>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" TargetName="ColorEdit" Value="{StaticResource BrushBackground.ShinyBlue}"/>
                <Setter Property="BorderBrush" TargetName="ColorEdit" Value="{StaticResource ButtonBorderBrushKey.ShinyBlue}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="mainBorder"  Value="{StaticResource TextBoxHighlightBrushKey.ShinyRed}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                    <Condition  Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="mainBorder"  Value="{StaticResource TextBoxHighlightBrushKey.ShinyBlue}"/>
            </MultiTrigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush"  TargetName="mainBorder" Value="{StaticResource TextBoxHighlightBrushKey.ShinyRed}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue"/>
                    <Condition  Property="IsKeyboardFocusWithin" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="mainBorder"  Value="{StaticResource TextBoxHighlightBrushKey.ShinyBlue}"/>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=IsColorPaletteVisible, RelativeSource={RelativeSource Self}}"
					Value="True" >
                <Setter TargetName="ColorEdit" Property="BorderThickness" Value="1,1,1,0" />
                <Setter TargetName="systemColorsPanel" Property="BorderBrush" Value="{Binding ElementName=ColorEdit, Path=BorderBrush}" />
                <Setter TargetName="systemColorsPanel" Property="Visibility" Value="Visible" />
                <Setter TargetName="systemColorsPanel" Property="BorderThickness" Value="1,0,1,1" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="HSVExtended.ShinyRed">
        <Border Background="{TemplateBinding Background}" Name="ColorEditBorder"
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid ClipToBounds="True" 
            Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="7*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="120"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Border Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Name="ColorPalitte" Background="{local:HSVBackgroundBrush Background}">
                </Border>
                <Canvas Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" ClipToBounds="True">
                    <Ellipse
            Canvas.Left="{Binding Path=SelectorPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Canvas.Top="{Binding Path=SelectorPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Stroke="{Binding InvertColor, Converter={StaticResource ColorToBrush}, RelativeSource={RelativeSource TemplatedParent}}" Width="10" Height="10">
                    </Ellipse>
                    <Popup Name="WordKnownColorsPopup" PlacementRectangle="0,0,0,0" AllowsTransparency="True"
            HorizontalOffset="{Binding Path=WordKnownColorsPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            VerticalOffset="{Binding Path=WordKnownColorsPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            IsOpen="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border CornerRadius="2" ClipToBounds="True" BorderThickness="1" BorderBrush="Black">
                            <Border.Background>
                                <SolidColorBrush>
                                    <SolidColorBrush.Color>
                                        <Color A="200"  R="255" G="255" B="255"/>
                                    </SolidColorBrush.Color>
                                </SolidColorBrush>
                            </Border.Background>
                            <TextBox Name="WordKnownColorsTextBox" IsReadOnly="True" BorderBrush="Transparent" Foreground="Black" Background="Transparent"
                Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}" BorderThickness="0" >
                            </TextBox>
                        </Border>
                    </Popup>
                </Canvas>
                <Slider Grid.Column="1"
                Grid.RowSpan="2"
                Margin="5,0,0,0"
                Orientation="Vertical"
                Grid.Row="0"
                Background="{local:HSVBackgroundBrush VerticalSlider}"
                Maximum="{Binding Path=SliderMaxValueHSV, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Slider_CustomStyleVertical.ShinyRed}"
                Value="{Binding Path=SliderValueHSV, RelativeSource={RelativeSource TemplatedParent}}"/>
                <StackPanel Grid.Column="2" Grid.Row="1" Margin="1,2,0,0" Orientation="Horizontal">
                    <TextBox  Name="PART_ColorStringEditor"                
                 Height="20" 
                 Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" >
                    </TextBox>
                    <StackPanel  Name="EnableSwitch" Margin="5,0,0,2"  Height="20" Orientation="Horizontal">

                        <Button Width="20" Margin="2,2,3,1" Name="Solid">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <Button Width="20" Margin="0,2,2,1" Name="Gradient">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </StackPanel>
                </StackPanel>
                <Grid Grid.Column="2" Grid.Row="0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"/>
                        <ColumnDefinition Width="44"/>
                        <ColumnDefinition Width="16"/>
                        <ColumnDefinition Width="29"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <!--<RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>-->
                    </Grid.RowDefinitions>
                    <RadioButton Grid.Column="0" Grid.Row="1"  Foreground="{TemplateBinding Foreground}" Content="H" Name="ButtomH">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
                                <TextBlock>Hue.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="2" Content="S" Foreground="{TemplateBinding Foreground}"  Name="ButtomS">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
                                <TextBlock>Saturation.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="3" Content="V" Foreground="{TemplateBinding Foreground}"  Name="ButtomV">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
                                <TextBlock>Value/Brightness.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <TextBox Grid.Column="1" Grid.Row="1" Margin="1,1,1,1" Name="Hval"  Text="{Binding H, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="2" Margin="1,1,1,1" Name="Sval" Text="{Binding S, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="3" Margin="1,1,1,1" Name="Vval" Text="{Binding V, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Grid.Column="2" Name="AlphaLabel" Grid.Row="0" VerticalAlignment="Bottom" Height="21" HorizontalAlignment="Center">
					  A:
					  <TextBlock.ToolTip>
					    <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
						  <TextBlock>Alpha.</TextBlock>
					    </ToolTip>
					  </TextBlock.ToolTip>
				    </TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="1" HorizontalAlignment="Center">
						R:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
								<TextBlock>Red.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="2" HorizontalAlignment="Center">
						G:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
								<TextBlock>Green.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="3" HorizontalAlignment="Center">
						B:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
								<TextBlock>Blue.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBox Grid.Column="3" Grid.Row="0" Name="AlphaVal"  Text="{Binding A, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Bottom" Height="21" />
                    <TextBox Grid.Column="3" Grid.Row="1" Name="Rval" Text="{Binding R, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="2" Name="Gval"  Text="{Binding G, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="3" Name="Bval" Text="{Binding B, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <Rectangle Grid.Column="0" Grid.Row="0"  Grid.ColumnSpan="2" Margin="0,0,0,3"  Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>

                </Grid>
                <Border Grid.Row="3" Grid.ColumnSpan="3" Margin="-2,0,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,5,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Visibility="Visible" Grid.ColumnSpan="2" Name="GridPopup">
                                <StackPanel>
                                    <ToggleButton Name="ButtonExt" HorizontalAlignment="Stretch" Visibility="Visible" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{StaticResource ButtonBackgroundBrushKey.ShinyRed}" Template="{StaticResource TogglePopupButtonTemplate.ShinyRed}" Margin="0,2,0,0" Height="14" >

                                    </ToggleButton>

                                    <Border Name="GradPopup" Background="{TemplateBinding Background}" MinWidth="249" Grid.Row="2" Visibility="Collapsed" Width="{TemplateBinding Width}" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">

                                        <!--<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">-->
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">

                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>

                                            </Grid>
                                        </Grid>
                                    </Border>
                                </StackPanel>
                            </Grid>
                        </Grid >

                    </Grid>
                </Border>


            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" TargetName="ButtonExt" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
            </Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaLabel" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaVal" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PART_ColorStringEditor" Property="Width" Value="115"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridGradient" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="HSVPopup.ShinyRed">
        <Border Background="{TemplateBinding Background}" Name="ColorEditBorder"
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid ClipToBounds="True" 
            Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="7*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition Width="120"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Border Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Name="ColorPalitte" Background="{local:HSVBackgroundBrush Background}">
                </Border>
                <Canvas Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" ClipToBounds="True">
                    <Ellipse
            Canvas.Left="{Binding Path=SelectorPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Canvas.Top="{Binding Path=SelectorPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            Stroke="{Binding InvertColor, Converter={StaticResource ColorToBrush}, RelativeSource={RelativeSource TemplatedParent}}" Width="10" Height="10">
                    </Ellipse>
                    <Popup Name="WordKnownColorsPopup" PlacementRectangle="0,0,0,0" AllowsTransparency="True"
            HorizontalOffset="{Binding Path=WordKnownColorsPositionX,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            VerticalOffset="{Binding Path=WordKnownColorsPositionY,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"
            IsOpen="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border CornerRadius="2" ClipToBounds="True" BorderThickness="1" BorderBrush="Black">
                            <Border.Background>
                                <SolidColorBrush>
                                    <SolidColorBrush.Color>
                                        <Color A="200"  R="255" G="255" B="255"/>
                                    </SolidColorBrush.Color>
                                </SolidColorBrush>
                            </Border.Background>
                            <TextBox Name="WordKnownColorsTextBox" IsReadOnly="True" BorderBrush="Transparent" Foreground="Black" Background="Transparent"
                Text="{TemplateBinding Color, Converter={StaticResource ColorToWordKnownColors}}" BorderThickness="0" >
                            </TextBox>
                        </Border>
                    </Popup>
                </Canvas>
                <Slider Grid.Column="1"
                Grid.RowSpan="2"
                Margin="5,0,0,0"
                Orientation="Vertical"
                Grid.Row="0"
                Background="{local:HSVBackgroundBrush VerticalSlider}"
                Maximum="{Binding Path=SliderMaxValueHSV, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource Slider_CustomStyleVertical.ShinyRed}"
                Value="{Binding Path=SliderValueHSV, RelativeSource={RelativeSource TemplatedParent}}"/>
                <StackPanel Grid.Column="2" Grid.Row="1" Margin="1,2,0,0" Orientation="Horizontal">
                    <TextBox  Name="PART_ColorStringEditor"                
                 Height="20" 
                 Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" >
                    </TextBox>
                    <StackPanel  Name="EnableSwitch" Margin="5,0,0,2"  Height="20" Orientation="Horizontal">

                        <Button Width="20" Margin="2,2,3,1" Name="Solid">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <Button Width="20" Margin="0,2,2,1" Name="Gradient">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </StackPanel>
                </StackPanel>
                <Grid Grid.Column="2" Grid.Row="0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"/>
                        <ColumnDefinition Width="44"/>
                        <ColumnDefinition Width="16"/>
                        <ColumnDefinition Width="29"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <RowDefinition Height="21"/>
                        <!--<RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>-->
                    </Grid.RowDefinitions>
                    <RadioButton Grid.Column="0" Grid.Row="1"  Foreground="{TemplateBinding Foreground}" Content="H" Name="ButtomH">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
                                <TextBlock>Hue.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="2" Content="S" Foreground="{TemplateBinding Foreground}"  Name="ButtomS">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
                                <TextBlock>Saturation.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <RadioButton Grid.Column="0" Grid.Row="3" Content="V" Foreground="{TemplateBinding Foreground}"  Name="ButtomV">
                        <RadioButton.ToolTip>
                            <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
                                <TextBlock>Value/Brightness.</TextBlock>
                            </ToolTip>
                        </RadioButton.ToolTip>
                    </RadioButton>
                    <TextBox Grid.Column="1" Grid.Row="1" Margin="1,1,1,1" Name="Hval" Text="{Binding H, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="2" Margin="1,1,1,1" Name="Sval" Text="{Binding S, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Grid.Column="1" Grid.Row="3" Margin="1,1,1,1" Name="Vval"  Text="{Binding V, Converter={StaticResource FloatToString}, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Grid.Column="2" Name="AlphaLabel" Grid.Row="0" VerticalAlignment="Bottom" Height="21" HorizontalAlignment="Center">
					  A:
					  <TextBlock.ToolTip>
					    <ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
						  <TextBlock>Alpha.</TextBlock>
					    </ToolTip>
					  </TextBlock.ToolTip>
				    </TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="1" HorizontalAlignment="Center">
						R:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
								<TextBlock>Red.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="2" HorizontalAlignment="Center">
						G:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
								<TextBlock>Green.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBlock Grid.Column="2" Grid.Row="3" HorizontalAlignment="Center">
						B:
						<TextBlock.ToolTip>
							<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
								<TextBlock>Blue.</TextBlock>
							</ToolTip>
						</TextBlock.ToolTip>
					</TextBlock>
                    <TextBox Grid.Column="3" Grid.Row="0" Name="AlphaVal"  Text="{Binding A, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Bottom" Height="21" />
                    <TextBox Grid.Column="3" Grid.Row="1" Name="Rval" Text="{Binding R, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="2" Name="Gval" Text="{Binding G, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <TextBox Grid.Column="3" Grid.Row="3" Name="Bval" Text="{Binding B, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource RangedFloatToString},UpdateSourceTrigger=PropertyChanged}" />
                    <Rectangle Grid.Column="0" Grid.Row="0"  Grid.ColumnSpan="2" Margin="0,0,0,3"  Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>

                </Grid>
                <Border Grid.Row="3" Grid.ColumnSpan="3" Margin="-2,0,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,5,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Grid.ColumnSpan="2" Visibility="Visible" Name="GridPopup">

                                <ToggleButton HorizontalAlignment="Stretch" Name="PopButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{StaticResource ButtonBackgroundBrushKey.ShinyRed}" Template="{StaticResource TogglePopupButtonTemplate.ShinyRed}" Margin="0,2,0,0" ClickMode="Press" Height="14" >

                                </ToggleButton>

                                <Popup Name="GradPopup" PopupAnimation="Slide" AllowsTransparency="True" MinWidth="249" StaysOpen="False" Width="{TemplateBinding Width}"
					   IsOpen="{Binding ElementName= PopButton, Path=IsChecked}" >
                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">

                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>

                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid >

                    </Grid>
                </Border>


            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
            </Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaLabel" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaVal" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PART_ColorStringEditor" Property="Width" Value="115"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridGradient" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="IsOpen" Value="True" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGradientPropertyEnabled" Value="False"/>
                    <Condition Property="IsOpenGradientPropertyEditor" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="RGBExtended.ShinyRed">
        <Border MinWidth="250" Name="ColorEditBorder"
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Name="Grid" Margin="2,2,2,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="18"/>
                    <ColumnDefinition Width="20*"/>
                    <ColumnDefinition Width="24"/>

                    <ColumnDefinition Width="76"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Column="0" Grid.Row="0" Style="{StaticResource TextBlockStyle.ShinyRed}" HorizontalAlignment="Left">
					R:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Red</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Grid.Row="1" Style="{StaticResource TextBlockStyle.ShinyRed}" HorizontalAlignment="Left">
					G:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Green</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Grid.Row="2" Style="{StaticResource TextBlockStyle.ShinyRed}" HorizontalAlignment="Left">
					B:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Blue</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Name="AlphaText" Grid.Row="3" Style="{StaticResource TextBlockStyle.ShinyRed}" Visibility="Visible" HorizontalAlignment="Left">
					A:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Alpha</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <Slider Grid.Column="1" Grid.Row="0"  Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundR}" Value="{Binding Path=R, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="1" Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundG}" Value="{Binding Path=G, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="2" Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundB}" Value="{Binding Path=B, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="3" Name="AlphaSlider"   Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundA}" Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}"/>
                <TextBlock  Grid.Column="2" Grid.Row="0" Text="{local:ScRGBColorExtension R}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="1" Text="{local:ScRGBColorExtension G}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="2" Text="{local:ScRGBColorExtension B}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="3" Name="AlphaValue" Visibility="Visible" Text="{local:ScRGBColorExtension A}" Margin="1,0,1,0"/>
                <Rectangle Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Fill="{StaticResource BrushForTransparency.ShinyRed}"/>
                <Rectangle Name="ColorRect"  Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>
                <StackPanel Grid.Column="3" Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,1,5,1">
                    <Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorWhite">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="Black" CornerRadius="3" Background="White"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorBlack">
                        <Button.Template>
                            <ControlTemplate>
                                <Border CornerRadius="3" Background="Black"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <!--Background="{Binding Path=Color, RelativeSource={RelativeSource Self}, Converter={StaticResource ColorToBrush}}"-->
                    <!--Visibility="{Binding Path=IsMouseCaptured, ElementName=EyeDropBorder, Converter={shared:Converter shared:BooleanToVisibilityConverterEx}, ConverterParameter=inverse}"-->
                    <local:BorderEyeDrop CornerRadius="3"
					                     BorderThickness="1" 
                               BorderBrush="Gray" 
                               Width="20" 
					                     Name="EyeDropBorder">
                        <Image Width="15" Height="15" Name="PART_Image"
							     VerticalAlignment="Center" HorizontalAlignment="Center"
                   Source="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropGray.png"/>
                    </local:BorderEyeDrop>

                </StackPanel>
                <TextBox Grid.Column="3" Name="PART_ColorStringEditor" Grid.Row="3" Height="17" Margin="5,0,5,0" TextBlock.FontSize="10" Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" />
                <local:ColorBar Grid.Row="4" Grid.ColumnSpan="3" Name="PickerColorBar" 
                       
                        Height="20" HorizontalAlignment="Stretch"/>

                <StackPanel Grid.Column="4" Grid.Row="4" HorizontalAlignment="Center" Name="EnableSwitch"  Height="20" Orientation="Horizontal">
                    <Button Width="30" Margin="0,2,3,1" Name="Solid">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="30" Margin="0,2,2,1" Name="Gradient">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </StackPanel>
                <Border Grid.Row="5" Margin="-2,4,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" Grid.ColumnSpan="4" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Grid.ColumnSpan="2" Visibility="Visible" Name="GridPopup">
                                <StackPanel>
                                    <!--Background="{shared:SkinObject BrushBackground}"-->
                                    <ToggleButton Visibility="Visible" Name="ButtonExt" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{StaticResource ButtonBackgroundBrushKey.ShinyRed}" Template="{StaticResource TogglePopupButtonTemplate.ShinyRed}" Margin="0,2,0,0" Height="14" HorizontalAlignment="Stretch">

                                    </ToggleButton>
                                    <Border Name="GradPopup" Background="{TemplateBinding Background}" MinWidth="249" Grid.Row="2" Visibility="Collapsed" Width="{TemplateBinding Width}" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>

                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Visibility="Visible"  Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Visibility="Visible"  Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">

                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>

                                            </Grid>
                                        </Grid>
                                    </Border>
                                </StackPanel>
                            </Grid>

                        </Grid >

                    </Grid>
                </Border>
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" TargetName="ButtonExt" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
            </Trigger>
            <Trigger SourceName="EyeDropBorder" Property="IsMouseCaptured" Value="True">
                <Setter TargetName="EyeDropBorder" Property="Color" Value="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                <Setter TargetName="PART_Image" Property="Source" Value="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropColor.png"/>
            </Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaText" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaSlider" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaValue" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PickerColorBar" Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"/>
                <Setter Property="Grid.ColumnSpan" TargetName="PickerColorBar" Value="4"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridBorder" Property="Visibility" Value="Collapsed"></Setter>
                <Setter Property="Margin" TargetName="Grid" Value="2"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type local:ColorEdit}" x:Key="RGBPopup.ShinyRed">
        <Border MinWidth="250" Name="ColorEditBorder"
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Name="Grid" Margin="2,2,2,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="18"/>
                    <ColumnDefinition Width="20*"/>
                    <ColumnDefinition Width="24"/>

                    <ColumnDefinition Width="76"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="20"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Column="0" Grid.Row="0" Style="{StaticResource TextBlockStyle.ShinyRed}" HorizontalAlignment="Left">
					R:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Red</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Grid.Row="1" Style="{StaticResource TextBlockStyle.ShinyRed}" HorizontalAlignment="Left">
					G:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Green</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Grid.Row="2" Style="{StaticResource TextBlockStyle.ShinyRed}" HorizontalAlignment="Left">
					B:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Blue</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <TextBlock Grid.Column="0" Name="AlphaText" Grid.Row="3" Style="{StaticResource TextBlockStyle.ShinyRed}" Visibility="Visible" HorizontalAlignment="Left">
					A:
					<TextBlock.ToolTip>
						<ToolTip Style="{StaticResource ToolTip_CustomStyle.ShinyRed}">
							<TextBlock>Alpha</TextBlock>
						</ToolTip>
					</TextBlock.ToolTip>
				</TextBlock>
                <Slider Grid.Column="1" Grid.Row="0"  Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundR}" Value="{Binding Path=R, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="1" Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundG}" Value="{Binding Path=G, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="2" Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundB}" Value="{Binding Path=B, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Slider Grid.Column="1" Grid.Row="3" Name="AlphaSlider"   Style="{StaticResource Slider_CustomStyle.ShinyRed}" Background="{TemplateBinding BackgroundA}" Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}"/>
                <TextBlock  Grid.Column="2" Grid.Row="0" Text="{local:ScRGBColorExtension R}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="1" Text="{local:ScRGBColorExtension G}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="2" Text="{local:ScRGBColorExtension B}" Margin="1,0,1,0"/>
                <TextBlock Grid.Column="2" Grid.Row="3" Name="AlphaValue" Visibility="Visible" Text="{local:ScRGBColorExtension A}" Margin="1,0,1,0"/>
                <Rectangle Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Fill="{StaticResource BrushForTransparency.ShinyRed}"/>
                <Rectangle Name="ColorRect"  Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Margin="5,4,5,1" Stroke ="Black" StrokeThickness ="1" Fill="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToBrush}}"/>
                <StackPanel Grid.Column="3" Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5,1,5,1">
                    <Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorWhite">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="Black" CornerRadius="3" Background="White"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="20" Margin="0,0,2,0" Command="local:ColorEdit.M_changeColorBlack">
                        <Button.Template>
                            <ControlTemplate>
                                <Border CornerRadius="3" Background="Black"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <!--Background="{Binding Path=Color, RelativeSource={RelativeSource Self}, Converter={StaticResource ColorToBrush}}"-->
                    <!--Visibility="{Binding Path=IsMouseCaptured, ElementName=EyeDropBorder, Converter={shared:Converter shared:BooleanToVisibilityConverterEx}, ConverterParameter=inverse}"-->
                    <local:BorderEyeDrop CornerRadius="3"
					                     BorderThickness="1" 
                               BorderBrush="Gray" 
                               Width="20" 
					                     Name="EyeDropBorder">
                        <Image Width="15" Height="15" Name="PART_Image"
							     VerticalAlignment="Center" HorizontalAlignment="Center"
                   Source="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropGray.png"/>
                    </local:BorderEyeDrop>

                </StackPanel>
                <TextBox Grid.Column="3" Name="PART_ColorStringEditor" Grid.Row="3" Height="17" Margin="5,0,5,0" TextBlock.FontSize="10" Text="{Binding Color, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToString}, RelativeSource={RelativeSource TemplatedParent}}" />
                <local:ColorBar Grid.Row="4" Grid.ColumnSpan="3" Name="PickerColorBar" 
                       
                        Height="20" HorizontalAlignment="Stretch"/>

                <StackPanel Grid.Column="4" Grid.Row="4" HorizontalAlignment="Center" Name="EnableSwitch"  Height="20" Orientation="Horizontal">
                    <Button Width="30" Margin="0,2,3,1" Name="Solid">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource SolidBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Width="30" Margin="0,2,2,1" Name="Gradient">
                        <Button.Template>
                            <ControlTemplate>
                                <Border BorderThickness="1" BorderBrush="#FF231F20" CornerRadius="3" Background="{StaticResource GradientBrushKey}"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </StackPanel>
                <Border Grid.Row="5" Margin="-2,4,-2,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Name="GridBorder"  Background="Transparent" Grid.ColumnSpan="4" >
                    <Grid>
                        <Grid Name="GridGradient" Margin="0,2,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>

                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" Margin="0,7,0,2" Grid.Row="0">
                                <Canvas Height="25" x:Name="GradientBar" >
                                    <Rectangle Width="150" Stroke="#FF231F20" StrokeThickness="0.5" Height="16" x:Name="GradRect">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                <GradientStop Color="#FF000000" Offset="0"/>
                                                <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Canvas>

                            </Grid>

                            <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0">
                                <Button Width="25"  Height="20" Margin="2,2,3,1" VerticalAlignment="Center" Name="linear" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource LinearBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="radial" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" BorderThickness="0.5" BorderBrush="#FF231F20" Background="{StaticResource RadialBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>
                                <Button Height="20" Margin="0,2,3,1" Width="25"  VerticalAlignment="Center" Name="Reverse" >
                                    <Button.Content>
                                        <!--<ControlTemplate>-->
                                        <Border Width="15" Height="12" Background="{StaticResource ReverseBrushKey}"/>
                                        <!--</ControlTemplate>-->
                                    </Button.Content>
                                </Button>

                            </StackPanel>
                            <Grid Grid.Row="1" Visibility="Visible" Grid.ColumnSpan="2" Name="GridPopup">

                                <!--Background="{shared:SkinObject BrushBackground}"-->
                                <ToggleButton Name="PopButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0" Background="{StaticResource ButtonBackgroundBrushKey.ShinyRed}" Template="{StaticResource TogglePopupButtonTemplate.ShinyRed}" Margin="0,2,0,0" Height="14" HorizontalAlignment="Stretch">

                                </ToggleButton>
                                <Popup Name="GradPopup" PopupAnimation="Slide" MinWidth="249" AllowsTransparency="True" StaysOpen="False" Width="{TemplateBinding Width}"
					   IsOpen="{Binding ElementName=PopButton, Path=IsChecked}" >

                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <!--<Popup MinWidth="250" Margin="2" Name="GradPopup" Visibility="Collapsed" Grid.Row="2" Grid.ColumnSpan="4">-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                                <RowDefinition Height="Auto"></RowDefinition>
                                            </Grid.RowDefinitions>

                                            <Grid Grid.Row="0" x:Name="LinearGrid" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="3.5*"/>
                                                    <ColumnDefinition Width="6.5*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="startx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="starty"  ></syncfusion:UpDown>
                                                </StackPanel>
                                                <TextBlock Text="Start Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="End Point" FontSize="10"  VerticalAlignment="Center" Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>


                                                <StackPanel Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="2">
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="endx" ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  Name="endy"></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                            <Grid Visibility="Collapsed" x:Name="RadialGrid" Grid.Row="1" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Grid Grid.Column="1" Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="75"/>
                                                        <ColumnDefinition Width="75"/>
                                                    </Grid.ColumnDefinitions>

                                                    <TextBlock Text="X" FontSize="10" Margin="25,2,0,1" Grid.Column="0" HorizontalAlignment="Center" ></TextBlock>
                                                    <TextBlock Text="Y" FontSize="10" Margin="20,2,0,1" Grid.Column="1" HorizontalAlignment="Center" ></TextBlock>
                                                </Grid>

                                                <TextBlock Text="Gradient Origin" FontSize="10"  VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="1" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Centre" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Row="2" Grid.Column="0"></TextBlock>
                                                <TextBlock Text="Radius" Grid.Row="3" FontSize="10" VerticalAlignment="Center"  Margin="8,2,2,2" Grid.Column="0"></TextBlock>

                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2"  Grid.Column="1" Grid.Row="1">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25" x:Name="gradx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="grady"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="2">

                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrex"></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Step="0.01" MinValue="-1" MaxValue="1" Height="25"  x:Name="centrey"></syncfusion:UpDown>
                                                </StackPanel>
                                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" Margin="2" Grid.Column="1" Grid.Row="3">
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusx"  ></syncfusion:UpDown>
                                                    <syncfusion:UpDown Width="75" Height="25" Step="0.01" MinValue="-1" MaxValue="1" Name="radiusy"  ></syncfusion:UpDown>
                                                </StackPanel>
                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Grid >

                    </Grid>
                </Border>
            </Grid>

        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="shared:SkinStorage.VisualStyle" Value="ShinyBlue">
                <Setter Property="Background" TargetName="PopButton" Value="{StaticResource ButtonBackgroundBrushKey.ShinyBlue}"/>
            </Trigger>
            <Trigger SourceName="EyeDropBorder" Property="IsMouseCaptured" Value="True">
                <Setter TargetName="EyeDropBorder" Property="Color" Value="{Binding Path=Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                <Setter TargetName="PART_Image" Property="Source" Value="pack://application:,,,/Syncfusion.Tools.WPF;component/Controls/ColorPicker/Images/EyeDropColor.png"/>
            </Trigger>
            <Trigger Property="IsAlphaVisible" Value="False">
                <Setter TargetName="AlphaText" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaSlider" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="AlphaValue" Property="Visibility" Value="Collapsed"></Setter>
            </Trigger>
            <Trigger Property="EnableGradientToSolidSwitch" Value="false">
                <Setter TargetName="EnableSwitch" Property="Visibility" Value="Collapsed"></Setter>
                <Setter TargetName="PickerColorBar" Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ColorEdit}}}"/>
                <Setter Property="Grid.ColumnSpan" TargetName="PickerColorBar" Value="4"/>
            </Trigger>
            <Trigger Property="BrushMode" Value="Solid">
                <Setter TargetName="GridBorder" Property="Visibility" Value="Collapsed"></Setter>
                <Setter Property="Margin" TargetName="Grid" Value="2"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="True">
                <Setter Property="IsOpen" Value="True" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsOpenGradientPropertyEditor" Value="False">
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </Trigger>
            <Trigger Property="IsGradientPropertyEnabled" Value="False">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGradientPropertyEnabled" Value="False"/>
                    <Condition Property="IsOpenGradientPropertyEditor" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" TargetName="GridPopup"/>
                <Setter Property="IsOpen" Value="False" TargetName="GradPopup"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    

</ResourceDictionary>